import{_ as a,c as t,o,ag as i}from"./chunks/framework.Ds6Eueu6.js";const h=JSON.parse('{"title":"orafce","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/modules/orafce_ref.md","filePath":"docs/7x/ref_guide/modules/orafce_ref.md"}'),n={name:"docs/7x/ref_guide/modules/orafce_ref.md"};function s(r,e,l,c,d,p){return o(),t("div",null,e[0]||(e[0]=[i(`<h1 id="orafce" tabindex="-1">orafce <a class="header-anchor" href="#orafce" aria-label="Permalink to &quot;orafce&quot;">​</a></h1><p>The <code>orafce</code> module provides Oracle Compatibility SQL functions in WarehousePG. These functions target PostgreSQL but can also be used in WarehousePG.</p><p>The WarehousePG <code>orafce</code> module is a modified version of the <a href="https://github.com/orafce/orafce" target="_blank" rel="noreferrer">open source Orafce PostgreSQL module extension</a>. The modified <code>orafce</code> source files for WarehousePG can be found in the <code>gpcontrib/orafce</code> directory in the <a href="https://github.com/greenplum-db/gpdb" target="_blank" rel="noreferrer">WarehousePG open source project</a>. The source reflects the Orafce 3.6.1 release and additional commits to <a href="https://github.com/orafce/orafce/tree/3af70a28f6ab81f43c990fb5661df99a37328b8a" target="_blank" rel="noreferrer">3af70a28f6</a>.</p><p>There are some restrictions and limitations when you use the module in WarehousePG.</p><h2 id="installing-and-registering-the-module" tabindex="-1"><a id="topic_reg"></a>Installing and Registering the Module <a class="header-anchor" href="#installing-and-registering-the-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_reg&quot;&gt;&lt;/a&gt;Installing and Registering the Module&quot;">​</a></h2><blockquote><p><strong>Note</strong> Always use the Oracle Compatibility Functions module included with your WarehousePG version. Before upgrading to a new WarehousePG version, uninstall the compatibility functions from each of your databases, and then, when the upgrade is complete, reinstall the compatibility functions from the new WarehousePG release. See the WarehousePG release notes for upgrade prerequisites and procedures.</p></blockquote><p>The <code>orafce</code> module is installed when you install WarehousePG. Before you can use any of the functions defined in the module, you must register the <code>orafce</code> extension in each database in which you want to use the functions. Refer to <a href="./../../install_guide/install_extensions.html">Installing Extensions</a> for more information.</p><h2 id="warehousepg-considerations" tabindex="-1"><a id="topic_mpp"></a>WarehousePG Considerations <a class="header-anchor" href="#warehousepg-considerations" aria-label="Permalink to &quot;&lt;a id=&quot;topic_mpp&quot;&gt;&lt;/a&gt;WarehousePG Considerations&quot;">​</a></h2><p>The following functions are available by default in WarehousePG and do not require installing the Oracle Compatibility Functions:</p><ul><li>sinh()</li><li>tanh()</li><li>cosh()</li><li>decode() (See <a href="#topic3">WarehousePG Implementation Differences</a> for more information.)</li></ul><h3 id="warehousepg-implementation-differences" tabindex="-1"><a id="topic3"></a>WarehousePG Implementation Differences <a class="header-anchor" href="#warehousepg-implementation-differences" aria-label="Permalink to &quot;&lt;a id=&quot;topic3&quot;&gt;&lt;/a&gt;WarehousePG Implementation Differences&quot;">​</a></h3><p>There are differences in the implementation of the compatibility functions in WarehousePG from the original PostgreSQL <code>orafce</code> module extension implementation. Some of the differences are as follows:</p><ul><li><p>The original <code>orafce</code> module implementation performs a decimal round off, the WarehousePG implementation does not:</p><ul><li>2.00 becomes 2 in the original module implementation</li><li>2.00 remains 2.00 in the WarehousePG implementation</li></ul></li><li><p>The provided Oracle compatibility functions handle implicit type conversions differently. For example, using the <code>decode</code> function:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>decode(&lt;expression&gt;, &lt;value&gt;, &lt;return&gt; [,&lt;value&gt;, &lt;return&gt;]...</span></span>
<span class="line"><span>            [, default])</span></span></code></pre></div><p>The original <code>orafce</code> module implementation automatically converts expression and each value to the data type of the first value before comparing. It automatically converts return to the same data type as the first result.</p><p>The WarehousePG implementation restricts return and <code>default</code> to be of the same data type. The expression and value can be different types if the data type of value can be converted into the data type of the expression. This is done implicitly. Otherwise, <code>decode</code> fails with an <code>invalid input syntax</code> error. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT decode(&#39;a&#39;,&#39;M&#39;,true,false);</span></span>
<span class="line"><span>CASE</span></span>
<span class="line"><span>------</span></span>
<span class="line"><span> f</span></span>
<span class="line"><span>(1 row)</span></span>
<span class="line"><span>SELECT decode(1,&#39;M&#39;,true,false);</span></span>
<span class="line"><span>ERROR: Invalid input syntax for integer:*&quot;M&quot; </span></span>
<span class="line"><span>*LINE 1: SELECT decode(1,&#39;M&#39;,true,false);</span></span></code></pre></div></li><li><p>Numbers in <code>bigint</code> format are displayed in scientific notation in the original <code>orafce</code> module implementation but not in the WarehousePG implementation:</p><ul><li>9223372036854775 displays as 9.2234E+15 in the original implementation</li><li>9223372036854775 remains 9223372036854775 in the WarehousePG implementation</li></ul></li><li><p>The default date and timestamp format in the original <code>orafce</code> module implementation is different than the default format in the WarehousePG implementation. If the following code is run:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE TEST(date1 date, time1 timestamp, time2 </span></span>
<span class="line"><span>                  timestamp with time zone);</span></span>
<span class="line"><span>INSERT INTO TEST VALUES (&#39;2001-11-11&#39;,&#39;2001-12-13 </span></span>
<span class="line"><span>                 01:51:15&#39;,&#39;2001-12-13 01:51:15 -08:00&#39;);</span></span>
<span class="line"><span>SELECT DECODE(date1, &#39;2001-11-11&#39;, &#39;2001-01-01&#39;) FROM TEST;</span></span></code></pre></div><p>The WarehousePG implementation returns the row, but the original implementation returns no rows.</p><blockquote><p><strong>Note</strong> The correct syntax when using the original <code>orafce</code> implementation to return the row is:</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT DECODE(to_char(date1, &#39;YYYY-MM-DD&#39;), &#39;2001-11-11&#39;, </span></span>
<span class="line"><span>              &#39;2001-01-01&#39;) FROM TEST</span></span></code></pre></div></li><li><p>The functions in the Oracle Compatibility Functions <code>dbms_alert</code> package are not implemented for WarehousePG.</p></li><li><p>The <code>decode()</code> function is removed from the WarehousePG Oracle Compatibility Functions. The WarehousePG parser internally converts a <code>decode()</code> function call to a <code>CASE</code> statement.</p></li></ul><h2 id="using-orafce" tabindex="-1"><a id="topic_using"></a>Using orafce <a class="header-anchor" href="#using-orafce" aria-label="Permalink to &quot;&lt;a id=&quot;topic_using&quot;&gt;&lt;/a&gt;Using orafce&quot;">​</a></h2><p>Some Oracle Compatibility Functions reside in the <code>oracle</code> schema. To access them, set the search path for the database to include the <code>oracle</code> schema name. For example, this command sets the default search path for a database to include the <code>oracle</code> schema:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER DATABASE &lt;db_name&gt; SET &lt;search_path&gt; = &quot;$user&quot;, public, oracle;</span></span></code></pre></div><p>Note the following differences when using the Oracle Compatibility Functions with PostgreSQL vs. using them with WarehousePG:</p><ul><li>If you use validation scripts, the output may not be exactly the same as with the original <code>orafce</code> module implementation.</li><li>The functions in the Oracle Compatibility Functions <code>dbms_pipe</code> package run only on the WarehousePG coordinator host.</li><li>The upgrade scripts in the Orafce project do not work with WarehousePG.</li></ul><h2 id="additional-module-documentation" tabindex="-1"><a id="topic_info"></a>Additional Module Documentation <a class="header-anchor" href="#additional-module-documentation" aria-label="Permalink to &quot;&lt;a id=&quot;topic_info&quot;&gt;&lt;/a&gt;Additional Module Documentation&quot;">​</a></h2><p>Refer to the <a href="https://github.com/greenplum-db/gpdb/tree/main/gpcontrib/orafce/README.asciidoc" target="_blank" rel="noreferrer">README</a> and <a href="https://github.com/greenplum-db/gpdb/tree/main/gpcontrib/orafce/doc/orafce_documentation" target="_blank" rel="noreferrer">WarehousePG orafce documentation</a> in the WarehousePG github repository for detailed information about the individual functions and supporting objects provided in this module.</p>`,20)]))}const m=a(n,[["render",s]]);export{h as __pageData,m as default};
