import{_ as e,c as o,o as d,ag as c}from"./chunks/framework.Ds6Eueu6.js";const _=JSON.parse('{"title":"pg_policy","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/system_catalogs/pg_policy.md","filePath":"docs/7x/ref_guide/system_catalogs/pg_policy.md"}'),a={name:"docs/7x/ref_guide/system_catalogs/pg_policy.md"};function r(i,t,s,l,p,h){return d(),o("div",null,t[0]||(t[0]=[c('<h1 id="pg-policy" tabindex="-1">pg_policy <a class="header-anchor" href="#pg-policy" aria-label="Permalink to &quot;pg_policy&quot;">â€‹</a></h1><p>The catalog <code>pg_policy</code> stores row level security policies for tables. A policy includes the kind of command that it applies to (possibly all commands), the roles that it applies to, the expression to be added as a security-barrier qualification to queries that include the table, and the expression to be added as a <code>WITH CHECK</code> option for queries that attempt to add new records to the table.</p><table tabindex="0"><thead><tr><th>Column Name</th><th>Type</th><th>References</th><th>Description</th></tr></thead><tbody><tr><td><code>oid</code></td><td>oid</td><td></td><td>The object ID</td></tr><tr><td><code>polname</code></td><td>name</td><td></td><td>The name of the policy</td></tr><tr><td><code>polerelid</code></td><td>oid</td><td>pg_class.oid</td><td>The table to which the policy applies</td></tr><tr><td><code>polcmd</code></td><td>char</td><td></td><td>The command type to which the policy is applied: <code>r</code> for <code>SELECT</code>, <code>a</code> for <code>INSERT</code>, <code>w</code> for <code>UPDATE</code>, <code>d</code> for <code>DELETE</code>, or <code>*</code> for all</td></tr><tr><td><code>polpermissive</code></td><td>boolean</td><td></td><td>Is the policy permissive or restrictive?</td></tr><tr><td><code>polroles</code></td><td>oid[]</td><td>pg_authid.oid</td><td>The roles to which the policy is applied</td></tr><tr><td><code>polqual</code></td><td>pg_node_tree</td><td></td><td>The expression tree to be added to the security barrier qualifications for queries that use the table</td></tr><tr><td><code>polwithcheck</code></td><td>pg_node_tree</td><td></td><td>The expression tree to be added to the <code>WITH CHECK</code> qualifications for queries that attempt to add rows to the table</td></tr></tbody></table><blockquote><p><strong>Note</strong> WarehousePG applies policies stored in <code>pg_policy</code> only when <code>pg_class.relrowsecurity</code> is set for their table.</p></blockquote><p><strong>Parent topic:</strong> <a href="./../system_catalogs/catalog_ref-html.html">System Catalogs Definitions</a></p>',5)]))}const m=e(a,[["render",r]]);export{_ as __pageData,m as default};
