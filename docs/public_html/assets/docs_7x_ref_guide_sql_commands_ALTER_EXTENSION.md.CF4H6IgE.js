import{_ as a,c as t,o as n,ag as s}from"./chunks/framework.Ds6Eueu6.js";const m=JSON.parse('{"title":"ALTER EXTENSION","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/sql_commands/ALTER_EXTENSION.md","filePath":"docs/7x/ref_guide/sql_commands/ALTER_EXTENSION.md"}'),o={name:"docs/7x/ref_guide/sql_commands/ALTER_EXTENSION.md"};function p(i,e,l,r,c,d){return n(),t("div",null,e[0]||(e[0]=[s(`<h1 id="alter-extension" tabindex="-1">ALTER EXTENSION <a class="header-anchor" href="#alter-extension" aria-label="Permalink to &quot;ALTER EXTENSION&quot;">​</a></h1><p>Change the definition of an extension.</p><h2 id="synopsis" tabindex="-1"><a id="section2"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;section2&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER EXTENSION &lt;name&gt; UPDATE [ TO &lt;new_version&gt; ]</span></span>
<span class="line"><span>ALTER EXTENSION &lt;name&gt; SET SCHEMA &lt;new_schema&gt;</span></span>
<span class="line"><span>ALTER EXTENSION &lt;name&gt; ADD &lt;member_object&gt;</span></span>
<span class="line"><span>ALTER EXTENSION &lt;name&gt; DROP &lt;member_object&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>where &lt;member_object&gt; is:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>  ACCESS METHOD &lt;object_name&gt; |</span></span>
<span class="line"><span>  AGGREGATE &lt;aggregate_name&gt; ( &lt;aggregate_signature&gt; ) |</span></span>
<span class="line"><span>  CAST (&lt;source_type&gt; AS &lt;target_type&gt;) |</span></span>
<span class="line"><span>  COLLATION &lt;object_name&gt; |</span></span>
<span class="line"><span>  CONVERSION &lt;object_name&gt; |</span></span>
<span class="line"><span>  DOMAIN &lt;object_name&gt; |</span></span>
<span class="line"><span>  EVENT TRIGGER &lt;object_name&gt; |</span></span>
<span class="line"><span>  FOREIGN DATA WRAPPER &lt;object_name&gt; |</span></span>
<span class="line"><span>  FOREIGN TABLE &lt;object_name&gt; |</span></span>
<span class="line"><span>  FUNCTION &lt;function_name&gt; ( [ [ &lt;argmode&gt; ] [ &lt;argname&gt; ] &lt;argtype&gt; [, ...] ] ) |</span></span>
<span class="line"><span>  MATERIALIZED VIEW &lt;object_name&gt; |</span></span>
<span class="line"><span>  OPERATOR &lt;operator_name&gt; (&lt;left_type&gt;, &lt;right_type&gt;) |</span></span>
<span class="line"><span>  OPERATOR CLASS &lt;object_name&gt; USING &lt;index_method&gt; |</span></span>
<span class="line"><span>  OPERATOR FAMILY &lt;object_name&gt; USING &lt;index_method&gt; |</span></span>
<span class="line"><span>  [ PROCEDURAL ] LANGUAGE &lt;object_name&gt; |</span></span>
<span class="line"><span>  PROCEDURE &lt;procedure_name&gt; [ ( [ [ &lt;argmode&gt; ] [ &lt;argname&gt; ] &lt;argtype&gt; [, ...] ] ) ] |</span></span>
<span class="line"><span>  ROUTINE &lt;routine_name&gt; [ ( [ [ &lt;argmode&gt; ] [ &lt;argname&gt; ] &lt;argtype&gt; [, ...] ] ) ] |</span></span>
<span class="line"><span>  SCHEMA &lt;object_name&gt; |</span></span>
<span class="line"><span>  SEQUENCE &lt;object_name&gt; |</span></span>
<span class="line"><span>  SERVER &lt;object_name&gt; |</span></span>
<span class="line"><span>  TABLE &lt;object_name&gt; |</span></span>
<span class="line"><span>  TEXT SEARCH CONFIGURATION &lt;object_name&gt; |</span></span>
<span class="line"><span>  TEXT SEARCH DICTIONARY &lt;object_name&gt; |</span></span>
<span class="line"><span>  TEXT SEARCH PARSER &lt;object_name&gt; |</span></span>
<span class="line"><span>  TEXT SEARCH TEMPLATE &lt;object_name&gt; |</span></span>
<span class="line"><span>  TRANSFORM FOR &lt;type_name&gt; LANGUAGE &lt;lang_name&gt; |</span></span>
<span class="line"><span>  TYPE &lt;object_name&gt; |</span></span>
<span class="line"><span>  VIEW &lt;object_name&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>and &lt;aggregate_signature&gt; is:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* |</span></span>
<span class="line"><span>[ &lt;argmode&gt; ] [ &lt;argname&gt; ] &lt;argtype&gt; [ , ... ] |</span></span>
<span class="line"><span>[ [ &lt;argmode&gt; ] [ &lt;argname&gt; ] &lt;argtype&gt; [ , ... ] ] ORDER BY [ &lt;argmode&gt; ] [ &lt;argname&gt; ] &lt;argtype&gt; [ , ... ]</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="section3"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;section3&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p><code>ALTER EXTENSION</code> changes the definition of an installed extension. There are several subforms:</p><p>UPDATE : This form updates the extension to a newer version. The extension must supply a suitable update script (or series of scripts) that can modify the currently-installed version into the requested version.</p><p>SET SCHEMA : This form moves the extension member objects into another schema. The extension must be <em>relocatable</em> for this command to succeed.</p><p>ADD member_object : This form adds an existing object to the extension. This is mainly useful in extension update scripts. The object will subsequently be treated as a member of the extension; notably, it can only be dropped by dropping the extension.</p><p>DROP member_object : This form removes a member object from the extension. This is mainly useful in extension update scripts. The object is not dropped, only disassociated from the extension.</p><p>See <a href="https://www.postgresql.org/docs/12/extend-extensions.html" target="_blank" rel="noreferrer">Packaging Related Objects into an Extension</a> for more information about these operations.</p><p>You must own the extension to use <code>ALTER EXTENSION</code>. The <code>ADD</code> and <code>DROP</code> forms also require ownership of the object that is being added or dropped.</p><h2 id="parameters" tabindex="-1"><a id="section4"></a>Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;&lt;a id=&quot;section4&quot;&gt;&lt;/a&gt;Parameters&quot;">​</a></h2><p>name : The name of an installed extension.</p><p>new_version : The new version of the extension. The new_version can be either an identifier or a string literal. If not specified, <code>ALTER EXTENSION UPDATE</code> attempts to update to whatever is shown as the default version in the extension&#39;s control file.</p><p>new_schema : The new schema for the extension.</p><p>object_name aggregate_name function_name operator_name procedure_name routine_name : The name of an object to be added to or removed from the extension. Names of tables, aggregates, domains, foreign tables, functions, operators, operator classes, operator families, procedures, routines, sequences, text search objects, types, and views can be schema-qualified.</p><p>source_type : The name of the source data type of the cast.</p><p>target_type : The name of the target data type of the cast.</p><p>argmode : The mode of a function or aggregate argument: <code>IN</code>, <code>OUT</code>, <code>INOUT</code>, or <code>VARIADIC</code>. If omitted, the default is <code>IN</code>. Note that <code>ALTER EXTENSION</code> does not actually pay any attention to <code>OUT</code> arguments, since only the input arguments are needed to determine the function&#39;s identity. So it is sufficient to list the <code>IN</code>, <code>INOUT</code>, and <code>VARIADIC</code> arguments.</p><p>argname : The name of a function or aggregate argument. Note that <code>ALTER EXTENSION</code> does not actually pay any attention to argument names, since only the argument data types are needed to determine the function&#39;s identity.</p><p>argtype : The data type of a function, procedure, or aggregate argument.</p><p>left_type right_type : The data types of the operator&#39;s arguments (optionally schema-qualified) . Specify <code>NONE</code> for the missing argument of a prefix or postfix operator.</p><p>PROCEDURAL : This is a noise word.</p><p>type_name : The name of the data type of the transform.</p><p>lang_name : The name of the language of the transform.</p><h2 id="examples" tabindex="-1"><a id="section5"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;section5&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>To update the hstore extension to version 2.0:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER EXTENSION hstore UPDATE TO &#39;2.0&#39;;</span></span></code></pre></div><p>To change the schema of the <code>hstore</code> extension to <code>utils</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER EXTENSION hstore SET SCHEMA utils;</span></span></code></pre></div><p>To add an existing function to the <code>hstore</code> extension:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER EXTENSION hstore ADD FUNCTION populate_record(anyelement, hstore);</span></span></code></pre></div><h2 id="compatibility" tabindex="-1"><a id="section6"></a>Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;&lt;a id=&quot;section6&quot;&gt;&lt;/a&gt;Compatibility&quot;">​</a></h2><p><code>ALTER EXTENSION</code> is a WarehousePG extension.</p><h2 id="see-also" tabindex="-1"><a id="section7"></a>See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;&lt;a id=&quot;section7&quot;&gt;&lt;/a&gt;See Also&quot;">​</a></h2><p><a href="./CREATE_EXTENSION.html">CREATE EXTENSION</a>, <a href="./DROP_EXTENSION.html">DROP EXTENSION</a></p><p><strong>Parent topic:</strong> <a href="./../sql_commands/sql_ref.html">SQL Commands</a></p>`,38)]))}const h=a(o,[["render",p]]);export{m as __pageData,h as default};
