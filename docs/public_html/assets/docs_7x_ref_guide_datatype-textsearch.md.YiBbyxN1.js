import{_ as s,c as e,o as t,ag as n}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"Text Search Data Types","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/datatype-textsearch.md","filePath":"docs/7x/ref_guide/datatype-textsearch.md"}'),p={name:"docs/7x/ref_guide/datatype-textsearch.md"};function o(i,a,c,l,r,d){return t(),e("div",null,a[0]||(a[0]=[n(`<h1 id="text-search-data-types" tabindex="-1">Text Search Data Types <a class="header-anchor" href="#text-search-data-types" aria-label="Permalink to &quot;Text Search Data Types&quot;">​</a></h1><p>WarehousePG provides two data types that are designed to support full text search, which is the activity of searching through a collection of natural-language <em>documents</em> to locate those that best match a <em>query</em>. The <code>tsvector</code> type represents a document in a form optimized for text search; the <code>tsquery</code> type similarly represents a text query. <a href="./../admin_guide/textsearch/full-text-search.html">Using Full Text Search</a> provides a detailed explanation of this facility, and <a href="./function-summary.html">Text Search Functions and Operators</a> summarizes the related functions and operators.</p><p>The <code>tsvector</code> and <code>tsquery</code> types cannot be part of the distribution key of a WarehousePG table.</p><p><strong>Parent topic:</strong> <a href="./data_types.html">Data Types</a></p><h2 id="tsvector" tabindex="-1"><a id="topic_mzv_44c_qfb"></a>tsvector <a class="header-anchor" href="#tsvector" aria-label="Permalink to &quot;&lt;a id=&quot;topic_mzv_44c_qfb&quot;&gt;&lt;/a&gt;tsvector&quot;">​</a></h2><p>A <code>tsvector</code> value is a sorted list of distinct <em>lexemes</em>, which are words that have been <em>normalized</em> to merge different variants of the same word (see <a href="./../admin_guide/textsearch/full-text-search.html">Using Full Text Search</a> for details). Sorting and duplicate-elimination are done automatically during input, as shown in this example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT &#39;a fat cat sat on a mat and ate a fat rat&#39;::tsvector;</span></span>
<span class="line"><span>                      tsvector</span></span>
<span class="line"><span>----------------------------------------------------</span></span>
<span class="line"><span> &#39;a&#39; &#39;and&#39; &#39;ate&#39; &#39;cat&#39; &#39;fat&#39; &#39;mat&#39; &#39;on&#39; &#39;rat&#39; &#39;sat&#39;</span></span></code></pre></div><p>To represent lexemes containing whitespace or punctuation, surround them with quotes:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT $$the lexeme &#39;    &#39; contains spaces$$::tsvector;</span></span>
<span class="line"><span>                 tsvector                  </span></span>
<span class="line"><span>-------------------------------------------</span></span>
<span class="line"><span> &#39;    &#39; &#39;contains&#39; &#39;lexeme&#39; &#39;spaces&#39; &#39;the&#39;</span></span></code></pre></div><p>(We use dollar-quoted string literals in this example and the next one to avoid the confusion of having to double quote marks within the literals.) Embedded quotes and backslashes must be doubled:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT $$the lexeme &#39;Joe&#39;&#39;s&#39; contains a quote$$::tsvector;</span></span>
<span class="line"><span>                    tsvector                    </span></span>
<span class="line"><span>------------------------------------------------</span></span>
<span class="line"><span> &#39;Joe&#39;&#39;s&#39; &#39;a&#39; &#39;contains&#39; &#39;lexeme&#39; &#39;quote&#39; &#39;the&#39;</span></span></code></pre></div><p>Optionally, integer <em>positions</em> can be attached to lexemes:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT &#39;a:1 fat:2 cat:3 sat:4 on:5 a:6 mat:7 and:8 ate:9 a:10 fat:11 rat:12&#39;::tsvector;</span></span>
<span class="line"><span>                                  tsvector</span></span>
<span class="line"><span>-------------------------------------------------------------------------------</span></span>
<span class="line"><span> &#39;a&#39;:1,6,10 &#39;and&#39;:8 &#39;ate&#39;:9 &#39;cat&#39;:3 &#39;fat&#39;:2,11 &#39;mat&#39;:7 &#39;on&#39;:5 &#39;rat&#39;:12 &#39;sat&#39;:4</span></span></code></pre></div><p>A position normally indicates the source word&#39;s location in the document. Positional information can be used for <em>proximity ranking</em>. Position values can range from 1 to 16383; larger numbers are silently set to 16383. Duplicate positions for the same lexeme are discarded.</p><p>Lexemes that have positions can further be labeled with a <em>weight</em>, which can be <code>A</code>, <code>B</code>, <code>C</code>, or <code>D</code>. <code>D</code> is the default and hence is not shown on output:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT &#39;a:1A fat:2B,4C cat:5D&#39;::tsvector;</span></span>
<span class="line"><span>          tsvector          </span></span>
<span class="line"><span>----------------------------</span></span>
<span class="line"><span> &#39;a&#39;:1A &#39;cat&#39;:5 &#39;fat&#39;:2B,4C</span></span></code></pre></div><p>Weights are typically used to reflect document structure, for example by marking title words differently from body words. Text search ranking functions can assign different priorities to the different weight markers.</p><p>It is important to understand that the <code>tsvector</code> type itself does not perform any normalization; it assumes the words it is given are normalized appropriately for the application. For example,</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select &#39;The Fat Rats&#39;::tsvector;</span></span>
<span class="line"><span>      tsvector      </span></span>
<span class="line"><span>--------------------</span></span>
<span class="line"><span> &#39;Fat&#39; &#39;Rats&#39; &#39;The&#39;</span></span></code></pre></div><p>For most English-text-searching applications the above words would be considered non-normalized, but tsvector doesn&#39;t care. Raw document text should usually be passed through <code>to_tsvector</code> to normalize the words appropriately for searching:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT to_tsvector(&#39;english&#39;, &#39;The Fat Rats&#39;);</span></span>
<span class="line"><span>   to_tsvector   </span></span>
<span class="line"><span>-----------------</span></span>
<span class="line"><span> &#39;fat&#39;:2 &#39;rat&#39;:3</span></span></code></pre></div><h2 id="tsquery" tabindex="-1"><a id="topic_w2h_p4c_qfb"></a>tsquery <a class="header-anchor" href="#tsquery" aria-label="Permalink to &quot;&lt;a id=&quot;topic_w2h_p4c_qfb&quot;&gt;&lt;/a&gt;tsquery&quot;">​</a></h2><p>A <code>tsquery</code> value stores lexemes that are to be searched for, and combines them honoring the Boolean operators <code>&amp;</code> (AND), <code>|</code> (OR), and <code>!</code> (NOT). Parentheses can be used to enforce grouping of the operators:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT &#39;fat &amp; rat&#39;::tsquery;</span></span>
<span class="line"><span>    tsquery    </span></span>
<span class="line"><span>---------------</span></span>
<span class="line"><span> &#39;fat&#39; &amp; &#39;rat&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SELECT &#39;fat &amp; (rat | cat)&#39;::tsquery;</span></span>
<span class="line"><span>          tsquery          </span></span>
<span class="line"><span>---------------------------</span></span>
<span class="line"><span> &#39;fat&#39; &amp; ( &#39;rat&#39; | &#39;cat&#39; )</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SELECT &#39;fat &amp; rat &amp; ! cat&#39;::tsquery;</span></span>
<span class="line"><span>        tsquery         </span></span>
<span class="line"><span>------------------------</span></span>
<span class="line"><span> &#39;fat&#39; &amp; &#39;rat&#39; &amp; !&#39;cat&#39;</span></span></code></pre></div><p>In the absence of parentheses, <code>!</code> (NOT) binds most tightly, and <code>&amp;</code> (AND) binds more tightly than <code>|</code> (OR).</p><p>Optionally, lexemes in a <code>tsquery</code> can be labeled with one or more weight letters, which restricts them to match only <code>tsvector</code> lexemes with matching weights:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT &#39;fat:ab &amp; cat&#39;::tsquery;</span></span>
<span class="line"><span>    tsquery</span></span>
<span class="line"><span>------------------</span></span>
<span class="line"><span> &#39;fat&#39;:AB &amp; &#39;cat&#39;</span></span></code></pre></div><p>Also, lexemes in a <code>tsquery</code> can be labeled with * to specify prefix matching:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT &#39;super:*&#39;::tsquery;</span></span>
<span class="line"><span>  tsquery  </span></span>
<span class="line"><span>-----------</span></span>
<span class="line"><span> &#39;super&#39;:*</span></span></code></pre></div><p>This query will match any word in a <code>tsvector</code> that begins with &quot;super&quot;. Note that prefixes are first processed by text search configurations, which means this comparison returns true:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT to_tsvector( &#39;postgraduate&#39; ) @@ to_tsquery( &#39;postgres:*&#39; );</span></span>
<span class="line"><span> ?column? </span></span>
<span class="line"><span>----------</span></span>
<span class="line"><span> t</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>because <code>postgres</code> gets stemmed to <code>postgr</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT to_tsquery(&#39;postgres:*&#39;);</span></span>
<span class="line"><span> to_tsquery </span></span>
<span class="line"><span>------------</span></span>
<span class="line"><span> &#39;postgr&#39;:*</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>which then matches <code>postgraduate</code>.</p><p>Quoting rules for lexemes are the same as described previously for lexemes in <code>tsvector</code>; and, as with <code>tsvector</code>, any required normalization of words must be done before converting to the <code>tsquery</code> type. The <code>to_tsquery</code> function is convenient for performing such normalization:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT to_tsquery(&#39;Fat:ab &amp; Cats&#39;);</span></span>
<span class="line"><span>    to_tsquery    </span></span>
<span class="line"><span>------------------</span></span>
<span class="line"><span> &#39;fat&#39;:AB &amp; &#39;cat&#39;</span></span></code></pre></div>`,36)]))}const m=s(p,[["render",o]]);export{u as __pageData,m as default};
