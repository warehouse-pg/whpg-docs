import{_ as r,c as t,o,ag as a}from"./chunks/framework.Ds6Eueu6.js";const h=JSON.parse('{"title":"SQL: Querying Data","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/query/topics/query.md","filePath":"docs/7x/admin_guide/query/topics/query.md"}'),i={name:"docs/7x/admin_guide/query/topics/query.md"};function s(n,e,u,l,d,c){return o(),t("div",null,e[0]||(e[0]=[a('<h1 id="sql-querying-data" tabindex="-1">SQL: Querying Data <a class="header-anchor" href="#sql-querying-data" aria-label="Permalink to &quot;SQL: Querying Data&quot;">â€‹</a></h1><hr><p>This topic provides information about using SQL in WarehousePGs.</p><p>You enter SQL statements called queries to view, change, and analyze data in a database using the <code>psql</code> interactive SQL client and other client tools.</p><ul><li><strong><a href="./../../query/topics/parallel-proc.html">About WarehousePG Query Processing</a></strong><br> This topic provides an overview of how WarehousePG processes queries. Understanding this process can be useful when writing and tuning queries.</li><li><strong><a href="./../../query/topics/query-piv-optimizer.html">About GPORCA</a></strong><br> In WarehousePG, the default GPORCA optimizer co-exists with the Postgres-based planner.</li><li><strong><a href="./../../query/topics/defining-queries.html">Defining Queries</a></strong><br> WarehousePG is based on the PostgreSQL implementation of the SQL standard.</li><li><strong><a href="./../../query/topics/CTE-query.html">WITH Queries (Common Table Expressions)</a></strong><br> The <code>WITH</code> clause provides a way to use subqueries or perform a data modifying operation in a larger <code>SELECT</code> query. You can also use the <code>WITH</code> clause in an <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> command.</li><li><strong><a href="./../../query/topics/functions-operators.html">Using Functions and Operators</a></strong><br> Description of user-defined and built-in functions and operators in WarehousePG.</li><li><strong><a href="./../../query/topics/json-data.html">Working with JSON Data</a></strong><br> WarehousePG supports the <code>json</code> and <code>jsonb</code> data types that store JSON (JavaScript Object Notation) data.</li><li><strong><a href="./../../query/topics/xml-data.html">Working with XML Data</a></strong><br> WarehousePG supports the <code>xml</code> data type that stores XML data.</li><li><strong><a href="./../../textsearch/full-text-search.html">Using Full Text Search</a></strong><br> WarehousePG provides data types, functions, operators, index types, and configurations for querying natural language documents.</li><li><strong><a href="./../../query/topics/query-performance.html">Query Performance</a></strong><br> WarehousePG dynamically eliminates irrelevant partitions in a table and optimally allocates memory for different operators in a query.</li><li><strong><a href="./../../query/topics/spill-files.html">Managing Spill Files Generated by Queries</a></strong><br> WarehousePG creates spill files, also known as workfiles, on disk if it does not have sufficient memory to run an SQL query in memory.</li><li><strong><a href="./../../query/topics/query-profiling.html">Query Profiling</a></strong><br> Examine the query plans of poorly performing queries to identify possible performance tuning opportunities.</li><li><strong><a href="./../../query/topics/just-in-time.html">Just-in-Time Compilation (JIT)</a></strong> WarehousePG supports Just-in-Time compilation for long-running CPU-bound queries.</li></ul><p><strong>Parent topic:</strong> <a href="./../../admin_guide.html">WarehousePG Administrator Guide</a></p>',6)]))}const g=r(i,[["render",s]]);export{h as __pageData,g as default};
