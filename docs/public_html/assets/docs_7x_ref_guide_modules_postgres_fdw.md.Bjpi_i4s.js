import{_ as t,c as o,o as s,ag as a}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"postgres_fdw","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/modules/postgres_fdw.md","filePath":"docs/7x/ref_guide/modules/postgres_fdw.md"}'),i={name:"docs/7x/ref_guide/modules/postgres_fdw.md"};function r(d,e,n,l,p,c){return s(),o("div",null,e[0]||(e[0]=[a(`<h1 id="postgres-fdw" tabindex="-1">postgres_fdw <a class="header-anchor" href="#postgres-fdw" aria-label="Permalink to &quot;postgres\\_fdw&quot;">​</a></h1><p>The <code>postgres_fdw</code> module is a foreign-data wrapper (FDW) that you can use to access data stored in a remote PostgreSQL or WarehousePG.</p><p>The WarehousePG <code>postgres_fdw</code> module is a modified version of the PostgreSQL <code>postgres_fdw</code> module. The module behaves as described in the PostgreSQL <a href="https://www.postgresql.org/docs/12/postgres-fdw.html" target="_blank" rel="noreferrer">postgres_fdw</a> documentation when you use it to access a single remote PostgreSQL database. The WarehousePG <code>postgres_fdw</code> module also includes enhancements that allow you to access multiple remote PostgreSQL servers from a single foreign table.</p><blockquote><p><strong>Note</strong> There are some restrictions and limitations when you use this foreign-data wrapper module, described below.</p></blockquote><h2 id="installing-and-registering-the-module" tabindex="-1"><a id="topic_reg"></a>Installing and Registering the Module <a class="header-anchor" href="#installing-and-registering-the-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_reg&quot;&gt;&lt;/a&gt;Installing and Registering the Module&quot;">​</a></h2><p>The <code>postgres_fdw</code> module is installed when you install WarehousePG. Before you can use the foreign-data wrapper, you must register the <code>postgres_fdw</code> extension in each database in which you want to use the foreign-data wrapper. Refer to <a href="./../../install_guide/install_extensions.html">Installing Extensions</a> for more information.</p><h2 id="using-postgres-fdw-to-access-multiple-remote-postgresql-servers" tabindex="-1"><a id="using_mrs"></a>Using postgres_fdw to Access Multiple Remote PostgreSQL Servers <a class="header-anchor" href="#using-postgres-fdw-to-access-multiple-remote-postgresql-servers" aria-label="Permalink to &quot;&lt;a id=&quot;using_mrs&quot;&gt;&lt;/a&gt;Using postgres_fdw to Access Multiple Remote PostgreSQL Servers&quot;">​</a></h2><p>Before you <a href="./../sql_commands/CREATE_FOREIGN_TABLE.html">create a foreign table</a> using the <code>postgres_fdw</code> foreign-data wrapper, you must configure a server with the <a href="./../sql_commands/CREATE_SERVER.html">CREATE SERVER</a> command. You can use a <code>postgres_fdw</code> foreign table to access data that is distributed across multiple remote PostgreSQL servers when you set certain WarehousePG and <code>postgres_fdw</code>-specific options on the <code>CREATE SERVER</code> command:</p><table tabindex="0"><thead><tr><th>Option Name</th><th>Description</th><th>Value</th></tr></thead><tbody><tr><td>mpp_execute</td><td>WarehousePG option that identifies the host(s) from which <code>postgres_fdw</code> reads or writes data.</td><td>Set to <code>&#39;all segments&#39;</code>, which, when specified for <code>postgres_fdw</code>, translates to all remote PostgreSQL servers specified in <code>multi_hosts</code>.</td></tr><tr><td>num_segments<sup>1</sup></td><td>WarehousePG option that identifies the number of query executors that WarehousePG spawns on the source WarehousePG cluster.</td><td>Set to the number of remote PostgreSQL servers. If this option is not set, defaults to the number of segments in the local WarehousePG cluster.</td></tr><tr><td>multi_hosts</td><td>Space-separated list of remote PostgreSQL server host names.</td><td>You must specify exactly <code>num_segments</code> number of hosts in the list.</td></tr><tr><td>multi_ports</td><td>Space-separated list of port numbers for the PostgreSQL servers.</td><td>You must specify exactly one port number for each host specified in <code>multi_hosts</code>, in order.</td></tr></tbody></table><p><sup>1</sup> The WarehousePG query optimizer (GPORCA) can plan and optimize queries only when <code>num_segments</code> is equal to the number of segments in the local WarehousePG cluster. When <code>num_segments</code> is any other value, a query always falls back to the Postgres-based planner.</p><p>Setting these options instructs <code>postgres_fdw</code> to treat a foreign table that you create that specifes this <code>SERVER</code> as a <em>distributed</em> foreign table. That is, a foreign table whose underlying data is stored on multiple remote PostgreSQL servers. <code>postgres_fdw</code> directs a query on such a foreign table to each PostgreSQL server specified in <code>multi_hosts</code>.</p><p>An example <code>CREATE SERVER</code> command that configures access to PostgreSQL servers running on <code>pghost1</code> and <code>pghost2</code> follows:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SERVER</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> dist_pgserver</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">  FOREIGN </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DATA</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> WRAPPER postgres_fdw</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">OPTIONS (multi_hosts </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;pghost1 pghost2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, multi_ports </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;5432 5555&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, num_segments </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;2&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, mpp_execute </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;all segments&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h2 id="about-aggregate-pushdown-support" tabindex="-1"><a id="agg_pushdown"></a>About Aggregate Pushdown Support <a class="header-anchor" href="#about-aggregate-pushdown-support" aria-label="Permalink to &quot;&lt;a id=&quot;agg_pushdown&quot;&gt;&lt;/a&gt;About Aggregate Pushdown Support&quot;">​</a></h2><p><code>postgres_fdw</code> supports partial aggregate pushdown for a <em>distributed</em> query under the following conditions:</p><ul><li>The aggregate contains no <code>DISTINCT</code> or <code>ORDER BY</code> clauses.</li><li>The aggregate does not contain <code>HAVING</code> clause.</li><li>The aggregate function is not <code>array_agg()</code>.</li><li>The query contains no <code>LIMIT</code> or <code>JOIN</code> clauses.</li></ul><blockquote><p><strong>Note</strong> <code>postgres_fdw</code> does not support partial aggregate pushdown when the WarehousePG query optimizer (GPORCA) is enabled for a query.</p></blockquote><h2 id="about-limit-pushdown-support" tabindex="-1"><a id="limit_pushdown"></a>About Limit Pushdown Support <a class="header-anchor" href="#about-limit-pushdown-support" aria-label="Permalink to &quot;&lt;a id=&quot;limit_pushdown&quot;&gt;&lt;/a&gt;About Limit Pushdown Support&quot;">​</a></h2><p><code>postgres_fdw</code> supports limit pushdown for a <em>distributed</em> query under the following conditions:</p><ul><li>The query contains no <code>OFFSET</code> clause.</li><li>The query contains no aggregates.</li></ul><h2 id="distributed-postgres-fdw-limitations" tabindex="-1"><a id="topic_gp_limit"></a>Distributed postgres_fdw Limitations <a class="header-anchor" href="#distributed-postgres-fdw-limitations" aria-label="Permalink to &quot;&lt;a id=&quot;topic_gp_limit&quot;&gt;&lt;/a&gt;Distributed postgres_fdw Limitations&quot;">​</a></h2><p>When you use the foreign-data wrapper to access multiple remote PostgreSQL servers, WarehousePG <code>postgres_fdw</code> has the following limitations:</p><ul><li>You must set the <code>gp_enable_minmax_optimization</code> server configuration parameter to <code>off</code> to enable partial aggregate pushdown.</li><li><code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> operations on distributed foreign tables are not supported.</li><li><code>IMPORT FOREIGN SCHEMA</code> is not supported.</li></ul><h2 id="warehousepg-limitations" tabindex="-1"><a id="topic_gp_limit"></a>WarehousePG Limitations <a class="header-anchor" href="#warehousepg-limitations" aria-label="Permalink to &quot;&lt;a id=&quot;topic_gp_limit&quot;&gt;&lt;/a&gt;WarehousePG Limitations&quot;">​</a></h2><p>When you use the foreign-data wrapper to access WarehousePG, <code>postgres_fdw</code> has the following limitations:</p><ul><li><p>The <code>ctid</code> is not guaranteed to uniquely identify the physical location of a row within its table. For example, the following statements may return incorrect results when the foreign table references a WarehousePG table:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO rem1(f2) VALUES (&#39;test&#39;) RETURNING ctid;</span></span>
<span class="line"><span>SELECT * FROM ft1, t1 WHERE t1.ctid = &#39;(0,2)&#39;;</span></span></code></pre></div></li><li><p><code>postgres_fdw</code> does not support local or remote triggers when you use it to access a foreign table that references a WarehousePG table.</p></li><li><p><code>UPDATE</code> or <code>DELETE</code> operations on a foreign table that references a WarehousePG table are not guaranteed to work correctly.</p></li></ul><h2 id="additional-module-documentation" tabindex="-1"><a id="topic_info"></a>Additional Module Documentation <a class="header-anchor" href="#additional-module-documentation" aria-label="Permalink to &quot;&lt;a id=&quot;topic_info&quot;&gt;&lt;/a&gt;Additional Module Documentation&quot;">​</a></h2><p>For more information about using foreign tables in WarehousePG, see <a href="./../../admin_guide/external/foreign.html">Accessing External Data with Foreign Tables</a>.</p><p>For detailed information about this module, refer to the <a href="https://www.postgresql.org/docs/12/postgres-fdw.html" target="_blank" rel="noreferrer">postgres_fdw</a> PostgreSQL documentation.</p><p>The <code>postgres_fdw</code> foreign-data wrapper is included in the WarehousePG open source github repository. You can view the <a href="https://github.com/greenplum-db/gpdb/tree/main/contrib/postgres_fdw" target="_blank" rel="noreferrer">source code</a> for the module which is located in the <code>contrib/</code> directory.</p>`,30)]))}const g=t(i,[["render",r]]);export{u as __pageData,g as default};
