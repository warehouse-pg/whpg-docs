import{_ as a,c as t,o as s,ag as n}from"./chunks/framework.Ds6Eueu6.js";const h=JSON.parse('{"title":"pageinspect","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/modules/pageinspect.md","filePath":"docs/7x/ref_guide/modules/pageinspect.md"}'),o={name:"docs/7x/ref_guide/modules/pageinspect.md"};function i(p,e,d,l,r,c){return s(),t("div",null,e[0]||(e[0]=[n(`<h1 id="pageinspect" tabindex="-1">pageinspect <a class="header-anchor" href="#pageinspect" aria-label="Permalink to &quot;pageinspect&quot;">​</a></h1><p>The <code>pageinspect</code> module provides functions for low level inspection of the contents of database pages. <code>pageinspect</code> is available only to WarehousePG superusers.</p><p>The WarehousePG <code>pageinspect</code> module is based on the PostgreSQL <code>pageinspect</code> module. The WarehousePG version of the module differs as described in the <a href="#topic_gp">WarehousePG Considerations</a> topic.</p><h2 id="installing-and-registering-the-module" tabindex="-1"><a id="topic_reg"></a>Installing and Registering the Module <a class="header-anchor" href="#installing-and-registering-the-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_reg&quot;&gt;&lt;/a&gt;Installing and Registering the Module&quot;">​</a></h2><p>The <code>pageinspect</code> module is installed when you install WarehousePG. Before you can use any of the functions defined in the module, you must register the <code>pageinspect</code> extension in each database in which you want to use the functions:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE EXTENSION pageinspect;</span></span></code></pre></div><p>Refer to <a href="./../../install_guide/install_extensions.html">Installing Extensions</a> for more information.</p><h2 id="upgrading-the-module" tabindex="-1"><a id="topic_upgrade"></a>Upgrading the Module <a class="header-anchor" href="#upgrading-the-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_upgrade&quot;&gt;&lt;/a&gt;Upgrading the Module&quot;">​</a></h2><p>If you are currently using <code>pageinspect</code> in your WarehousePG installation and you want to access newly-released module functionality, you must update the <code>pageinspect</code> extension in every database in which it is currently registered:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER EXTENSION pageinspect UPDATE;</span></span></code></pre></div><h2 id="module-documentation" tabindex="-1"><a id="topic_info"></a>Module Documentation <a class="header-anchor" href="#module-documentation" aria-label="Permalink to &quot;&lt;a id=&quot;topic_info&quot;&gt;&lt;/a&gt;Module Documentation&quot;">​</a></h2><p>See <a href="https://www.postgresql.org/docs/12/pageinspect.html" target="_blank" rel="noreferrer">pageinspect</a> in the PostgreSQL documentation for detailed information about the majority of functions in this module.</p><p>The next topic includes documentation for WarehousePG-added <code>pageinspect</code> functions.</p><h2 id="warehousepg-considerations" tabindex="-1"><a id="topic_gp"></a>WarehousePG Considerations <a class="header-anchor" href="#warehousepg-considerations" aria-label="Permalink to &quot;&lt;a id=&quot;topic_gp&quot;&gt;&lt;/a&gt;WarehousePG Considerations&quot;">​</a></h2><p>When using this module with WarehousePG, consider the following:</p><ul><li>The WarehousePG version of the <code>pageinspect</code> does not allow inspection of pages belonging to append-optimized or external relations.</li><li>For <code>pageinspect</code> functions that read data from a database, the function reads data only from the segment instance where the function is run. For example, the <code>get_raw_page()</code> function returns a <code>block number out of range</code> error when you try to read data from a user-defined table on the WarehousePG coordinator because there is no data in the table on the coordinator segment. The function will read data from a system catalog table on the coordinator segment.</li></ul><h3 id="warehousepg-added-functions" tabindex="-1"><a id="gp_funcs"></a>WarehousePG-Added Functions <a class="header-anchor" href="#warehousepg-added-functions" aria-label="Permalink to &quot;&lt;a id=&quot;gp_funcs&quot;&gt;&lt;/a&gt;WarehousePG-Added Functions&quot;">​</a></h3><p>In addition to the functions specified in the PostgreSQL documentation, WarehousePG provides these additional <code>pageinspect</code> functions for inspecting bitmap index pages:</p><table tabindex="0"><thead><tr><th>Function Name</th><th>Description</th></tr></thead><tbody><tr><td>bm_metap(relname text) returns record</td><td>Returns information about a bitmap index&#39;s meta page.</td></tr><tr><td>bm_bitmap_page_header(relname text, blkno int) returns record</td><td>Returns the header information for a bitmap page; this corresponds to the opaque section from the page header.</td></tr><tr><td>bm_lov_page_items(relname text, blkno int) returns setof record</td><td>Returns the list of value (LOV) items present in a bitmap LOV page.</td></tr><tr><td>bm_bitmap_page_items(relname text, blkno int) returns setof record</td><td>Returns the content words and their compression statuses for a bitmap page.</td></tr><tr><td>bm_bitmap_page_items(page bytea) returns setof record</td><td>Returns the content words and their compression statuses for a page image obtained by <code>get_raw_page()</code>.</td></tr></tbody></table><h3 id="examples" tabindex="-1"><a id="topic_examples"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;topic_examples&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h3><p>WarehousePG-added <code>pageinspect</code> function usage examples follow.</p><p>Obtain information about the meta page of the bitmap index named <code>i1</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=# SELECT * FROM bm_metap(&#39;i1&#39;);</span></span>
<span class="line"><span>   magic    | version | auxrelid | auxindexrelid | lovlastblknum</span></span>
<span class="line"><span>------------+---------+----------+---------------+---------------</span></span>
<span class="line"><span> 1112101965 |       2 |   169980 |        169982 |             1</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>Display the header information for the second block of the bitmap index named <code>i1</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=# SELECT * FROM bm_bitmap_page_header(&#39;i1&#39;, 2);</span></span>
<span class="line"><span> num_words | next_blkno | last_tid </span></span>
<span class="line"><span>-----------+------------+----------</span></span>
<span class="line"><span> 3         | 4294967295 | 65536    </span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>Display the LOV items located in the first block of the bitmap index named <code>i1</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=# SELECT * FROM bm_lov_page_items(&#39;i1&#39;, 1) ORDER BY itemoffset;</span></span>
<span class="line"><span> itemoffset | lov_head_blkno | lov_tail_blkno | last_complete_word      | last_word               | last_tid | last_setbit_tid | is_last_complete_word_fill | is_last_word_fill </span></span>
<span class="line"><span>------------+----------------+----------------+-------------------------+-------------------------+----------+-----------------+----------------------------+-------------------</span></span>
<span class="line"><span> 1          | 4294967295     | 4294967295     | ff ff ff ff ff ff ff ff | 00 00 00 00 00 00 00 00 | 0        | 0               | f                          | f                 </span></span>
<span class="line"><span> 2          | 2              | 2              | 80 00 00 00 00 00 00 01 | 00 00 00 00 07 ff ff ff | 65600    | 65627           | t                          | f                 </span></span>
<span class="line"><span> 3          | 3              | 3              | 80 00 00 00 00 00 00 02 | 00 3f ff ff ff ff ff ff | 131200   | 131254          | t                          | f                 </span></span>
<span class="line"><span>(3 rows)</span></span></code></pre></div><p>Return the content words located in the second block of the bitmap index named <code>i1</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=# SELECT * FROM bm_bitmap_page_items(&#39;i1&#39;, 2) ORDER BY word_num;</span></span>
<span class="line"><span> word_num | compressed | content_word            </span></span>
<span class="line"><span>----------+------------+-------------------------</span></span>
<span class="line"><span> 0        | t          | 80 00 00 00 00 00 00 0e </span></span>
<span class="line"><span> 1        | f          | 00 00 00 00 00 00 1f ff </span></span>
<span class="line"><span> 2        | t          | 00 00 00 00 00 00 03 f1 </span></span>
<span class="line"><span>(3 rows)</span></span></code></pre></div><p>Alternatively, return the content words located in the heap page image of the same bitmap index and block:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=# SELECT * FROM bm_bitmap_page_items(get_raw_page(&#39;i1&#39;, 2)) ORDER BY word_num;</span></span>
<span class="line"><span> word_num | compressed | content_word            </span></span>
<span class="line"><span>----------+------------+-------------------------</span></span>
<span class="line"><span> 0        | t          | 80 00 00 00 00 00 00 0e </span></span>
<span class="line"><span> 1        | f          | 00 00 00 00 00 00 1f ff </span></span>
<span class="line"><span> 2        | t          | 00 00 00 00 00 00 03 f1 </span></span>
<span class="line"><span>(3 rows)</span></span></code></pre></div>`,31)]))}const g=a(o,[["render",i]]);export{h as __pageData,g as default};
