import{_ as a,c as t,o as s,ag as i}from"./chunks/framework.Ds6Eueu6.js";const m=JSON.parse('{"title":"IMPORT FOREIGN SCHEMA","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/sql_commands/IMPORT_FOREIGN_SCHEMA.md","filePath":"docs/7x/ref_guide/sql_commands/IMPORT_FOREIGN_SCHEMA.md"}'),o={name:"docs/7x/ref_guide/sql_commands/IMPORT_FOREIGN_SCHEMA.md"};function n(r,e,l,c,p,d){return s(),t("div",null,e[0]||(e[0]=[i(`<h1 id="import-foreign-schema" tabindex="-1">IMPORT FOREIGN SCHEMA <a class="header-anchor" href="#import-foreign-schema" aria-label="Permalink to &quot;IMPORT FOREIGN SCHEMA&quot;">​</a></h1><p>Imports table definitions from a foreign server.</p><h2 id="synopsis" tabindex="-1"><a id="section2"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;section2&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>IMPORT FOREIGN SCHEMA &lt;remote_schema&gt;</span></span>
<span class="line"><span>    [ { LIMIT TO | EXCEPT } ( &lt;table_name&gt; [, ...] ) ]</span></span>
<span class="line"><span>    FROM SERVER &lt;server_name&gt;</span></span>
<span class="line"><span>    INTO &lt;local_schema&gt;</span></span>
<span class="line"><span>    [ OPTIONS ( &lt;option&gt; &#39;&lt;value&gt;&#39; [, ... ] ) ]</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="section3"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;section3&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p><code>IMPORT FOREIGN SCHEMA</code> creates foreign tables that represent tables existing on a foreign server. The new foreign tables will be owned by the user issuing the command and are created with the correct column definitions and options to match the remote tables.</p><p>By default, all tables and views existing in a particular schema on the foreign server are imported. Optionally, the list of tables can be limited to a specified subset, or specific tables can be excluded. The new foreign tables are all created in the target schema, which must already exist.</p><p>To use <code>IMPORT FOREIGN SCHEMA</code>, the user must have <code>USAGE</code> privilege on the foreign server, as well as <code>CREATE</code> privilege on the target schema.</p><p>Support for importing foreign schemas is foreign-data wrapper-specific.</p><h2 id="parameters" tabindex="-1"><a id="section4"></a>Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;&lt;a id=&quot;section4&quot;&gt;&lt;/a&gt;Parameters&quot;">​</a></h2><p>remote_schema : The remote schema to import from. The specific meaning of a remote schema depends on the foreign data wrapper in use.</p><p>LIMIT TO ( table_name [, ...] ) : Import only foreign tables matching one of the given table names. Other tables existing in the foreign schema will be ignored.</p><p>EXCEPT ( table_name [, ...] ) : Exclude specified foreign tables from the import. All tables existing in the foreign schema will be imported except the ones listed here.</p><p>server_name : The name of the foreign server from which to import the table definitions.</p><p>local_schema : The schema in which WarehousePG will create the imported foreign tables.</p><p>OPTIONS ( option &#39;value&#39; [, ... ] ) : The options to be used during the import. The allowed option names and values are specific to each foreign-data wrapper.</p><h2 id="examples" tabindex="-1"><a id="section6"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;section6&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>Import table definitions from a remote schema <code>foreign_films</code> on server <code>film_server</code>, creating the foreign tables in local schema <code>films</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>IMPORT FOREIGN SCHEMA foreign_films</span></span>
<span class="line"><span>    FROM SERVER film_server INTO films;</span></span></code></pre></div><p>As above, but import only the two tables <code>actors</code> and <code>directors</code> (if they exist):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>IMPORT FOREIGN SCHEMA foreign_films LIMIT TO (actors, directors)</span></span>
<span class="line"><span>    FROM SERVER film_server INTO films;</span></span></code></pre></div><h2 id="compatibility" tabindex="-1"><a id="section7"></a>Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;&lt;a id=&quot;section7&quot;&gt;&lt;/a&gt;Compatibility&quot;">​</a></h2><p>The <code>IMPORT FOREIGN SCHEMA</code> command conforms to the SQL standard, except that the <code>OPTIONS</code> clause is a WarehousePG extension.</p><h2 id="see-also" tabindex="-1"><a id="section8"></a>See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;&lt;a id=&quot;section8&quot;&gt;&lt;/a&gt;See Also&quot;">​</a></h2><p><a href="./CREATE_FOREIGN_TABLE.html">CREATE FOREIGN TABLE</a>, <a href="./CREATE_SERVER.html">CREATE SERVER</a></p><p><strong>Parent topic:</strong> <a href="./../sql_commands/sql_ref.html">SQL Commands</a></p>`,26)]))}const g=a(o,[["render",n]]);export{m as __pageData,g as default};
