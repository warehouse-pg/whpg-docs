import{_ as t,c as o,o as a,ag as r}from"./chunks/framework.Ds6Eueu6.js";const p=JSON.parse('{"title":"pg_largeobject","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/system_catalogs/pg_largeobject.md","filePath":"docs/7x/ref_guide/system_catalogs/pg_largeobject.md"}'),s={name:"docs/7x/ref_guide/system_catalogs/pg_largeobject.md"};function d(c,e,n,g,i,l){return a(),o("div",null,e[0]||(e[0]=[r('<h1 id="pg-largeobject" tabindex="-1">pg_largeobject <a class="header-anchor" href="#pg-largeobject" aria-label="Permalink to &quot;pg_largeobject&quot;">â€‹</a></h1><blockquote><p><strong>Note</strong> WarehousePG does not support the PostgreSQL <a href="https://www.postgresql.org/docs/12/largeobjects.html" target="_blank" rel="noreferrer">large object facility</a> for streaming user data that is stored in large-object structures.</p></blockquote><p>The <code>pg_largeobject</code> system catalog table holds the data making up &#39;large objects&#39;. A large object is identified by an OID assigned when it is created. Each large object is broken into segments or &#39;pages&#39; small enough to be conveniently stored as rows in <code>pg_largeobject</code>. The amount of data per page is defined to be <code>LOBLKSIZE</code> (which is currently <code>BLCKSZ</code>/4, or typically 8K).</p><p>Each row of <code>pg_largeobject</code> holds data for one page of a large object, beginning at byte offset (<em>pageno</em><code>* LOBLKSIZE</code>) within the object. The implementation allows sparse storage: pages may be missing, and may be shorter than <code>LOBLKSIZE</code> bytes even if they are not the last page of the object. Missing regions within a large object read as zeroes.</p><table tabindex="0"><thead><tr><th>column</th><th>type</th><th>references</th><th>description</th></tr></thead><tbody><tr><td><code>loid</code></td><td>oid</td><td></td><td>Identifier of the large object that includes this page</td></tr><tr><td><code>pageno</code></td><td>integer</td><td></td><td>Page number of this page within its large object (counting from zero)</td></tr><tr><td><code>data</code></td><td>bytea</td><td></td><td>Actual data stored in the large object. This will never be more than <code>LOBLKSIZE</code> bytes and may be less.</td></tr></tbody></table><p><strong>Parent topic:</strong> <a href="./../system_catalogs/catalog_ref-html.html">System Catalogs Definitions</a></p>',6)]))}const b=t(s,[["render",d]]);export{p as __pageData,b as default};
