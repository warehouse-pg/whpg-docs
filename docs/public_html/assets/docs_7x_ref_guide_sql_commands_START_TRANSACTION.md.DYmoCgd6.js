import{_ as e,c as t,o as s,ag as o}from"./chunks/framework.Ds6Eueu6.js";const h=JSON.parse('{"title":"START TRANSACTION","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/sql_commands/START_TRANSACTION.md","filePath":"docs/7x/ref_guide/sql_commands/START_TRANSACTION.md"}'),n={name:"docs/7x/ref_guide/sql_commands/START_TRANSACTION.md"};function i(r,a,c,l,d,T){return s(),t("div",null,a[0]||(a[0]=[o(`<h1 id="start-transaction" tabindex="-1">START TRANSACTION <a class="header-anchor" href="#start-transaction" aria-label="Permalink to &quot;START TRANSACTION&quot;">​</a></h1><p>Starts a transaction block.</p><h2 id="synopsis" tabindex="-1"><a id="section2"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;section2&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>START TRANSACTION [&lt;transaction_mode&gt;] [, ...]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>where &lt;transaction_mode&gt; is one of:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   ISOLATION LEVEL {SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED}</span></span>
<span class="line"><span>   READ WRITE | READ ONLY</span></span>
<span class="line"><span>   [NOT] DEFERRABLE</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="section3"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;section3&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p><code>START TRANSACTION</code> begins a new transaction block. If the isolation level, read/write mode, or deferrable mode is specified, the new transaction has those characteristics, as if <a href="./SET_TRANSACTION.html">SET TRANSACTION</a> was run. This is the same as the <a href="./BEGIN.html">BEGIN</a> command.</p><h2 id="parameters" tabindex="-1"><a id="section4"></a>Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;&lt;a id=&quot;section4&quot;&gt;&lt;/a&gt;Parameters&quot;">​</a></h2><p>Refer to <a href="./SET_TRANSACTION.html">SET TRANSACTION</a> for information on the meaning of the parameters to this statement.</p><h2 id="compatibility" tabindex="-1"><a id="section6"></a>Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;&lt;a id=&quot;section6&quot;&gt;&lt;/a&gt;Compatibility&quot;">​</a></h2><p>In the standard, it is not necessary to issue <code>START TRANSACTION</code> to start a transaction block: any SQL command implicitly begins a block. WarehousePG&#39;s behavior can be seen as implicitly issuing a <code>COMMIT</code> after each command that does not follow <code>START TRANSACTION</code> (or <code>BEGIN</code>), and it is therefore often called &#39;autocommit&#39;. Other relational database systems may offer an autocommit feature as a convenience.</p><p>The <code>DEFERRABLE</code> transaction_mode is a WarehousePG language extension.</p><p>The SQL standard requires commas between successive transaction_modes, but for historical reasons WarehousePG allows the commas to be omitted.</p><p>See also the compatibility section of <a href="./SET_TRANSACTION.html">SET TRANSACTION</a>.</p><h2 id="see-also" tabindex="-1"><a id="section7"></a>See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;&lt;a id=&quot;section7&quot;&gt;&lt;/a&gt;See Also&quot;">​</a></h2><p><a href="./BEGIN.html">BEGIN</a>, <a href="./COMMIT.html">COMMIT</a>, <a href="./ROLLBACK.html">ROLLBACK</a>, <a href="./SAVEPOINT.html">SAVEPOINT</a>, <a href="./SET_TRANSACTION.html">SET TRANSACTION</a></p><p><strong>Parent topic:</strong> <a href="./../sql_commands/sql_ref.html">SQL Commands</a></p>`,16)]))}const m=e(n,[["render",i]]);export{h as __pageData,m as default};
