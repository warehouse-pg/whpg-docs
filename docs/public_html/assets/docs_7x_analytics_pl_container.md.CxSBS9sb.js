import{_ as a,c as t,o as n,ag as s}from"./chunks/framework.Ds6Eueu6.js";const o="/assets/pl_container_architecture.DrFb4rXC.png",g=JSON.parse('{"title":"PL/Container Language","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/analytics/pl_container.md","filePath":"docs/7x/analytics/pl_container.md"}'),i={name:"docs/7x/analytics/pl_container.md"};function l(r,e,p,c,d,h){return n(),t("div",null,e[0]||(e[0]=[s('<h1 id="pl-container-language" tabindex="-1">PL/Container Language <a class="header-anchor" href="#pl-container-language" aria-label="Permalink to &quot;PL/Container Language&quot;">​</a></h1><hr><p>PL/Container enables users to run WarehousePG procedural language functions inside a Docker container, to avoid security risks associated with running Python or R code on WarehousePG segment hosts. For Python, PL/Container also enables you to use the Compute Unified Device Architecture (CUDA) API with NVIDIA GPU hardware in your procedural language functions. This topic covers information about the architecture, installation, and setup of PL/Container:</p><ul><li><a href="#about_pl_container">About the PL/Container Language Extension</a></li><li><a href="#topic3">Install PL/Container</a></li><li><a href="#upgrade_plcontainer">Upgrade PL/Container</a></li><li><a href="#uninstall_plcontainer">Uninstall PL/Container</a></li><li><a href="#topic_kds_plk_rbb">Docker References</a></li></ul><p>For detailed information about using PL/Container, refer to:</p><ul><li><a href="./pl_container_using.html">PL/Container Resource Management</a></li><li><a href="./pl_container_using.html">PL/Container Functions</a></li></ul><p>The PL/Container language extension is available as an open source module. For information about the module, see the README file in the GitHub repository at <a href="https://github.com/greenplum-db/plcontainer" target="_blank" rel="noreferrer">https://github.com/greenplum-db/plcontainer</a>.</p><h2 id="about-the-pl-container-language-extension" tabindex="-1"><a id="about_pl_container"></a>About the PL/Container Language Extension <a class="header-anchor" href="#about-the-pl-container-language-extension" aria-label="Permalink to &quot;&lt;a id=&quot;about_pl_container&quot;&gt;&lt;/a&gt;About the PL/Container Language Extension&quot;">​</a></h2><p>The WarehousePG PL/Container language extension allows you to create and run PL/Python or PL/R user-defined functions (UDFs) securely, inside a Docker container. Docker provides the ability to package and run an application in a loosely isolated environment called a container. For information about Docker, see the <a href="https://www.docker.com" target="_blank" rel="noreferrer">Docker web site</a>.</p><p>Running UDFs inside the Docker container ensures that:</p><ul><li>The function execution process takes place in a separate environment and allows decoupling of the data processing. SQL operators such as &quot;scan,&quot; &quot;filter,&quot; and &quot;project&quot; are run at the query executor (QE) side, and advanced data analysis is run at the container side.</li><li>User code cannot access the OS or the file system of the local host.</li><li>User code cannot introduce any security risks.</li><li>Functions cannot connect back to the WarehousePG if the container is started with limited or no network access.</li></ul><h3 id="pl-container-architecture" tabindex="-1"><a id="plcontainer_arch"></a>PL/Container Architecture <a class="header-anchor" href="#pl-container-architecture" aria-label="Permalink to &quot;&lt;a id=&quot;plcontainer_arch&quot;&gt;&lt;/a&gt;PL/Container Architecture&quot;">​</a></h3><p><img src="'+o+`" alt="PL/Container architecture"></p><p><strong>Example of the process flow</strong>:</p><p>Consider a query that selects table data using all available segments, and transforms the data using a PL/Container function. On the first call to a function in a segment container, the query executor on the coordinator host starts the container on that segment host. It then contacts the running container to obtain the results. The container might respond with a Service Provider Interface (SPI) - a SQL query run by the container to get some data back from the database - returning the result to the query executor.</p><p>A container running in standby mode waits on the socket and does not consume any CPU resources. PL/Container memory consumption depends on the amount of data cached in global dictionaries.</p><p>The container connection is closed by closing the WarehousePG session that started the container, and the container shuts down.</p><h2 id="install-pl-container" tabindex="-1"><a id="topic3"></a>Install PL/Container <a class="header-anchor" href="#install-pl-container" aria-label="Permalink to &quot;&lt;a id=&quot;topic3&quot;&gt;&lt;/a&gt;Install PL/Container&quot;">​</a></h2><p>This topic includes how to:</p><ul><li><a href="#install_docker">Install Docker</a></li><li><a href="#install_pl_utility">Install PL/Container</a></li><li><a href="#install_docker_images">Install the PL/Container Docker images</a></li><li><a href="#test_installation">Test the PL/Container installation</a></li></ul><p>The following sections describe these tasks in detail.</p><h3 id="prerequisites" tabindex="-1"><a id="requirements"></a>Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;&lt;a id=&quot;requirements&quot;&gt;&lt;/a&gt;Prerequisites&quot;">​</a></h3><ul><li><p>For PL/Container 2.1.x use WarehousePG 6 on CentOS 7.x (or later), RHEL 7.x (or later), or Ubuntu 18.04.</p><blockquote><p><strong>Note</strong> PL/Container 2.1.x supports Docker images with Python 3 installed.</p></blockquote></li><li><p>The minimum Linux OS kernel version supported is 3.10. To verify your kernel release use:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ uname -r</span></span></code></pre></div></li><li><p>The minimum supported Docker versions on all hosts is Docker 19.03.</p></li></ul><h3 id="install-docker" tabindex="-1"><a id="install_docker"></a>Install Docker <a class="header-anchor" href="#install-docker" aria-label="Permalink to &quot;&lt;a id=&quot;install_docker&quot;&gt;&lt;/a&gt;Install Docker&quot;">​</a></h3><p>To use PL/Container you need to install Docker on all WarehousePG host systems. These instructions show how to set up the Docker service on CentOS 7 but RHEL 7 is a similar process.</p><p>These steps install the docker package and start the Docker service as a user with sudo privileges.</p><ol><li><p>Ensure the user has sudo privileges or is root.</p></li><li><p>Install the dependencies required for Docker:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo yum install -y yum-utils device-mapper-persistent-data lvm2</span></span></code></pre></div></li><li><p>Add the Docker repo:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo</span></span></code></pre></div></li><li><p>Update yum cache:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo yum makecache fast</span></span></code></pre></div></li><li><p>Install Docker:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo yum -y install docker-ce</span></span></code></pre></div></li><li><p>Start Docker daemon:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo systemctl start docker</span></span></code></pre></div></li><li><p>On each WarehousePG host, the <code>gpadmin</code> user should be part of the docker group for the user to be able to manage Docker images and containers. Assign the WarehousePG administrator <code>gpadmin</code> to the group <code>docker</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo usermod -aG docker gpadmin</span></span></code></pre></div></li><li><p>Exit the session and login again to update the privileges.</p></li><li><p>Configure Docker to start when the host system starts:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo systemctl enable docker.service</span></span></code></pre></div><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sudo systemctl start docker.service</span></span></code></pre></div></li><li><p>Run a Docker command to test the Docker installation. This command lists the currently running Docker containers.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>docker ps</span></span></code></pre></div></li><li><p>After you install Docker on all WarehousePG hosts, restart the WarehousePG cluster to give WarehousePG access to Docker.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpstop -ra</span></span></code></pre></div></li></ol><p>For a list of observations while using Docker and PL/Container, see the <a href="#plc_notes">Notes</a> section. For a list of Docker reference documentation, see <a href="#topic_kds_plk_rbb">Docker References</a>.</p><h3 id="install-pl-container-1" tabindex="-1"><a id="install_pl_utility"></a>Install PL/Container <a class="header-anchor" href="#install-pl-container-1" aria-label="Permalink to &quot;&lt;a id=&quot;install_pl_utility&quot;&gt;&lt;/a&gt;Install PL/Container&quot;">​</a></h3><p>Install the PL/Container language extension using the <code>gppkg</code> utility.</p><ol><li><p>Download the PL/Container package that applies to your WarehousePG version.</p></li><li><p>As <code>gpadmin</code>, copy the PL/Container language extension package to the coordinator host.</p></li><li><p>Follow the instructions in <a href="./../install_guide/verify_sw.html">Verifying the WarehousePG Software Download</a> to verify the integrity of the <strong>WarehousePG Procedural Languages PL/Container</strong> software.</p></li><li><p>Run the package installation command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gppkg install plcontainer-2.1.1-rhel8-x86_64.gppkg</span></span></code></pre></div></li><li><p>Source the file <code>$GPHOME/greenplum_path.sh</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>source $GPHOME/greenplum_path.sh</span></span></code></pre></div></li><li><p>Make sure WarehousePG is up and running:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpstate -s</span></span></code></pre></div><p>If it&#39;s not, start it:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpstart -a</span></span></code></pre></div></li><li><p>Restart WarehousePG:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpstop -ra</span></span></code></pre></div></li><li><p>Login into one of the available databases, for example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>psql postgres</span></span></code></pre></div></li><li><p>Register the PL/Container extension, which installs the <code>plcontainer</code> utility:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE EXTENSION plcontainer;</span></span></code></pre></div><p>You&#39;ll need to register the utility separately on each database that might need the PL/Container functionality.</p></li></ol><h3 id="install-pl-container-docker-images" tabindex="-1"><a id="install_docker_images"></a>Install PL/Container Docker Images <a class="header-anchor" href="#install-pl-container-docker-images" aria-label="Permalink to &quot;&lt;a id=&quot;install_docker_images&quot;&gt;&lt;/a&gt;Install PL/Container Docker Images&quot;">​</a></h3><p>Install the Docker images that PL/Container will use to create language-specific containers to run the UDFs.</p><blockquote><p><strong>Note</strong> The PL/Container open source module contains dockerfiles to build Docker images that can be used with PL/Container. You can build a Docker image to run PL/Python UDFs and a Docker image to run PL/R UDFs. See the dockerfiles in the GitHub repository at <a href="https://github.com/greenplum-db/plcontainer" target="_blank" rel="noreferrer">https://github.com/greenplum-db/plcontainer</a>.</p></blockquote><ul><li><p>Download the files that contain the Docker images.</p><p>If you require different images from the ones provided by WarehousePG, you can create custom Docker images, install the image and add the image to the PL/ Container configuration.</p></li><li><p>Follow the instructions in <a href="./../install_guide/verify_sw.html">Verifying the WarehousePG Software Download</a> to verify the integrity of the <strong>WarehousePG Procedural Languages PL/Container Image</strong> software.</p></li><li><p>Use the <code>plcontainer image-add</code> command to install an image on all WarehousePG hosts. Provide the <code>-f</code> option to specify the file system location of a downloaded image file. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Install a Python 2 based Docker image</span></span>
<span class="line"><span>plcontainer image-add -f /home/gpadmin/plcontainer-python-image-2.2.0-gp7.tar.gz</span></span>
<span class="line"><span>            </span></span>
<span class="line"><span># Install a Python 3 based Docker image</span></span>
<span class="line"><span>plcontainer image-add -f /home/gpadmin/plcontainer-python3-image-2.2.0-gp7.tar.gz</span></span>
<span class="line"><span>            </span></span>
<span class="line"><span># Install an R based Docker image</span></span>
<span class="line"><span>plcontainer image-add -f /home/gpadmin/plcontainer-r-image-2.1.3-gp7.tar.gz</span></span></code></pre></div><p>The utility displays progress information, similar to:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>20200127:21:54:43:004607 plcontainer:cdw:gpadmin-[INFO]:-Checking whether docker is installed on all hosts...</span></span>
<span class="line"><span>20200127:21:54:43:004607 plcontainer:cdw:gpadmin-[INFO]:-Distributing image file /home/gpadmin/plcontainer-python-images-1.5.0.tar to all hosts...</span></span>
<span class="line"><span>20200127:21:54:55:004607 plcontainer:cdw:gpadmin-[INFO]:-Loading image on all hosts...</span></span>
<span class="line"><span>20200127:21:55:37:004607 plcontainer:cdw:gpadmin-[INFO]:-Removing temporary image files on all hosts...</span></span></code></pre></div><p>By default, the <code>image-add</code> command copies the image to each WarehousePG segment and standby coordinator host, and installs the image. When you specify the <code>[-ulc | --use_local_copy]</code> option, <code>plcontainer</code> installs the image only on the host on which you run the command. Use this option when the PL/Container image already resides on disk on a host.</p><p>For more information on <code>image-add</code> options, visit the <a href="./../utility_guide/ref/plcontainer.html">plcontainer</a> reference page.</p></li><li><p>To display the installed Docker images on the local host use:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ plcontainer image-list</span></span></code></pre></div><table tabindex="0"><thead><tr><th>REPOSITORY</th><th>TAG</th><th>IMAGE ID</th><th>CREATED</th></tr></thead><tbody><tr><td>pivotaldata/plcontainer_r_shared</td><td>devel</td><td>7427f920669d</td><td>10 months ago</td></tr><tr><td>pivotaldata/plcontainer_python_shared</td><td>devel</td><td>e36827eba53e</td><td>10 months ago</td></tr><tr><td>pivotaldata/plcontainer_python3_shared</td><td>devel</td><td>y32827ebe55b</td><td>5 months ago</td></tr></tbody></table></li><li><p>Add the image information to the PL/Container configuration file using <code>plcontainer runtime-add</code>, to allow PL/Container to associate containers with specified Docker images.</p><p>Use the <code>-r</code> option to specify your own user defined runtime ID name, use the <code>-i</code> option to specify the Docker image, and the <code>-l</code> option to specify the Docker image language. When there are multiple versions of the same docker image, for example 1.0.0 or 1.2.0, specify the TAG version using &quot;:&quot; after the image name.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># Add a Python 2 based runtime</span></span>
<span class="line"><span>plcontainer runtime-add -r plc_python_shared -i pivotaldata/plcontainer_python_shared:devel -l python</span></span>
<span class="line"><span>            </span></span>
<span class="line"><span># Add a Python 3 based runtime that is supported with PL/Container 2.2.x</span></span>
<span class="line"><span>plcontainer runtime-add -r plc_python3_shared -i pivotaldata/plcontainer_python3_shared:devel -l python3</span></span>
<span class="line"><span>            </span></span>
<span class="line"><span># Add an R based runtime</span></span>
<span class="line"><span>plcontainer runtime-add -r plc_r_shared -i pivotaldata/plcontainer_r_shared:devel -l r</span></span></code></pre></div><p>The utility displays progress information as it updates the PL/Container configuration file on the WarehousePG instances.</p><p>For details on other <code>runtime-add</code> options, see the <a href="./../utility_guide/ref/plcontainer.html">plcontainer</a> reference page.</p></li><li><p>Optional: Use WarehousePG resource groups to manage and limit the total CPU and memory resources of containers in PL/Container runtimes. In this example, the Python runtime will be used with a preconfigured resource group 16391:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>plcontainer runtime-add -r plc_python_shared -i pivotaldata/plcontainer_python_shared:devel -l</span></span>
<span class="line"><span>      python -s resource_group_id=16391</span></span></code></pre></div><p>For more information about enabling, configuring, and using WarehousePG resource groups with PL/Container, see <a href="./pl_container_using.html">PL/Container Resource Management</a>.</p></li></ul><p>You can now create a simple function to test your PL/Container installation.</p><h3 id="test-the-pl-container-installation" tabindex="-1"><a id="test_installation"></a>Test the PL/Container Installation <a class="header-anchor" href="#test-the-pl-container-installation" aria-label="Permalink to &quot;&lt;a id=&quot;test_installation&quot;&gt;&lt;/a&gt;Test the PL/Container Installation&quot;">​</a></h3><p>List the names of the runtimes your created and added to the PL/Container XML file:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>plcontainer runtime-show</span></span></code></pre></div><p>which will show a list of all installed runtimes:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>PL/Container Runtime Configuration: </span></span>
<span class="line"><span>---------------------------------------------------------</span></span>
<span class="line"><span>  Runtime ID: plc_python_shared</span></span>
<span class="line"><span>  Linked Docker Image: pivotaldata/plcontainer_python_shared:devel</span></span>
<span class="line"><span>  Runtime Setting(s): </span></span>
<span class="line"><span>  Shared Directory: </span></span>
<span class="line"><span>  ---- Shared Directory From HOST &#39;/usr/local/greenplum-db/./bin/plcontainer_clients&#39; to Container &#39;/clientdir&#39;, access mode is &#39;ro&#39;</span></span>
<span class="line"><span>---------------------------------------------------------</span></span></code></pre></div><p>You can also view the PL/Container configuration information with the <code>plcontainer runtime-show -r &lt;runtime_id&gt;</code> command. You can view the PL/Container configuration XML file with the <code>plcontainer runtime-edit</code> command.</p><p>Use the <code>psql</code> utility and select an existing database:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>psql postgres;</span></span></code></pre></div><p>If the PL/Container extension is not registered with the selected database, first enable it using:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>postgres=# CREATE EXTENSION plcontainer;</span></span></code></pre></div><p>Create a simple function to test your installation; in the example, the function will use the runtime <code>plc_python_shared</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>postgres=# CREATE FUNCTION dummyPython() RETURNS text AS $$</span></span>
<span class="line"><span># container: plc_python_shared</span></span>
<span class="line"><span>return &#39;hello from Python&#39;</span></span>
<span class="line"><span>$$ LANGUAGE plcontainer;</span></span></code></pre></div><p>And test the function using:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>postgres=# SELECT dummyPython();</span></span>
<span class="line"><span>    dummypython    </span></span>
<span class="line"><span>-------------------</span></span>
<span class="line"><span> hello from Python</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>Similarly, to test the R runtime:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>postgres=# CREATE FUNCTION dummyR() RETURNS text AS $$</span></span>
<span class="line"><span># container: plc_r_shared</span></span>
<span class="line"><span>return (&#39;hello from R&#39;)</span></span>
<span class="line"><span>$$ LANGUAGE plcontainer;</span></span>
<span class="line"><span>CREATE FUNCTION</span></span>
<span class="line"><span>postgres=# select dummyR();</span></span>
<span class="line"><span>    dummyr    </span></span>
<span class="line"><span>--------------</span></span>
<span class="line"><span> hello from R</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>For further details and examples about using PL/Container functions, see <a href="./pl_container_using.html">PL/Container Functions</a>.</p><h2 id="upgrade-pl-container" tabindex="-1"><a id="upgrade_plcontainer"></a>Upgrade PL/Container <a class="header-anchor" href="#upgrade-pl-container" aria-label="Permalink to &quot;&lt;a id=&quot;upgrade_plcontainer&quot;&gt;&lt;/a&gt;Upgrade PL/Container&quot;">​</a></h2><p>To upgrade PL/Container, you save the current configuration, upgrade PL/Container, and then restore the configuration after upgrade. There is no need to update the Docker images when you upgrade PL/Container.</p><blockquote><p><strong>Note</strong> Before you perform this upgrade procedure, ensure that you have migrated your PL/Container package from your previous WarehousePG installation to your new WarehousePG installation. Refer to the <a href="./../utility_guide/ref/gppkg.html">gppkg</a> command for package installation and migration information.</p></blockquote><p>To upgrade, perform the following procedure:</p><ol><li><p>Save the PL/Container configuration. For example, to save the configuration to a file named <code>plcontainer202-backup.xml</code> in the local directory:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ plcontainer runtime-backup -f plcontainer202-backup.xml</span></span></code></pre></div></li><li><p>Use the WarehousePG <code>gppkg</code> utility with the <code>install</code> option to update the PL/Container language extension using the latest package. For example, the following command updates the PL/Container language extension to version 2.2.0 on a Linux system:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gppkg install plcontainer-2.2.0-gp7-rhel8_x86_64.gppkg</span></span></code></pre></div></li><li><p>Source the WarehousePG environment file <code>$GPHOME/greenplum_path.sh</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ source $GPHOME/greenplum_path.sh</span></span></code></pre></div></li><li><p>Restore the PL/Container configuration that you saved in a previous step:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ plcontainer runtime-restore -f plcontainer202-backup.xml</span></span></code></pre></div></li><li><p>Restart WarehousePG.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpstop -ra</span></span></code></pre></div></li><li><p>You do not need to re-register the PL/Container extension in the databases in which you previously created the extension but ensure that you register the PL/Container extension in each new database that will run PL/Container UDFs. For example, the following command registers PL/Container in a database named <code>mytest</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ psql -d mytest -c &#39;CREATE EXTENSION plcontainer;&#39;</span></span></code></pre></div><p>The command also creates PL/Container-specific functions and views.</p></li></ol><h2 id="uninstall-pl-container" tabindex="-1"><a id="uninstall_plcontainer"></a>Uninstall PL/Container <a class="header-anchor" href="#uninstall-pl-container" aria-label="Permalink to &quot;&lt;a id=&quot;uninstall_plcontainer&quot;&gt;&lt;/a&gt;Uninstall PL/Container&quot;">​</a></h2><p>To uninstall PL/Container, remove Docker containers and images, and then remove the PL/Container support from WarehousePG.</p><p>When you remove support for PL/Container, the <code>plcontainer</code> user-defined functions that you created in the database will no longer work.</p><h3 id="uninstall-docker-containers-and-images" tabindex="-1"><a id="topic_rnb_4s5_lw"></a>Uninstall Docker Containers and Images <a class="header-anchor" href="#uninstall-docker-containers-and-images" aria-label="Permalink to &quot;&lt;a id=&quot;topic_rnb_4s5_lw&quot;&gt;&lt;/a&gt;Uninstall Docker Containers and Images&quot;">​</a></h3><p>On the WarehousePG hosts, uninstall the Docker containers and images that are no longer required.</p><p>The <code>plcontainer image-list</code> command lists the Docker images that are installed on the local WarehousePG host.</p><p>The <code>plcontainer image-delete</code> command deletes a specified Docker image from all WarehousePG hosts.</p><p>Some Docker containers might exist on a host if the containers were not managed by PL/Container. You might need to remove the containers with Docker commands. These <code>docker</code> commands manage Docker containers and images on a local host.</p><ul><li>The command <code>docker ps -a</code> lists all containers on a host. The command <code>docker stop</code> stops a container.</li><li>The command <code>docker images</code> lists the images on a host.</li><li>The command <code>docker rmi</code> removes images.</li><li>The command <code>docker rm</code> removes containers.</li></ul><h3 id="remove-pl-container-support-for-a-database" tabindex="-1"><a id="topic_qnb_3cj_kw"></a>Remove PL/Container Support for a Database <a class="header-anchor" href="#remove-pl-container-support-for-a-database" aria-label="Permalink to &quot;&lt;a id=&quot;topic_qnb_3cj_kw&quot;&gt;&lt;/a&gt;Remove PL/Container Support for a Database&quot;">​</a></h3><p>To remove support for PL/Container, drop the extension from the database. Use the <code>psql</code> utility with <code>DROP EXTENSION</code> command (using <code>-c</code>) to remove PL/Container from <code>mytest</code> database.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>psql -d mytest -c &#39;DROP EXTENSION plcontainer CASCADE;&#39;</span></span></code></pre></div><p>The <code>CASCADE</code> keyword drops PL/Container-specific functions and views.</p><h3 id="uninstall-the-pl-container-language-extension" tabindex="-1"><a id="topic_dty_fcj_kw"></a>Uninstall the PL/Container Language Extension <a class="header-anchor" href="#uninstall-the-pl-container-language-extension" aria-label="Permalink to &quot;&lt;a id=&quot;topic_dty_fcj_kw&quot;&gt;&lt;/a&gt;Uninstall the PL/Container Language Extension&quot;">​</a></h3><p>If no databases have <code>plcontainer</code> as a registered language, uninstall the WarehousePG PL/Container language extension with the <code>gppkg</code> utility.</p><ol><li><p>Use the WarehousePG <code>gppkg</code> utility with the <code>remove</code> option to uninstall the PL/Container language extension. This example uninstalls the PL/Container language extension on a Linux system:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gppkg remove plcontainer-2.1.1</span></span></code></pre></div><p>You can run the <code>gppkg</code> utility with the <code>query</code> option to list the installed extensions and their versions.</p></li><li><p>Reload <code>greenplum_path.sh</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ source $GPHOME/greenplum_path.sh</span></span></code></pre></div></li><li><p>Restart the database.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpstop -ra</span></span></code></pre></div></li></ol><h2 id="notes" tabindex="-1"><a id="plc_notes"></a>Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;&lt;a id=&quot;plc_notes&quot;&gt;&lt;/a&gt;Notes&quot;">​</a></h2><p><strong>Docker Notes</strong></p><ul><li><p>If a PL/Container Docker container exceeds the maximum allowed memory, it is terminated and an out of memory warning is displayed.</p></li><li><p>PL/Container does not limit the Docker base device size, the size of the Docker container. In some cases, the Docker daemon controls the base device size. For example, if the Docker storage driver is devicemapper, the Docker daemon <code>--storage-opt</code> option flag <code>dm.basesize</code> controls the base device size. The default base device size for devicemapper is 10GB. The Docker command <code>docker info</code> displays Docker system information including the storage driver. The base device size is displayed in Docker 1.12 and later. For information about Docker storage drivers, see the Docker information <a href="https://docs.docker.com/engine/reference/commandline/dockerd/#daemon-storage-driver" target="_blank" rel="noreferrer">Daemon storage-driver</a>.</p><p>When setting the Docker base device size, the size must be set on all WarehousePG hosts.</p></li><li><p><em>Known issue</em>:</p><p>Occasionally, when PL/Container is running in a high concurrency environment, the Docker daemon hangs with log entries that indicate a memory shortage. This can happen even when the system seems to have adequate free memory.</p><p>The issue seems to be triggered by the aggressive virtual memory requirement of the Go language (golang) runtime that is used by PL/Container, and the WarehousePG Linux server kernel parameter setting for <em>overcommit_memory</em>. The parameter is set to 2 which does not allow memory overcommit.</p><p>A workaround that might help is to increase the amount of swap space and increase the Linux server kernel parameter overcommit_ratio. If the issue still occurs after the changes, there might be memory shortage. You should check free memory on the system and add more RAM if needed. You can also decrease the cluster load.</p></li></ul><h2 id="docker-references" tabindex="-1"><a id="topic_kds_plk_rbb"></a>Docker References <a class="header-anchor" href="#docker-references" aria-label="Permalink to &quot;&lt;a id=&quot;topic_kds_plk_rbb&quot;&gt;&lt;/a&gt;Docker References&quot;">​</a></h2><p>Docker home page <a href="https://www.docker.com/" target="_blank" rel="noreferrer">https://www.docker.com/</a></p><p>Docker command line interface <a href="https://docs.docker.com/engine/reference/commandline/cli/" target="_blank" rel="noreferrer">https://docs.docker.com/engine/reference/commandline/cli/</a></p><p>Dockerfile reference <a href="https://docs.docker.com/engine/reference/builder/" target="_blank" rel="noreferrer">https://docs.docker.com/engine/reference/builder/</a></p><p>For CentOS, see <a href="https://docs.docker.com/engine/installation/linux/centos/" target="_blank" rel="noreferrer">Docker site installation instructions for CentOS</a>.</p><p>For a list of Docker commands, see the <a href="https://docs.docker.com/engine/reference/run/" target="_blank" rel="noreferrer">Docker engine Run Reference</a>.</p><p>Installing Docker on Linux systems <a href="https://docs.docker.com/engine/installation/linux/centos/" target="_blank" rel="noreferrer">https://docs.docker.com/engine/installation/linux/centos/</a></p><p>Control and configure Docker with systemd <a href="https://docs.docker.com/engine/admin/systemd/" target="_blank" rel="noreferrer">https://docs.docker.com/engine/admin/systemd/</a></p>`,85)]))}const m=a(i,[["render",l]]);export{g as __pageData,m as default};
