import{_ as a,c as s,o as t,ag as n}from"./chunks/framework.Ds6Eueu6.js";const m=JSON.parse('{"title":"CREATE SCHEMA","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/sql_commands/CREATE_SCHEMA.md","filePath":"docs/7x/ref_guide/sql_commands/CREATE_SCHEMA.md"}'),o={name:"docs/7x/ref_guide/sql_commands/CREATE_SCHEMA.md"};function i(c,e,l,p,d,r){return t(),s("div",null,e[0]||(e[0]=[n(`<h1 id="create-schema" tabindex="-1">CREATE SCHEMA <a class="header-anchor" href="#create-schema" aria-label="Permalink to &quot;CREATE SCHEMA&quot;">​</a></h1><p>Defines a new schema.</p><h2 id="synopsis" tabindex="-1"><a id="section2"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;section2&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE SCHEMA &lt;schema_name&gt; [AUTHORIZATION &lt;role_specification&gt;] </span></span>
<span class="line"><span>   [&lt;schema_element&gt; [ ... ]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE SCHEMA AUTHORIZATION &lt;role_specification&gt; [&lt;schema_element&gt; [ ... ]]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE SCHEMA IF NOT EXISTS &lt;schema_name&gt; [ AUTHORIZATION &lt;role_specification&gt; ]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE SCHEMA IF NOT EXISTS AUTHORIZATION &lt;role_specification&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>where &lt;role_specification&gt; can be:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    &lt;user_name&gt;</span></span>
<span class="line"><span>  | CURRENT_USER</span></span>
<span class="line"><span>  | SESSION_USER</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="section3"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;section3&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p><code>CREATE SCHEMA</code> enters a new schema into the current database. The schema name must be distinct from the name of any existing schema in the current database.</p><p>A schema is essentially a namespace: it contains named objects (tables, data types, functions, and operators) whose names may duplicate those of other objects existing in other schemas. Named objects are accessed either by qualifying their names with the schema name as a prefix, or by setting a search path that includes the desired schema(s). A <code>CREATE</code> command specifying an unqualified object name creates the object in the current schema (the one at the front of the search path, which can be determined with the function <code>current_schema()</code>).</p><p>Optionally, <code>CREATE SCHEMA</code> can include subcommands to create objects within the new schema. The subcommands are treated essentially the same as separate commands issued after creating the schema, except that if the <code>AUTHORIZATION</code> clause is used, all the created objects will be owned by that role.</p><h2 id="parameters" tabindex="-1"><a id="section4"></a>Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;&lt;a id=&quot;section4&quot;&gt;&lt;/a&gt;Parameters&quot;">​</a></h2><p>schema_name : The name of a schema to be created. If this is omitted, the user_name is used as the schema name. The name cannot begin with <code>pg_</code>, as such names are reserved for system catalog schemas.</p><p>user_name : The role name of the user who will own the new schema. If omitted, defaults to the user running the command. To create a schema owned by another role, you must be a direct or indirect member of that role, or be a superuser.</p><p>schema_element : An SQL statement defining an object to be created within the schema. Currently, only <code>CREATE TABLE</code>, <code>CREATE VIEW</code>, <code>CREATE INDEX</code>, <code>CREATE SEQUENCE</code>, <code>CREATE TRIGGER</code>, and <code>GRANT</code> are accepted as clauses within <code>CREATE SCHEMA</code>. Other kinds of objects may be created in separate commands after the schema is created.</p><pre><code>&gt; **Note** WarehousePG does not support triggers.
</code></pre><p><code>IF NOT EXISTS</code> : Do nothing (except issuing a notice) if a schema with the same name already exists. schema_element subcommands cannot be included when this option is used.</p><h2 id="notes" tabindex="-1"><a id="section5"></a>Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;&lt;a id=&quot;section5&quot;&gt;&lt;/a&gt;Notes&quot;">​</a></h2><p>To create a schema, the invoking user must have the <code>CREATE</code> privilege for the current database or be a superuser.</p><h2 id="examples" tabindex="-1"><a id="section6"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;section6&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>Create a schema:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE SCHEMA myschema;</span></span></code></pre></div><p>Create a schema for role <code>joe</code>; the schema will also be named <code>joe</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE SCHEMA AUTHORIZATION joe;</span></span></code></pre></div><p>Create a schema named <code>test</code> that will be owned by user <code>joe</code>, unless there already is a schema named <code>test</code>. (It does not matter whether <code>joe</code> owns the pre-existing schema.)</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE SCHEMA IF NOT EXISTS test AUTHORIZATION joe;</span></span></code></pre></div><p>Create a schema and create a table and view within it:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE SCHEMA hollywood</span></span>
<span class="line"><span>    CREATE TABLE films (title text, release date, awards text[])</span></span>
<span class="line"><span>    CREATE VIEW winners AS</span></span>
<span class="line"><span>        SELECT title, release FROM films WHERE awards IS NOT NULL;</span></span></code></pre></div><p>Notice that the individual subcommands do not end with semicolons.</p><p>The following is an equivalent way of accomplishing the same result:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE SCHEMA hollywood;</span></span>
<span class="line"><span>CREATE TABLE hollywood.films (title text, release date, awards text[]);</span></span>
<span class="line"><span>CREATE VIEW hollywood.winners AS</span></span>
<span class="line"><span>    SELECT title, release FROM hollywood.films WHERE awards IS NOT NULL;</span></span></code></pre></div><h2 id="compatibility" tabindex="-1"><a id="section7"></a>Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;&lt;a id=&quot;section7&quot;&gt;&lt;/a&gt;Compatibility&quot;">​</a></h2><p>The SQL standard allows a <code>DEFAULT CHARACTER SET</code> clause in <code>CREATE SCHEMA</code>, as well as more subcommand types than are presently accepted by WarehousePG.</p><p>The SQL standard specifies that the subcommands in <code>CREATE SCHEMA</code> may appear in any order. The present WarehousePG implementation does not handle all cases of forward references in subcommands; it may sometimes be necessary to reorder the subcommands in order to avoid forward references.</p><p>According to the SQL standard, the owner of a schema always owns all objects within it. WarehousePG allows schemas to contain objects owned by users other than the schema owner. This can happen only if the schema owner grants the <code>CREATE</code> privilege on the schema to someone else, or a superuser chooses to create objects in it.</p><p>The <code>IF NOT EXISTS</code> option is a WarehousePG extension.</p><h2 id="see-also" tabindex="-1"><a id="section8"></a>See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;&lt;a id=&quot;section8&quot;&gt;&lt;/a&gt;See Also&quot;">​</a></h2><p><a href="./ALTER_SCHEMA.html">ALTER SCHEMA</a>, <a href="./DROP_SCHEMA.html">DROP SCHEMA</a></p><p><strong>Parent topic:</strong> <a href="./../sql_commands/sql_ref.html">SQL Commands</a></p>`,36)]))}const u=a(o,[["render",i]]);export{m as __pageData,u as default};
