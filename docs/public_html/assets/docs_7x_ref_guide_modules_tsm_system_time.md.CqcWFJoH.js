import{_ as t,c as s,o as a,ag as o}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"tsm_system_time","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/modules/tsm_system_time.md","filePath":"docs/7x/ref_guide/modules/tsm_system_time.md"}'),i={name:"docs/7x/ref_guide/modules/tsm_system_time.md"};function l(n,e,m,d,r,c){return a(),s("div",null,e[0]||(e[0]=[o('<h1 id="tsm-system-time" tabindex="-1">tsm_system_time <a class="header-anchor" href="#tsm-system-time" aria-label="Permalink to &quot;tsm_system_time&quot;">​</a></h1><p>The <code>tsm_system_time</code> module implements the <code>SYSTEM_TIME</code> table sampling method. This method is used in the <code>TABLESAMPLE</code> clause of a <code>SELECT</code> command.</p><p>The <code>tsm_system_time</code> module is a WarehousePG extension.</p><h2 id="installing-and-registering-the-module" tabindex="-1"><a id="topic_reg"></a>Installing and Registering the Module <a class="header-anchor" href="#installing-and-registering-the-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_reg&quot;&gt;&lt;/a&gt;Installing and Registering the Module&quot;">​</a></h2><p>The <code>tsm_system_time</code> module is installed when you install WarehousePG. Before you can use any of the functions defined in the module, you must register the <code>tsm_system_time</code> extension in each database where you want to use the functions. Refer to <a href="./../../install_guide/install_extensions.html">Installing Extensions</a> for more information.</p><h2 id="using-the-tsm-system-time-module" tabindex="-1"><a id="topic_doc"></a>Using the tsm_system_time Module <a class="header-anchor" href="#using-the-tsm-system-time-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_doc&quot;&gt;&lt;/a&gt;Using the tsm_system_time Module&quot;">​</a></h2><p>The <code>SYSTEM_TIME</code> table sampling method takes a single floating-point argument that specifies the maximum number of milliseconds to spend reading the table. This allows you to control how long the query takes; the tradeoff is that the size of the sample becomes hard to predict. The resulting sample will contain as many rows as could be read in the specified time, unless the whole table has been read first.</p><p>Like the built-in <code>SYSTEM</code> sampling method, <code>SYSTEM_TIME</code> performs block-level sampling, so that, rather than being completely random, the sample may be subject to clustering effects, particularly when a small number of rows are selected.</p><h2 id="example" tabindex="-1"><a id="topic_examples"></a>Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;&lt;a id=&quot;topic_examples&quot;&gt;&lt;/a&gt;Example&quot;">​</a></h2><p>The following command return as large a sample of <code>tableA</code> as it can read in 1/2 second (500 milliseconds). If the entire table can be read in under 1 second, all of its rows will be returned.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM tableA TABLESAMPLE SYSTEM_TIME(500);</span></span></code></pre></div>',11)]))}const p=t(i,[["render",l]]);export{u as __pageData,p as default};
