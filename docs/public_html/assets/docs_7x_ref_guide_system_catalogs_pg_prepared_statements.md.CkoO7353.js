import{_ as t,c as a,o as r,ag as d}from"./chunks/framework.Ds6Eueu6.js";const _=JSON.parse('{"title":"pg_prepared_statements","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/system_catalogs/pg_prepared_statements.md","filePath":"docs/7x/ref_guide/system_catalogs/pg_prepared_statements.md"}'),s={name:"docs/7x/ref_guide/system_catalogs/pg_prepared_statements.md"};function o(p,e,n,c,i,m){return r(),a("div",null,e[0]||(e[0]=[d('<h1 id="pg-prepared-statements" tabindex="-1">pg_prepared_statements <a class="header-anchor" href="#pg-prepared-statements" aria-label="Permalink to &quot;pg_prepared_statements&quot;">â€‹</a></h1><p>The <code>pg_prepared_statements</code> view displays all of the prepared statements that are available in the current session. See <a href="./../sql_commands/PREPARE.html">PREPARE</a> for more information about prepared statements.</p><p><code>pg_prepared_statements</code> contains one row for each prepared statement. Rows are added to the view when a new prepared statement is created and removed when a prepared statement is released (for example, with the <a href="./../sql_commands/DEALLOCATE.html">DEALLOCATE</a> command).</p><p>The <code>pg_prepared_statements</code> view is read-only.</p><table tabindex="0"><thead><tr><th>name</th><th>type</th><th>description</th></tr></thead><tbody><tr><td><code>name</code></td><td>text</td><td>The identifier of the prepared statement.</td></tr><tr><td><code>statement</code></td><td>text</td><td>The query string submitted by the client to create this prepared statement. For prepared statements created via SQL, this is the <code>PREPARE</code> statement submitted by the client. For prepared statements created via the frontend/backend protocol, this is the text of the prepared statement itself.</td></tr><tr><td><code>prepare_time</code></td><td>timestamptz</td><td>The time at which the prepared statement was created.</td></tr><tr><td><code>parameter_types</code></td><td>regtype[]</td><td>The expected parameter types for the prepared statement in the form of an array of <code>regtype</code>. The object identifier corresponding to an element of this array can be obtained by casting the <code>regtype</code> value to <code>oid</code>.</td></tr><tr><td><code>from_sql</code></td><td>boolean</td><td><code>true</code> if the prepared statement was created via the <code>PREPARE</code> SQL command, <code>false</code> if the statement was prepared via the frontend/backend protocol.</td></tr></tbody></table><p><strong>Parent topic:</strong> <a href="./../system_catalogs/catalog_ref-html.html">System Catalogs Definitions</a></p>',6)]))}const l=t(s,[["render",o]]);export{_ as __pageData,l as default};
