import{_ as s,c as e,o as n,ag as t}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"PL/Python Language","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/analytics/pl_python.md","filePath":"docs/7x/analytics/pl_python.md"}'),p={name:"docs/7x/analytics/pl_python.md"};function i(o,a,l,c,r,h){return n(),e("div",null,a[0]||(a[0]=[t(`<h1 id="pl-python-language" tabindex="-1">PL/Python Language <a class="header-anchor" href="#pl-python-language" aria-label="Permalink to &quot;PL/Python Language&quot;">​</a></h1><hr><p>This section contains an overview of the WarehousePG PL/Python Language.</p><ul><li><a href="#topic2">About WarehousePG PL/Python</a></li><li><a href="#topic4">Enabling and Removing PL/Python support</a></li><li><a href="#topic7">Developing Functions with PL/Python</a></li><li><a href="#topic7a">About Developing PL/Python Procedures</a></li><li><a href="#topic10">Installing Python Modules</a></li><li><a href="#topic11">Examples</a></li><li><a href="#topic12">References</a></li></ul><h2 id="about-warehousepg-pl-python" tabindex="-1"><a id="topic2"></a>About WarehousePG PL/Python <a class="header-anchor" href="#about-warehousepg-pl-python" aria-label="Permalink to &quot;&lt;a id=&quot;topic2&quot;&gt;&lt;/a&gt;About WarehousePG PL/Python&quot;">​</a></h2><p>PL/Python is a loadable procedural language. With the WarehousePG PL/Python extensions, you can write WarehousePG user-defined functions and procedures in Python that take advantage of Python features and modules to quickly build robust database applications.</p><p>You can run PL/Python code blocks as anonymous code blocks. See the <a href="./../ref_guide/sql_commands/DO.html">DO</a> command in the <em>WarehousePG Reference Guide</em>.</p><p>The WarehousePG PL/Python extension is installed by default with WarehousePG. <code>plpython3u</code> supports developing functions using Python 3.11. The WarehousePG installation process installs a Python 3.11 environment to your system as one of its dependencies.</p><h3 id="warehousepg-pl-python-limitations" tabindex="-1"><a id="topic3"></a>WarehousePG PL/Python Limitations <a class="header-anchor" href="#warehousepg-pl-python-limitations" aria-label="Permalink to &quot;&lt;a id=&quot;topic3&quot;&gt;&lt;/a&gt;WarehousePG PL/Python Limitations&quot;">​</a></h3><ul><li>WarehousePG does not support PL/Python triggers.</li><li>PL/Python is available only as a WarehousePG untrusted language.</li><li>Updatable cursors (<code>UPDATE...WHERE CURRENT OF</code> and <code>DELETE...WHERE CURRENT OF</code>) are not supported.</li></ul><h2 id="enabling-and-removing-pl-python-support" tabindex="-1"><a id="topic4"></a>Enabling and Removing PL/Python support <a class="header-anchor" href="#enabling-and-removing-pl-python-support" aria-label="Permalink to &quot;&lt;a id=&quot;topic4&quot;&gt;&lt;/a&gt;Enabling and Removing PL/Python support&quot;">​</a></h2><p>The PL/Python language is installed with WarehousePG. To create and run a PL/Python user-defined function (UDF) in a database, you must register the PL/Python language with the database.</p><h3 id="enabling-pl-python-support" tabindex="-1"><a id="topic5"></a>Enabling PL/Python Support <a class="header-anchor" href="#enabling-pl-python-support" aria-label="Permalink to &quot;&lt;a id=&quot;topic5&quot;&gt;&lt;/a&gt;Enabling PL/Python Support&quot;">​</a></h3><p>For each database that requires its use, register the PL/Python language with the SQL command <code>CREATE EXTENSION</code>. Because PL/Python is an untrusted language, only superusers can register PL/Python with a database.</p><p>Run this command as the <code>gpadmin</code> user to register PL/Python with Python 3.11 support:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ psql -d testdb -c &#39;CREATE EXTENSION plpython3u;&#39;</span></span></code></pre></div><p>PL/Python is registered as an untrusted language.</p><h3 id="removing-pl-python-support" tabindex="-1"><a id="topic6"></a>Removing PL/Python Support <a class="header-anchor" href="#removing-pl-python-support" aria-label="Permalink to &quot;&lt;a id=&quot;topic6&quot;&gt;&lt;/a&gt;Removing PL/Python Support&quot;">​</a></h3><p>Run this command as the <code>gpadmin</code> user to remove support for PL/Python for Python 3.11:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ psql -d testdb -c &#39;DROP EXTENSION plpython3u;&#39;</span></span></code></pre></div><p>The default command fails if any existing objects (such as functions) depend on the language. Specify the <code>CASCADE</code> option to also drop all dependent objects, including functions that you created with PL/Python.</p><h2 id="developing-functions-with-pl-python" tabindex="-1"><a id="topic7"></a>Developing Functions with PL/Python <a class="header-anchor" href="#developing-functions-with-pl-python" aria-label="Permalink to &quot;&lt;a id=&quot;topic7&quot;&gt;&lt;/a&gt;Developing Functions with PL/Python&quot;">​</a></h2><p>The body of a PL/Python user-defined function is a Python script. When the function is called, its arguments are passed as elements of the array <code>args[]</code>. Named arguments are also passed as ordinary variables to the Python script. The result is returned from the PL/Python function with <code>return</code> statement, or <code>yield</code> statement in case of a result-set statement. If you do not provide a return value, Python returns the default <code>None</code>. PL/Python translates Python&#39;s <code>None</code> into the SQL null value.</p><h3 id="data-type-mapping" tabindex="-1"><a id="topic_datatypemap"></a>Data Type Mapping <a class="header-anchor" href="#data-type-mapping" aria-label="Permalink to &quot;&lt;a id=&quot;topic_datatypemap&quot;&gt;&lt;/a&gt;Data Type Mapping&quot;">​</a></h3><p>The WarehousePG to Python data type mapping follows.</p><table tabindex="0"><thead><tr><th>WarehousePG Primitive Type</th><th>Python Data Type</th></tr></thead><tbody><tr><td>boolean<sup>1</sup></td><td>bool</td></tr><tr><td>bytea</td><td>bytes</td></tr><tr><td>smallint, bigint, oid</td><td>int</td></tr><tr><td>real, double</td><td>float</td></tr><tr><td>numeric</td><td>decimal</td></tr><tr><td><em>other primitive types</em></td><td>string</td></tr><tr><td>SQL null value</td><td>None</td></tr></tbody></table><p><sup>1</sup> When the UDF return type is <code>boolean</code>, the WarehousePG evaluates the return value for truth according to Python rules. That is, <code>0</code> and empty string are <code>false</code>, but notably <code>&#39;f&#39;</code> is <code>true</code>.</p><p>Example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE OR REPLACE FUNCTION pybool_func(a int) RETURNS boolean AS $$</span></span>
<span class="line"><span>    if (a &gt; 0):</span></span>
<span class="line"><span>        return True</span></span>
<span class="line"><span>    else:</span></span>
<span class="line"><span>        return False</span></span>
<span class="line"><span>$$ LANGUAGE plpython3u;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SELECT pybool_func(-1);</span></span>
<span class="line"><span></span></span>
<span class="line"><span> pybool_func</span></span>
<span class="line"><span>-------------</span></span>
<span class="line"><span> f</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><h3 id="arrays-and-lists" tabindex="-1"><a id="topic1113"></a>Arrays and Lists <a class="header-anchor" href="#arrays-and-lists" aria-label="Permalink to &quot;&lt;a id=&quot;topic1113&quot;&gt;&lt;/a&gt;Arrays and Lists&quot;">​</a></h3><p>You pass SQL array values into PL/Python functions with a Python list. Similarly, PL/Python functions return SQL array values as a Python list. In the typical PL/Python usage pattern, you will specify an array with <code>[]</code>.</p><p>The following example creates a PL/Python function that returns an array of integers:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE FUNCTION return_py_int_array()</span></span>
<span class="line"><span>  RETURNS int[]</span></span>
<span class="line"><span>AS $$</span></span>
<span class="line"><span>  return [1, 11, 21, 31]</span></span>
<span class="line"><span>$$ LANGUAGE plpython3u;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SELECT return_py_int_array();</span></span>
<span class="line"><span> return_py_int_array</span></span>
<span class="line"><span>---------------------</span></span>
<span class="line"><span> {1,11,21,31}</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>PL/Python treats multi-dimensional arrays as lists of lists. You pass a multi-dimensional array to a PL/Python function using nested Python lists. When a PL/Python function returns a multi-dimensional array, the inner lists at each level must all be of the same size.</p><p>The following example creates a PL/Python function that takes a multi-dimensional array of integers as input. The function displays the type of the provided argument, and returns the multi-dimensional array:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE FUNCTION return_multidim_py_array(x int4[])</span></span>
<span class="line"><span>  RETURNS int4[]</span></span>
<span class="line"><span>AS $$</span></span>
<span class="line"><span>  plpy.info(x, type(x))</span></span>
<span class="line"><span>  return x</span></span>
<span class="line"><span>$$ LANGUAGE plpython3u;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SELECT * FROM return_multidim_py_array(ARRAY[[1,2,3], [4,5,6]]);</span></span>
<span class="line"><span>INFO:  ([[1, 2, 3], [4, 5, 6]], &lt;class &#39;list&#39;&gt;)</span></span>
<span class="line"><span>CONTEXT:  PL/Python function &quot;return_multidim_py_type&quot;</span></span>
<span class="line"><span> return_multidim_py_array</span></span>
<span class="line"><span>--------------------------</span></span>
<span class="line"><span> {{1,2,3},{4,5,6}}</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>PL/Python also accepts other Python sequences, such as tuples, as function arguments for backwards compatibility with WarehousePG versions where multi-dimensional arrays were not supported. In such cases, the Python sequences are always treated as one-dimensional arrays because they are ambiguous with composite types.</p><h3 id="composite-types" tabindex="-1"><a id="topic1117"></a>Composite Types <a class="header-anchor" href="#composite-types" aria-label="Permalink to &quot;&lt;a id=&quot;topic1117&quot;&gt;&lt;/a&gt;Composite Types&quot;">​</a></h3><p>You pass composite-type arguments to a PL/Python function using Python mappings. The element names of the mapping are the attribute names of the composite types. If an attribute has the null value, its mapping value is <code>None</code>.</p><p>You can return a composite type result as a sequence type (tuple or list). You must specify a composite type as a tuple, rather than a list, when it is used in a multi-dimensional array. You cannot return an array of composite types as a list because it would be ambiguous to determine whether the list represents a composite type or another array dimension. In the typical usage pattern, you will specify composite type tuples with <code>()</code>.</p><p>In the following example, you create a composite type and a PL/Python function that returns an array of the composite type:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TYPE type_record AS (</span></span>
<span class="line"><span>  first text,</span></span>
<span class="line"><span>  second int4</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE FUNCTION composite_type_as_list()</span></span>
<span class="line"><span>  RETURNS type_record[]</span></span>
<span class="line"><span>AS $$</span></span>
<span class="line"><span>  return [[(&#39;first&#39;, 1), (&#39;second&#39;, 1)], [(&#39;first&#39;, 2), (&#39;second&#39;, 2)], [(&#39;first&#39;, 3), (&#39;second&#39;, 3)]];</span></span>
<span class="line"><span>$$ LANGUAGE plpython3u;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SELECT * FROM composite_type_as_list();</span></span>
<span class="line"><span>                               composite_type_as_list</span></span>
<span class="line"><span>------------------------------------------------------------------------------------</span></span>
<span class="line"><span> {{&quot;(first,1)&quot;,&quot;(second,1)&quot;},{&quot;(first,2)&quot;,&quot;(second,2)&quot;},{&quot;(first,3)&quot;,&quot;(second,3)&quot;}}</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>Refer to the PostgreSQL <a href="https://www.postgresql.org/docs/12/plpython-data.html#PLPYTHON-ARRAYS" target="_blank" rel="noreferrer">Arrays, Lists</a> documentation for additional information on PL/Python handling of arrays and composite types.</p><h3 id="set-returning-functions" tabindex="-1"><a id="topic_setresult"></a>Set-Returning Functions <a class="header-anchor" href="#set-returning-functions" aria-label="Permalink to &quot;&lt;a id=&quot;topic_setresult&quot;&gt;&lt;/a&gt;Set-Returning Functions&quot;">​</a></h3><p>A Python function can return a set of scalar or composite types from any sequence type (for example: tuple, list, set).</p><p>In the following example, you create a composite type and a Python function that returns a <code>SETOF</code> of the composite type:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TYPE greeting AS (</span></span>
<span class="line"><span>  how text,</span></span>
<span class="line"><span>  who text</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE FUNCTION greet (how text)</span></span>
<span class="line"><span>  RETURNS SETOF greeting</span></span>
<span class="line"><span>AS $$</span></span>
<span class="line"><span>  # return tuple containing lists as composite types</span></span>
<span class="line"><span>  # all other combinations work also</span></span>
<span class="line"><span>  return ( {&quot;how&quot;: how, &quot;who&quot;: &quot;World&quot;}, {&quot;how&quot;: how, &quot;who&quot;: &quot;WarehousePG&quot;} )</span></span>
<span class="line"><span>$$ LANGUAGE plpython3u;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>select greet(&#39;hello&#39;);</span></span>
<span class="line"><span>       greet</span></span>
<span class="line"><span>-------------------</span></span>
<span class="line"><span> (hello,World)</span></span>
<span class="line"><span> (hello,WarehousePG)</span></span>
<span class="line"><span>(2 rows)</span></span></code></pre></div><h3 id="running-and-preparing-sql-queries" tabindex="-1"><a id="topic8"></a>Running and Preparing SQL Queries <a class="header-anchor" href="#running-and-preparing-sql-queries" aria-label="Permalink to &quot;&lt;a id=&quot;topic8&quot;&gt;&lt;/a&gt;Running and Preparing SQL Queries&quot;">​</a></h3><p>The PL/Python <code>plpy</code> module provides two Python functions to run an SQL query and prepare an execution plan for a query, <code>plpy.execute</code> and <code>plpy.prepare</code>. Preparing the execution plan for a query is useful if you run the query from multiple Python functions.</p><p>PL/Python also supports the <code>plpy.subtransaction()</code> function to help manage <code>plpy.execute</code> calls in an explicit subtransaction. See <a href="https://www.postgresql.org/docs/12/plpython-subtransaction.html" target="_blank" rel="noreferrer">Explicit Subtransactions</a> in the PostgreSQL documentation for additional information about <code>plpy.subtransaction()</code>.</p><h4 id="plpy-execute" tabindex="-1"><a id="topic_jnf_45f_zt"></a>plpy.execute <a class="header-anchor" href="#plpy-execute" aria-label="Permalink to &quot;&lt;a id=&quot;topic_jnf_45f_zt&quot;&gt;&lt;/a&gt;plpy.execute&quot;">​</a></h4><p>Calling <code>plpy.execute</code> with a query string and an optional limit argument causes the query to be run and the result to be returned in a Python result object. The result object emulates a list or dictionary object. The rows returned in the result object can be accessed by row number and column name. The result set row numbering starts with 0 (zero). The result object can be modified. The result object has these additional methods:</p><ul><li><code>nrows</code> that returns the number of rows returned by the query.</li><li><code>status</code> which is the <code>SPI_execute()</code> return value.</li></ul><p>For example, this Python statement in a PL/Python user-defined function runs a query.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rv = plpy.execute(&quot;SELECT * FROM my_table&quot;, 5)</span></span></code></pre></div><p>The <code>plpy.execute</code> function returns up to 5 rows from <code>my_table</code>. The result set is stored in the <code>rv</code> object. If <code>my_table</code> has a column <code>my_column</code>, it would be accessed as:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>my_col_data = rv[i][&quot;my_column&quot;]</span></span></code></pre></div><p>Since the function returns a maximum of 5 rows, the index <code>i</code> can be an integer between 0 and 4.</p><h4 id="plpy-prepare" tabindex="-1"><a id="topic_jwf_p5f_zt"></a>plpy.prepare <a class="header-anchor" href="#plpy-prepare" aria-label="Permalink to &quot;&lt;a id=&quot;topic_jwf_p5f_zt&quot;&gt;&lt;/a&gt;plpy.prepare&quot;">​</a></h4><p>The function <code>plpy.prepare</code> prepares the execution plan for a query. It is called with a query string and a list of parameter types, if you have parameter references in the query. For example, this statement can be in a PL/Python user-defined function:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>plan = plpy.prepare(&quot;SELECT last_name FROM my_users WHERE</span></span>
<span class="line"><span>  first_name = $1&quot;, [ &quot;text&quot; ])</span></span></code></pre></div><p>The string <code>text</code> is the data type of the variable that is passed for the variable $1. After preparing a statement, you use the function <code>plpy.execute</code> to run it:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>rv = plpy.execute(plan, [ &quot;Fred&quot; ], 5)</span></span></code></pre></div><p>The third argument is the limit for the number of rows returned and is optional.</p><p>When you prepare an execution plan using the PL/Python module the plan is automatically saved. See the Postgres Server Programming Interface (SPI) documentation for information about the execution plans <a href="https://www.postgresql.org/docs/12/spi.html" target="_blank" rel="noreferrer">https://www.postgresql.org/docs/12/spi.html</a>.</p><p>To make effective use of saved plans across function calls you use one of the Python persistent storage dictionaries <code>SD</code> or <code>GD</code>.</p><p>The global dictionary <code>SD</code> is available to store data between function calls. This variable is private static data. The global dictionary <code>GD</code> is public data, available to all Python functions within a session. Use GD with care.</p><p>Each function gets its own execution environment in the Python interpreter, so that global data and function arguments from <code>myfunc</code> are not available to <code>myfunc2</code>. The exception is the data in the <code>GD</code> dictionary, as mentioned previously.</p><p>This example uses the <code>SD</code> dictionary:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE FUNCTION usesavedplan() RETURNS trigger AS $$</span></span>
<span class="line"><span>  if SD.has_key(&quot;plan&quot;):</span></span>
<span class="line"><span>    plan = SD[&quot;plan&quot;]</span></span>
<span class="line"><span>  else:</span></span>
<span class="line"><span>    plan = plpy.prepare(&quot;SELECT 1&quot;)</span></span>
<span class="line"><span>    SD[&quot;plan&quot;] = plan</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    # rest of function</span></span>
<span class="line"><span></span></span>
<span class="line"><span>$$ LANGUAGE plpython3u;</span></span></code></pre></div><h3 id="handling-python-errors-and-messages" tabindex="-1"><a id="topic_s3d_vc4_xt"></a>Handling Python Errors and Messages <a class="header-anchor" href="#handling-python-errors-and-messages" aria-label="Permalink to &quot;&lt;a id=&quot;topic_s3d_vc4_xt&quot;&gt;&lt;/a&gt;Handling Python Errors and Messages&quot;">​</a></h3><p>The Python module <code>plpy</code> implements these functions to manage errors and messages:</p><ul><li><code>plpy.debug</code></li><li><code>plpy.log</code></li><li><code>plpy.info</code></li><li><code>plpy.notice</code></li><li><code>plpy.warning</code></li><li><code>plpy.error</code></li><li><code>plpy.fatal</code></li><li><code>plpy.debug</code></li></ul><p>The message functions <code>plpy.error</code> and <code>plpy.fatal</code> raise a Python exception which, if uncaught, propagates out to the calling query, causing the current transaction or subtransaction to be cancelled. The functions <code>raise plpy.ERROR(msg)</code> and <code>raise plpy.FATAL(msg)</code> are equivalent to calling <code>plpy.error</code> and <code>plpy.fatal</code>, respectively. The other message functions only generate messages of different priority levels.</p><p>Whether messages of a particular priority are reported to the client, written to the server log, or both is controlled by the WarehousePG server configuration parameters <code>log_min_messages</code> and <code>client_min_messages</code>. For information about the parameters see the <em>WarehousePG Reference Guide</em>.</p><h3 id="using-the-dictionary-gd-to-improve-pl-python-performance" tabindex="-1"><a id="topic_hfj_dgg_mjb"></a>Using the dictionary GD To Improve PL/Python Performance <a class="header-anchor" href="#using-the-dictionary-gd-to-improve-pl-python-performance" aria-label="Permalink to &quot;&lt;a id=&quot;topic_hfj_dgg_mjb&quot;&gt;&lt;/a&gt;Using the dictionary GD To Improve PL/Python Performance&quot;">​</a></h3><p>In terms of performance, importing a Python module is an expensive operation and can affect performance. If you are importing the same module frequently, you can use Python global variables to load the module on the first invocation and not require importing the module on subsequent calls. The following PL/Python function uses the GD persistent storage dictionary to avoid importing a module if it has already been imported and is in the GD.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE FUNCTION pytest() returns text as $$</span></span>
<span class="line"><span>  if &#39;mymodule&#39; not in GD:</span></span>
<span class="line"><span>    import mymodule</span></span>
<span class="line"><span>    GD[&#39;mymodule&#39;] = mymodule</span></span>
<span class="line"><span>  return GD[&#39;mymodule&#39;].sumd([1,2,3])</span></span>
<span class="line"><span>$$ LANGUAGE plpython3u;</span></span></code></pre></div><h2 id="about-pl-python-procedures" tabindex="-1"><a id="topic7a"></a>About PL/Python Procedures <a class="header-anchor" href="#about-pl-python-procedures" aria-label="Permalink to &quot;&lt;a id=&quot;topic7a&quot;&gt;&lt;/a&gt;About PL/Python Procedures&quot;">​</a></h2><p>A PL/Python procedure is similar to a PL/Python function. Refer to <a href="./../admin_guide/query/topics/functions-operators.html#topic28a">User-Defined Procedures</a> for more information on procedures in WarehousePG and how they differ from functions.</p><p>In a PL/Python procedure, the result from the Python code must be <code>None</code> (typically achieved by ending the procedure without a <code>return</code> statement or by using a <code>return</code> statement without argument); otherwise, an error will be raised.</p><p>You can pass back output parameters of a PL/Python procedure in the same way that you do for a function. For example:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PROCEDURE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> python_triple(INOUT a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, INOUT b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $$</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">return</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> (a </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, b </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">*</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$$ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LANGUAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plpython3u;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CALL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> python_triple(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><h3 id="about-transaction-management-in-procedures" tabindex="-1"><a id="proc_transmgmt"></a>About Transaction Management in Procedures <a class="header-anchor" href="#about-transaction-management-in-procedures" aria-label="Permalink to &quot;&lt;a id=&quot;proc_transmgmt&quot;&gt;&lt;/a&gt;About Transaction Management in Procedures&quot;">​</a></h3><p>In a procedure called from the top level or an anonymous code block (<code>DO</code> command) called from the top level it is possible to control transactions. To commit the current transaction, call <code>plpy.commit()</code>. To roll back the current transaction, call <code>plpy.rollback()</code>. (Note that it is not possible to run the SQL commands <code>COMMIT</code> or <code>ROLLBACK</code> via <code>plpy.execute()</code> or similar. You must commit or rollback using these functions.) After a transaction is ended, a new transaction is automatically started, so there is no separate function for that.</p><p>Here is an example:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> PROCEDURE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transaction_test1()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LANGUAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plpython3u</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $$</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> range</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">10</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">):</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">    plpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;INSERT INTO test1 (a) VALUES (%d)&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> % i)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i % </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">2</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        plpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">commit</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    else</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">        plpy</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">rollback</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">()</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$$;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CALL</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> transaction_test1();</span></span></code></pre></div><p>A transaction cannot be ended when an explicit subtransaction is active.</p><h2 id="installing-python-modules" tabindex="-1"><a id="topic10"></a>Installing Python Modules <a class="header-anchor" href="#installing-python-modules" aria-label="Permalink to &quot;&lt;a id=&quot;topic10&quot;&gt;&lt;/a&gt;Installing Python Modules&quot;">​</a></h2><p>When you install a Python module for development with PL/Python, the WarehousePG Python environment must have the module added to it across all segment hosts and mirror hosts in the cluster. When expanding WarehousePG, you must add the Python modules to the new segment hosts.</p><p>WarehousePG provides a collection of data science-related Python modules that you can use to easily develop PL/Python functions in WarehousePG. The modules are provided as two <code>.gppkg</code> format files that can be installed into a WarehousePG cluster using the <code>gppkg</code> utility, with one package supporting development with Python 3.11. See <a href="/oss/install_guide/install_python_dsmod.html">Python Data Science Module Packages</a> for installation instructions and descriptions of the provided modules.</p><p>To develop with modules that are not part of the Python Data Science Module packages, you can use WarehousePG utilities such as <code>gpssh</code> and <code>gpsync</code> to run commands or copy files to all hosts in the WarehousePG cluster. These sections describe how to use those utilities to install and use additional Python modules:</p><ul><li><a href="#about_python_env">Verifying the Python Environment</a></li><li><a href="#topic_yx3_yjq_rt">Installing Python pip</a></li><li><a href="#pip311">Installing Python Packages for Python 3.11</a></li><li><a href="#topic_j53_5jq_rt">Building and Installing Python Modules Locally</a></li><li><a href="#topic_e4p_gcw_vt">Testing Installed Python Modules</a></li></ul><h3 id="verifying-the-python-environment" tabindex="-1"><a id="about_python_env"></a>Verifying the Python Environment <a class="header-anchor" href="#verifying-the-python-environment" aria-label="Permalink to &quot;&lt;a id=&quot;about_python_env&quot;&gt;&lt;/a&gt;Verifying the Python Environment&quot;">​</a></h3><p>The plpython3u is built with Python 3.11. To check the Python environment, you can use the <code>which</code> command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>which python3.11</span></span></code></pre></div><p>When running shell commands on remote hosts with <code>gpssh</code>, specify the <code>-s</code> option to source the <code>greenplum_path.sh</code> file before running commands on the remote hosts. For example, this command should display the Python installed with WarehousePG on each host specified in the <code>gpdb_hosts</code> file.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpssh -s -f gpdb_hosts which python3.11</span></span></code></pre></div><p>To display the list of currently installed Python modules, run this command.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>python3.11 -c &quot;help(&#39;modules&#39;)&quot;</span></span></code></pre></div><p>You can optionally run <code>gpssh</code> in interactive mode to display Python modules on remote hosts. This example starts <code>gpssh</code> in interactive mode and lists the Python modules on the WarehousePG host <code>sdw1</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpssh -s -h sdw1</span></span>
<span class="line"><span>=&gt; python3.11 -c &quot;help(&#39;modules&#39;)&quot;</span></span>
<span class="line"><span>. . .</span></span>
<span class="line"><span>=&gt; exit</span></span>
<span class="line"><span>$</span></span></code></pre></div><h3 id="installing-python-pip" tabindex="-1"><a id="topic_yx3_yjq_rt"></a>Installing Python pip <a class="header-anchor" href="#installing-python-pip" aria-label="Permalink to &quot;&lt;a id=&quot;topic_yx3_yjq_rt&quot;&gt;&lt;/a&gt;Installing Python pip&quot;">​</a></h3><p>The Python utility <code>pip</code> installs Python packages that contain Python modules and other resource files from versioned archive files.</p><p>For Python 3.11, use:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>python3.11 -m ensurepip --default-pip</span></span></code></pre></div><p>The command runs the <code>ensurepip</code> module to bootstrap (install and configure) the <code>pip</code> utility from the local Python installation.</p><p>You can run this command to ensure the <code>pip</code>, <code>setuptools</code> and <code>wheel</code> projects are current. Current Python projects ensure that you can install Python packages from source distributions or pre-built distributions (wheels).</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>python3.11 -m pip install --upgrade pip setuptools wheel</span></span></code></pre></div><p>You can use <code>gpssh</code> to run the commands on the WarehousePG hosts. This example runs <code>gpssh</code> in interactive mode to install <code>pip</code> on the hosts listed in the file <code>gpdb_hosts</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpssh -s -f gpdb_hosts</span></span>
<span class="line"><span>=&gt; python3.11 -m ensurepip --default-pip</span></span>
<span class="line"><span>[centos6-cdw1] Ignoring indexes: https://pypi.python.org/simple</span></span>
<span class="line"><span>[centos6-cdw1] Collecting setuptools</span></span>
<span class="line"><span>[centos6-cdw1] Collecting pip</span></span>
<span class="line"><span>[centos6-cdw1] Installing collected packages: setuptools, pip</span></span>
<span class="line"><span>[centos6-cdw1] Successfully installed pip-8.1.1 setuptools-20.10.1</span></span>
<span class="line"><span>[centos6-sdw1] Ignoring indexes: https://pypi.python.org/simple</span></span>
<span class="line"><span>[centos6-sdw1] Collecting setuptools</span></span>
<span class="line"><span>[centos6-sdw1] Collecting pip</span></span>
<span class="line"><span>[centos6-sdw1] Installing collected packages: setuptools, pip</span></span>
<span class="line"><span>[centos6-sdw1] Successfully installed pip-8.1.1 setuptools-20.10.1</span></span>
<span class="line"><span>=&gt; exit</span></span>
<span class="line"><span>$</span></span></code></pre></div><p>The <code>=&gt;</code> is the inactive prompt for <code>gpssh</code>. The utility displays the output from each host. The <code>exit</code> command exits from <code>gpssh</code> interactive mode.</p><p>This <code>gpssh</code> command runs a single command on all hosts listed in the file <code>gpdb_hosts</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpssh -s -f gpdb_hosts python -m pip install --upgrade pip setuptools wheel</span></span></code></pre></div><p>The utility displays the output from each host.</p><p>For more information about installing Python packages, see <a href="https://packaging.python.org/tutorials/installing-packages/" target="_blank" rel="noreferrer">https://packaging.python.org/tutorials/installing-packages/</a>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>python3.11 -m pip install --user numpy scipy</span></span></code></pre></div><p>The <code>--user</code> option attempts to avoid conflicts when installing Python packages.</p><p>You can use <code>gpssh</code> to run the command on the WarehousePG hosts.</p><p>For information about these and other Python packages, see <a href="#topic12">References</a>.</p><h3 id="installing-python-packages-to-a-non-standard-location" tabindex="-1"><a id="pip311"></a>Installing Python Packages to a Non-Standard Location <a class="header-anchor" href="#installing-python-packages-to-a-non-standard-location" aria-label="Permalink to &quot;&lt;a id=&quot;pip311&quot;&gt;&lt;/a&gt;Installing Python Packages to a Non-Standard Location&quot;">​</a></h3><p>You can optionally install Python 3.11 modules to a non-standard location by using the <code>--prefix</code> option with <code>pip</code>. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpssh -s -f gpdb_hosts</span></span>
<span class="line"><span>=&gt; unset PYTHONHOME</span></span>
<span class="line"><span>=&gt; unset PYTHONPATH</span></span>
<span class="line"><span>=&gt; $GPHOME/ext/python3.11 -m pip install --prefix=/home/gpadmin/my_python numpy scipy</span></span></code></pre></div><p>If you use this option, keep in mind that the <code>PYTHONPATH</code> environment variable setting is cleared before initializing or executing functions using <code>plpython3u</code>. If you want to use modules installed to a custom location, you must configure the paths to those modules using the WarehousePG configuration parameter <code>plpython3.python_path</code> instead of <code>PYTHONPATH</code>. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ psql -d testdb</span></span>
<span class="line"><span>testdb=# SET plpython3.python_path=&#39;/home/gpadmin/my_python&#39;;</span></span></code></pre></div><p>WarehousePG uses the value of <code>plpython3.python_path</code> to set <code>PYTHONPATH</code> in the environment used to create or call <code>plpython3u</code> functions.</p><p>Ensure that you configure <code>plpython3.python_path</code> <em>before</em> you create or call <code>plpython3</code> functions in a session. If you set or change the parameter after <code>plpython3u</code> is initialized you receive the error:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ERROR: SET PYTHONPATH failed, the GUC value can only be changed before initializing the python interpreter.</span></span></code></pre></div><p>To set a default value for the configuration parameter, use <code>gpconfig</code> instead:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpconfig -c plpython3.python_path \\</span></span>
<span class="line"><span>    -v &quot;&#39;/home/gpadmin/my_python&#39;&quot; \\</span></span>
<span class="line"><span>    --skipvalidation</span></span>
<span class="line"><span>gpstop -u</span></span></code></pre></div><h3 id="building-and-installing-python-modules-locally" tabindex="-1"><a id="topic_j53_5jq_rt"></a>Building and Installing Python Modules Locally <a class="header-anchor" href="#building-and-installing-python-modules-locally" aria-label="Permalink to &quot;&lt;a id=&quot;topic_j53_5jq_rt&quot;&gt;&lt;/a&gt;Building and Installing Python Modules Locally&quot;">​</a></h3><p>If you are building a Python module, you must ensure that the build creates the correct executable. For example on a Linux system, the build should create a 64-bit executable.</p><p>Before building a Python module to be installed, ensure that the appropriate software to build the module is installed and properly configured. The build environment is required only on the host where you build the module.</p><p>You can use the WarehousePG utilities <code>gpssh</code> and <code>gpsync</code> to run commands on WarehousePG hosts and to copy files to the hosts.</p><h3 id="testing-installed-python-modules" tabindex="-1"><a id="topic_e4p_gcw_vt"></a>Testing Installed Python Modules <a class="header-anchor" href="#testing-installed-python-modules" aria-label="Permalink to &quot;&lt;a id=&quot;topic_e4p_gcw_vt&quot;&gt;&lt;/a&gt;Testing Installed Python Modules&quot;">​</a></h3><p>You can create a simple PL/Python user-defined function (UDF) to validate that Python a module is available in the WarehousePG. This example tests the NumPy module.</p><p>This PL/Python UDF imports the NumPy module. The function returns <code>SUCCESS</code> if the module is imported, and <code>FAILURE</code> if an import error occurs.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE OR REPLACE FUNCTION plpy_test()</span></span>
<span class="line"><span>returns text</span></span>
<span class="line"><span>as $$</span></span>
<span class="line"><span>  try:</span></span>
<span class="line"><span>      import numpy</span></span>
<span class="line"><span>      return &#39;SUCCESS&#39;</span></span>
<span class="line"><span>  except ImportError:</span></span>
<span class="line"><span>      return &#39;FAILURE&#39;</span></span>
<span class="line"><span>$$ language plpython3u;</span></span></code></pre></div><p>This <code>SELECT</code> command runs the UDF on the all segments by using <code>gp_dist_random(&#39;gp_id&#39;)</code>;</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT gp_segment_id, plpy_test() from gp_dist_random(&#39;gp_id&#39;);</span></span></code></pre></div><p>The <code>SELECT</code> command returns <code>SUCCESS</code> if the UDF imported the Python module on the WarehousePG segment instance. If the <code>SELECT</code> command returns <code>FAILURE</code>, you can find the segment host of the segment instance host. The WarehousePG cluster table <code>gp_segment_configuration</code> contains information about mirroring and segment configuration. This command returns the host name for a segment ID.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT hostname, content AS seg_ID FROM gp_segment_configuration</span></span>
<span class="line"><span>  WHERE content = &lt;seg_id&gt; ;</span></span></code></pre></div><p>If <code>FAILURE</code> is returned, these are some possible causes:</p><ul><li><p>A problem accessing required libraries. For the NumPy example, a WarehousePG might have a problem accessing the OpenBLAS libraries or the Python libraries on a segment host.</p><p>Make sure you get no errors when running command on the segment host as the <code>gpadmin</code> user. This <code>gpssh</code> command tests importing the numpy module on the segment host <code>cdw1</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpssh -s -h cdw1 python3.11 -c &quot;import numpy&quot;</span></span></code></pre></div></li><li><p>The <code>plpython3.python_path</code> has not been set to the correct location.</p></li></ul><h2 id="examples" tabindex="-1"><a id="topic11"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;topic11&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>This PL/Python function example uses Python 3.11 and returns the value of pi using the <code>numpy</code> module:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE OR REPLACE FUNCTION testpi()</span></span>
<span class="line"><span>  RETURNS float</span></span>
<span class="line"><span>AS $$</span></span>
<span class="line"><span>  import numpy</span></span>
<span class="line"><span>  return numpy.pi</span></span>
<span class="line"><span>$$ LANGUAGE plpython3u;</span></span></code></pre></div><p>Use <code>SELECT</code> to call the function:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT testpi();</span></span>
<span class="line"><span>       testpi</span></span>
<span class="line"><span>------------------</span></span>
<span class="line"><span> 3.14159265358979</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>This PL/Python UDF returns the maximum of two integers:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE FUNCTION pymax (a integer, b integer)</span></span>
<span class="line"><span>RETURNS integer</span></span>
<span class="line"><span>AS $$</span></span>
<span class="line"><span>  if (a is None) or (b is None):</span></span>
<span class="line"><span>    return None</span></span>
<span class="line"><span>  if a &gt; b:</span></span>
<span class="line"><span>    return a</span></span>
<span class="line"><span>  return b</span></span>
<span class="line"><span>$$ LANGUAGE plpython3u;</span></span></code></pre></div><p>You can use the <code>STRICT</code> property to perform the null handling instead of using the two conditional statements.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE FUNCTION pymax (a integer, b integer)</span></span>
<span class="line"><span>RETURNS integer AS $$</span></span>
<span class="line"><span>return max(a,b)</span></span>
<span class="line"><span>$$ LANGUAGE plpython3u STRICT;</span></span></code></pre></div><p>You can run the user-defined function <code>pymax</code> with <code>SELECT</code> command. This example runs the UDF and shows the output.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT pymax(123, 43);</span></span>
<span class="line"><span>column1</span></span>
<span class="line"><span>---------</span></span>
<span class="line"><span>     123</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>This example that returns data from an SQL query that is run against a table. These two commands create a simple table and add data to the table.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE sales (id int, year int, qtr int, day int, region text)</span></span>
<span class="line"><span>  DISTRIBUTED BY (id) ;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>INSERT INTO sales VALUES</span></span>
<span class="line"><span> (1, 2014, 1,1, &#39;usa&#39;),</span></span>
<span class="line"><span> (2, 2002, 2,2, &#39;europe&#39;),</span></span>
<span class="line"><span> (3, 2014, 3,3, &#39;asia&#39;),</span></span>
<span class="line"><span> (4, 2014, 4,4, &#39;usa&#39;),</span></span>
<span class="line"><span> (5, 2014, 1,5, &#39;europe&#39;),</span></span>
<span class="line"><span> (6, 2014, 2,6, &#39;asia&#39;),</span></span>
<span class="line"><span> (7, 2002, 3,7, &#39;usa&#39;) ;</span></span></code></pre></div><p>This PL/Python UDF runs a <code>SELECT</code> command that returns 5 rows from the table. The Python function returns the <code>REGION</code> value from the row specified by the input value. In the Python function, the row numbering starts from 0. Valid input for the function is an integer between 0 and 4.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE OR REPLACE FUNCTION mypytest(a integer)</span></span>
<span class="line"><span>  RETURNS setof text</span></span>
<span class="line"><span>AS $$</span></span>
<span class="line"><span>  rv = plpy.execute(&quot;SELECT * FROM sales ORDER BY id&quot;, 5)</span></span>
<span class="line"><span>  region =[]</span></span>
<span class="line"><span>  region.append(rv[a][&quot;region&quot;])</span></span>
<span class="line"><span>  return region</span></span>
<span class="line"><span>$$ language plpython3u EXECUTE ON COORDINATOR;</span></span></code></pre></div><p>Running this <code>SELECT</code> statement returns the <code>REGION</code> column value from the third row of the result set.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT mypytest(2) ;</span></span></code></pre></div><p>This command deletes the UDF from the database.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP FUNCTION mypytest(integer) ;</span></span></code></pre></div><p>This example runs the PL/Python function in the previous example as an anonymous block with the <code>DO</code> command. In the example, the anonymous block retrieves the input value from a temporary table.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TEMP TABLE mytemp AS VALUES (2) DISTRIBUTED RANDOMLY;</span></span>
<span class="line"><span>DO $$</span></span>
<span class="line"><span>  temprow = plpy.execute(&quot;SELECT * FROM mytemp&quot;, 1)</span></span>
<span class="line"><span>  myval = temprow[0][&quot;column1&quot;]</span></span>
<span class="line"><span>  rv = plpy.execute(&quot;SELECT * FROM sales ORDER BY id&quot;, 5)</span></span>
<span class="line"><span>  region = rv[myval][&quot;region&quot;]</span></span>
<span class="line"><span>  plpy.notice(&quot;region is %s&quot; % region)</span></span>
<span class="line"><span>$$ language plpython3u;</span></span></code></pre></div><h2 id="references" tabindex="-1"><a id="topic12"></a>References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;&lt;a id=&quot;topic12&quot;&gt;&lt;/a&gt;References&quot;">​</a></h2><h3 id="technical-references" tabindex="-1"><a id="topic13"></a>Technical References <a class="header-anchor" href="#technical-references" aria-label="Permalink to &quot;&lt;a id=&quot;topic13&quot;&gt;&lt;/a&gt;Technical References&quot;">​</a></h3><p>For information about the Python language, see <a href="https://www.python.org/" target="_blank" rel="noreferrer">https://www.python.org/</a>.</p><p>For information about PL/Python see the PostgreSQL documentation at <a href="https://www.postgresql.org/docs/12/plpython.html" target="_blank" rel="noreferrer">https://www.postgresql.org/docs/12/plpython.html</a>.</p><p>For information about Python Package Index (PyPI), see <a href="https://pypi.python.org/pypi" target="_blank" rel="noreferrer">https://pypi.python.org/pypi</a>.</p>`,170)]))}const g=s(p,[["render",i]]);export{u as __pageData,g as default};
