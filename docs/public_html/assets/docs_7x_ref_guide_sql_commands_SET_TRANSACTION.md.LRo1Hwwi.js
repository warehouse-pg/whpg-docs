import{_ as a,c as t,o as s,ag as o}from"./chunks/framework.Ds6Eueu6.js";const T=JSON.parse('{"title":"SET TRANSACTION","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/sql_commands/SET_TRANSACTION.md","filePath":"docs/7x/ref_guide/sql_commands/SET_TRANSACTION.md"}'),n={name:"docs/7x/ref_guide/sql_commands/SET_TRANSACTION.md"};function i(c,e,r,d,l,h){return s(),t("div",null,e[0]||(e[0]=[o(`<h1 id="set-transaction" tabindex="-1">SET TRANSACTION <a class="header-anchor" href="#set-transaction" aria-label="Permalink to &quot;SET TRANSACTION&quot;">​</a></h1><p>Sets the characteristics of the current transaction.</p><h2 id="synopsis" tabindex="-1"><a id="section2"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;section2&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SET TRANSACTION &lt;transaction_mode&gt; [, ...]</span></span>
<span class="line"><span>SET TRANSACTION SNAPSHOT &lt;snapshot_id&gt;</span></span>
<span class="line"><span>SET SESSION CHARACTERISTICS AS TRANSACTION &lt;transaction_mode&gt; [, ...] </span></span>
<span class="line"><span>     [READ ONLY | READ WRITE]</span></span>
<span class="line"><span>     [NOT] DEFERRABLE</span></span>
<span class="line"><span></span></span>
<span class="line"><span>where &lt;transaction_mode&gt; is one of:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    ISOLATION LEVEL {SERIALIZABLE | REPEATABLE READ | READ COMMITTED | READ UNCOMMITTED}</span></span>
<span class="line"><span>    READ WRITE | READ ONLY</span></span>
<span class="line"><span>    [NOT] DEFERRABLE</span></span>
<span class="line"><span></span></span>
<span class="line"><span>and &lt;snapshot_id&gt; is the id of the existing transaction whose snapshot you want this transaction to run with.</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="section3"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;section3&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p>The <code>SET TRANSACTION</code> command sets the characteristics of the current transaction. It has no effect on any subsequent transactions. <code>SET SESSION CHARACTERISTICS</code> sets the default transaction characteristics for subsequent transactions of a session. These defaults can be overridden by <code>SET TRANSACTION</code> for an individual transaction.</p><p>The available transaction characteristics are the transaction isolation level, the transaction access mode (read/write or read-only), and the deferrable mode. In addition, a snapshot can be selected, though only for the current transaction, not as a session default.</p><blockquote><p><strong>Note</strong> Deferrable transactions require the transaction to be serializable. WarehousePG does not support serializable transactions, so including the <code>DEFERRABLE</code> clause has no effect.</p></blockquote><p>The isolation level of a transaction determines what data the transaction can see when other transactions are running concurrently.</p><ul><li><strong>READ COMMITTED</strong> — A statement can only see rows committed before it began. This is the default.</li><li><strong>REPEATABLE READ</strong> — All statements in the current transaction can only see rows committed before the first query or data-modification statement run in the transaction.</li></ul><p>The SQL standard defines two additional levels, <code>READ UNCOMMITTED</code> and <code>SERIALIZABLE</code>. In WarehousePG, <code>READ UNCOMMITTED</code> is treated as <code>READ COMMITTED</code>. If you specify <code>SERIALIZABLE</code>, WarehousePG falls back to <code>REPEATABLE READ</code>.</p><p>The transaction isolation level cannot be changed after the first query or data-modification statement (<code>SELECT</code>, <code>INSERT</code>, <code>DELETE</code>, <code>UPDATE</code>, <code>FETCH</code>, or <code>COPY</code>) of a transaction has been run.</p><p>The transaction access mode determines whether the transaction is read/write or read-only. Read/write is the default. When a transaction is read-only, the following SQL commands are disallowed: <code>INSERT</code>, <code>UPDATE</code>, <code>DELETE</code>, and <code>COPY FROM</code> if the table they would write to is not a temporary table; all <code>CREATE</code>, <code>ALTER</code>, and <code>DROP</code> commands; <code>COMMENT</code>, <code>GRANT</code>, <code>REVOKE</code>, <code>TRUNCATE</code>; and <code>EXPLAIN ANALYZE</code> and <code>EXECUTE</code> if the command they would run is among those listed. This is a high-level notion of read-only that does not prevent all writes to disk.</p><p>The <code>DEFERRABLE</code> transaction property has no effect unless the transaction is also <code>SERIALIZABLE</code> and <code>READ ONLY</code>. When all of these properties are set on a transaction, the transaction may block when first acquiring its snapshot, after which it is able to run without the normal overhead of a <code>SERIALIZABLE</code> transaction and without any risk of contributing to or being cancelled by a serialization failure. This mode is well suited for long-running reports or backups. <em>Because WarehousePG does not support serializable transactions, the <code>DEFERRABLE</code> transaction property has no effect in WarehousePG.</em></p><p>The <code>SET TRANSACTION SNAPSHOT</code> command allows a new transaction to run with the same snapshot as an existing transaction. The pre-existing transaction must have exported its snapshot with the <code>pg_export_snapshot()</code> function. That function returns a snapshot identifier, which must be given to <code>SET TRANSACTION SNAPSHOT</code> to specify which snapshot is to be imported. The identifier must be written as a string literal in this command, for example <code>&#39;000003A1-1&#39;</code>. <code>SET TRANSACTION SNAPSHOT</code> can only be executed at the start of a transaction, before the first query or data-modification statement (<code>SELECT</code>, <code>INSERT</code>, <code>DELETE</code>, <code>UPDATE</code>, <code>FETCH</code>, or <code>COPY</code>) of the transaction. Furthermore, the transaction must already be set to <code>SERIALIZABLE</code> or <code>REPEATABLE READ</code> isolation level (otherwise, the snapshot would be discarded immediately, since <code>READ COMMITTED</code> mode takes a new snapshot for each command). If the importing transaction uses <code>SERIALIZABLE</code> isolation level, then the transaction that exported the snapshot must also use that isolation level. Also, a non-read-only serializable transaction cannot import a snapshot from a read-only transaction.</p><h2 id="notes" tabindex="-1"><a id="section5"></a>Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;&lt;a id=&quot;section5&quot;&gt;&lt;/a&gt;Notes&quot;">​</a></h2><p>If <code>SET TRANSACTION</code> is run without a prior <a href="./START_TRANSACTION.html">START TRANSACTION</a> or <a href="./BEGIN.html">BEGIN</a>, it emits a warning and otherwise has no effect.</p><p>It is possible to dispense with <code>SET TRANSACTION</code> by instead specifying the desired transaction_modes in <code>BEGIN</code> or <code>START TRANSACTION</code>. But that option is not available for <code>SET TRANSACTION SNAPSHOT</code>.</p><p>The session default transaction modes can also be set or examined via the configuration parameters <a href="./../config_params/guc-list.html#default_transaction_isolation">default_transaction_isolation</a>, <a href="./../config_params/guc-list.html#default_transaction_read_only">default_transaction_read_only</a>, and <a href="./../config_params/guc-list.html#default_transaction_deferrable">default_transaction_deferrable</a>. (In fact <code>SET SESSION CHARACTERISTICS</code> is just a verbose equivalent for setting these variables with <code>SET</code>.) This means the defaults can be set in the configuration file, via <code>ALTER DATABASE</code>, etc.</p><p>The current transaction&#39;s modes can similarly be set or examined via the configuration parameters <a href="./../config_params/guc-list.html#transaction_isolation">transaction_isolation</a>, <a href="./../config_params/guc-list.html#transaction_read_only">transaction_read_only</a>, and <a href="./../config_params/guc-list.html#transaction_deferrable">transaction_deferrable</a>. Setting one of these parameters acts the same as the corresponding <code>SET TRANSACTION</code> option, with the same restrictions on when it can be done. However, these parameters cannot be set in the configuration file, or from any source other than live SQL.</p><h2 id="examples" tabindex="-1"><a id="section6"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;section6&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>To begin a new transaction with the same snapshot as an already existing transaction, first export the snapshot from the existing transaction. That will return the snapshot identifier, for example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span></span>
<span class="line"><span>SELECT pg_export_snapshot();</span></span>
<span class="line"><span> pg_export_snapshot</span></span>
<span class="line"><span>---------------------</span></span>
<span class="line"><span> 00000003-0000001B-1</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>Then give the snapshot identifier in a <code>SET TRANSACTION SNAPSHOT</code> command at the beginning of the newly opened transaction:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BEGIN TRANSACTION ISOLATION LEVEL REPEATABLE READ;</span></span>
<span class="line"><span>SET TRANSACTION SNAPSHOT &#39;00000003-0000001B-1&#39;;</span></span></code></pre></div><h2 id="compatibility" tabindex="-1"><a id="section7"></a>Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;&lt;a id=&quot;section7&quot;&gt;&lt;/a&gt;Compatibility&quot;">​</a></h2><p>These commands are defined in the SQL standard, except for the <code>DEFERRABLE</code> transaction mode and the <code>SET TRANSACTION SNAPSHOT</code> form, which are WarehousePG extensions.</p><p><code>SERIALIZABLE</code> is the default transaction isolation level in the standard. In WarehousePG, the default is <code>READ COMMITTED</code>. Due to lack of predicate locking, WarehousePG does not fully support the <code>SERIALIZABLE</code> level, so it falls back to the <code>REPEATABLE READ</code> level when <code>SERIALIZABLE</code> is specified. Essentially, a predicate-locking system prevents phantom reads by restricting what is written, whereas a multi-version concurrency control model (MVCC) as used in WarehousePG prevents them by restricting what is read.</p><p>In the SQL standard, there is one other transaction characteristic that can be set with these commands: the size of the diagnostics area. This concept is specific to embedded SQL, and therefore is not implemented in the WarehousePG server.</p><p>The SQL standard requires commas between successive transaction_modes, but for historical reasons WarehousePG allows the commas to be omitted.</p><h2 id="see-also" tabindex="-1"><a id="section8"></a>See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;&lt;a id=&quot;section8&quot;&gt;&lt;/a&gt;See Also&quot;">​</a></h2><p><a href="./BEGIN.html">BEGIN</a></p><p><strong>Parent topic:</strong> <a href="./../sql_commands/sql_ref.html">SQL Commands</a></p>`,33)]))}const E=a(n,[["render",i]]);export{T as __pageData,E as default};
