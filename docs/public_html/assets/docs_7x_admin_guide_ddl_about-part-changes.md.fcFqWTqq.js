import{_ as t,c as a,o as i,ag as o}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"About Changes to Table Partitioning in WarehousePG 7","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/ddl/about-part-changes.md","filePath":"docs/7x/admin_guide/ddl/about-part-changes.md"}'),n={name:"docs/7x/admin_guide/ddl/about-part-changes.md"};function s(r,e,l,d,p,c){return i(),a("div",null,e[0]||(e[0]=[o(`<h1 id="about-changes-to-table-partitioning-in-warehousepg-7" tabindex="-1">About Changes to Table Partitioning in WarehousePG 7 <a class="header-anchor" href="#about-changes-to-table-partitioning-in-warehousepg-7" aria-label="Permalink to &quot;About Changes to Table Partitioning in WarehousePG 7&quot;">​</a></h1><hr><p>WarehousePG 7 retains most aspects of the partitioning syntax of prior versions of WarehousePG, now referred to as the <em>classic</em> partitioning syntax. Version 7 also introduces support for a <em>modern</em> syntax, derived from the PostgreSQL declarative partitioning syntax.</p><p>This topic describes the WarehousePG 7 partitioning syntax and behavior changes, and is geared toward existing users of WarehousePG 6.</p><p>(Refer to <a href="./ddl-partition.html">Partitioning Large Tables</a> for information about using both syntaxes to create and manage partitioned tables.)</p><p><strong>Parent topic:</strong> <a href="./../ddl/ddl.html">DDL: Defining Database Objects</a></p><h2 id="what-s-new" tabindex="-1"><a id="new"></a>What&#39;s New? <a class="header-anchor" href="#what-s-new" aria-label="Permalink to &quot;&lt;a id=&quot;new&quot;&gt;&lt;/a&gt;What&#39;s New?&quot;">​</a></h2><p>The following partitioning-related features are <em>new</em> in WarehousePG 7:</p><ul><li><p>Support for PostgreSQL declarative partitioning syntax, which introduces these new features <em>for the modern syntax only</em>:</p><ul><li>Partitions are first-class tables.</li><li>The table name of a partition is just that, not an alias.</li><li>Support for the hash partitioning strategy.</li><li>Support for multi-column range partitioning.</li><li>Support for specifying an expression in the partition key.</li><li>A partitioned table may have zero partitions.</li><li>Support for a heterogeneous partition hierarchy that allows child partitions of different levels and allows for different partitioning strategies amongst the child partitions.</li></ul></li><li><p>Less restrictive locking in <code>ATTACH PARTITION</code>. You can now attach a partition to a partition hierarchy without disrupting many normal query executions on the partition.</p></li><li><p><code>GRANT ... ONLY</code> and <code>REVOKE ... ONLY</code> syntaxes that direct WarehousePG to apply the operation to the named table only (does not recurse the operation to child tables).</p></li><li><p><code>ALTER TABLE ONLY</code> syntax that directs WarehousePG to apply the operation to the named table only (does not recurse the operation to child tables).</p></li></ul><h2 id="what-hasn-t-changed-with-classic-syntax" tabindex="-1"><a id="not"></a>What Hasn&#39;t Changed With Classic Syntax? <a class="header-anchor" href="#what-hasn-t-changed-with-classic-syntax" aria-label="Permalink to &quot;&lt;a id=&quot;not&quot;&gt;&lt;/a&gt;What Hasn&#39;t Changed With Classic Syntax?&quot;">​</a></h2><p>The following classic partitioning syntax and behaviors <em>have not</em> changed in WarehousePG 7:</p><ul><li>WarehousePG 7 supports the classic partitioning syntax of WarehousePG 6 except where called out in the <a href="#changed">What Has Changed?</a> section.</li><li>Support for range and list partition strategies.</li><li>Support for sub-partition templates.</li><li>A partitioned table must be defined with at least one partition.</li><li>Only leaf partitions contain data.</li><li>The name that you assign a partition table is an alias.</li><li>By default, a <code>GRANT</code> or <code>REVOKE</code> operation on a parent partitioned table recurses to its child tables.</li><li>By default, an <code>ALTER TABLE</code> operation on a parent partitioned table recurses to its child tables.</li></ul><h2 id="what-has-changed" tabindex="-1"><a id="changed"></a>What Has Changed? <a class="header-anchor" href="#what-has-changed" aria-label="Permalink to &quot;&lt;a id=&quot;changed&quot;&gt;&lt;/a&gt;What Has Changed?&quot;">​</a></h2><p>The following items describe the WarehousePG 7 <em>changes</em> to classic partitioning syntax and behaviors compared to WarehousePG 6:</p><ul><li><p>New internal data structures and catalogs are used to represent partitioned tables.</p><blockquote><p><strong>Important</strong> WarehousePG 7 represents and operates on partitioned tables using the new internal data structures and catalog, regardless of the partitioning syntax used to create the table. Operations that you invoke using the classic partitioning syntax are internally mapped to the new data structures, and any output generated by WarehousePG, such as DDL, is displayed in that format.</p></blockquote></li><li><p>These partitioning-related catalog tables, views, and functions are removed:</p><ul><li><code>pg_partition</code></li><li><code>pg_partition_rule</code></li><li><code>pg_partition_columns</code></li><li><code>pg_partition_encoding</code></li><li><code>pg_partition_rule</code></li><li><code>pg_partition_templates</code></li><li><code>pg_partitions</code></li><li><code>pg_stat_partition_operations</code></li><li><code>pg_partition_def()</code></li></ul><p>The new <a href="./../../ref_guide/system_catalogs/pg_partitioned_table.html">pg_partitioned_table</a> catalog table and <code>pg_partition_tree()</code>, <code>pg_partition_ancestors()</code>, and <code>pg_partition_root()</code> functions provide similar information. Refer to <a href="./ddl-partition.html#topic76">About Viewing Your Partition Design</a> for more information on these new functions.</p></li><li><p>The <code>FOR (RANK(&lt;value&gt;))</code> clause is no longer supported. When creating or altering a partitioned table, you must locate a partition by <code>VALUE</code>.</p></li><li><p>Partition boundaries are no longer represented as <code>CHECK</code> constraints, but rather internally-constructed partition constraints.</p></li><li><p>The level of a partition in the partition hierarchy differs in WarehousePG 6 and WarehousePG 7. In WarehousePG 6, the level of the immediate child of a partitioned table is 0. In WarehousePG 7, the level of the partitioned table itself is 0, and the level of its immediate child is 1.</p></li><li><p>The interpretation of <code>START</code>/<code>END</code> and <code>EXCLUSIVE</code>/<code>INCLUSIVE</code> clauses for range partition boundaries has changed:</p><ul><li>When a clause is not specified, the start boundary is always inclusive and the end boundary exclusive (same behaviour as WarehousePG 6).</li><li>When <code>START EXCLUSIVE &lt;n&gt;</code> is specified, WarehousePG now implicitly converts this to a <code>START INCLUSIVE &lt;n&gt;+1</code>.</li><li>When an <code>END INCLUSIVE &lt;n&gt;</code> is specified, WarehousePG now implicitly converts this to an <code>END EXCLUSIVE &lt;n&gt;+1</code>.</li><li>Because of the implicit conversion mentioned in the previous points, <code>START EXCLUSIVE</code> and <code>END INCLUSIVE</code> boundaries are now permitted only for data types that have a suitable <code>+</code> operator like <code>integer</code> and <code>timestamp</code> (but not <code>float</code> or <code>text</code>).</li></ul></li><li><p>Partition-specific information displayed in <code>psql</code> <code>\\d+</code> output has changed:</p><ul><li><p>Partition boundaries are now tagged <code>Partition constraint</code>.</p></li><li><p>Instead of <code>Inherits</code>, the parent table is now identified with the tag <code>Partition of</code></p></li><li><p>Range partition boundaries defined with <code>START</code>/<code>END</code> are displayed using the (modern syntax) <code>FOR VALUES [ FROM/TO | IN | WITH ]</code> keywords.</p></li><li><p>Example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>\\d+ jan_sales</span></span>
<span class="line"><span>                                    Table &quot;public.jan_sales&quot;</span></span>
<span class="line"><span> Column |     Type      | Collation | Nullable | Default | Storage | Stats target | Description</span></span>
<span class="line"><span>|--------+---------------+-----------+----------+---------+---------+--------------+-------------</span></span>
<span class="line"><span> id     | integer       |           |          |         | plain   |              |</span></span>
<span class="line"><span> date   | date          |           |          |         | plain   |              |</span></span>
<span class="line"><span> amt    | numeric(10,2) |           |          |         | main    |              |</span></span>
<span class="line"><span>Partition of: sales FOR VALUES FROM (&#39;2023-01-01&#39;) TO (&#39;2023-02-01&#39;)</span></span>
<span class="line"><span>Partition constraint: ((date IS NOT NULL) AND (date &gt;= &#39;2023-01-01&#39;::date) AND (date &lt; &#39;2023-02-01&#39;::date))</span></span>
<span class="line"><span>Distributed by: (id)</span></span></code></pre></div></li></ul></li><li><p>The <code>EXCHANGE PARTITION</code> command has changed:</p><ul><li>This command is now internally implemented with the <code>DETACH PARTITION</code> and <code>ATTACH PARTITION</code> commands introduced with the modern syntax.</li><li>The partition-to-exchange is no longer required to have the same owner as the parent table.</li><li>The partition-to-exchange is no longer required to have the same index as the parent table. The command will create one if it is missing.</li><li>The partition-to-exchange must have the same constraint as the parent table.</li><li>Previous versions renamed the tables and also renamed the index and constraints, in WarehousePG 7, this command only renames the table.</li></ul></li><li><p>Property inheritance changes:</p><ul><li>A created/added partition inherits the properties of its parent.</li><li>The partitions created from a <code>SPLIT PARTITION</code> inherit the properties of the split child.</li><li>An attached partition maintains its original properties.</li></ul></li></ul><blockquote><p><strong>Note</strong> The WarehousePG query optimizer (GPORCA) does not support multi-level partitioned tables.</p></blockquote><h2 id="additional-considerations" tabindex="-1"><a id="other"></a>Additional Considerations <a class="header-anchor" href="#additional-considerations" aria-label="Permalink to &quot;&lt;a id=&quot;other&quot;&gt;&lt;/a&gt;Additional Considerations&quot;">​</a></h2><p>Additional factors to consider:</p><ul><li>You must change any scripts that you wrote that depend on DDL or <code>psql \\d</code> output.</li><li>WarehousePG 7 dumps and restores the DDL of partitioned tables defined with classic syntax using the new catalog structures.</li></ul>`,19)]))}const g=t(n,[["render",s]]);export{u as __pageData,g as default};
