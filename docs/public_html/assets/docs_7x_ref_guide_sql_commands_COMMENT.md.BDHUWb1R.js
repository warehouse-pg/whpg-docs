import{_ as n,c as e,o as s,ag as t}from"./chunks/framework.Ds6Eueu6.js";const g=JSON.parse('{"title":"COMMENT","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/sql_commands/COMMENT.md","filePath":"docs/7x/ref_guide/sql_commands/COMMENT.md"}'),p={name:"docs/7x/ref_guide/sql_commands/COMMENT.md"};function o(l,a,i,c,r,m){return s(),e("div",null,a[0]||(a[0]=[t(`<h1 id="comment" tabindex="-1">COMMENT <a class="header-anchor" href="#comment" aria-label="Permalink to &quot;COMMENT&quot;">​</a></h1><p>Defines or changes the comment of an object.</p><h2 id="synopsis" tabindex="-1"><a id="section2"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;section2&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>COMMENT ON</span></span>
<span class="line"><span>{ ACCESS METHOD &lt;object_name&gt; |</span></span>
<span class="line"><span>  AGGREGATE &lt;aggregate_name&gt; (&lt;aggregate_signature&gt;) |</span></span>
<span class="line"><span>  CAST (&lt;source_type&gt; AS &lt;target_type&gt;) |</span></span>
<span class="line"><span>  COLLATION &lt;object_name&gt;</span></span>
<span class="line"><span>  COLUMN &lt;relation_name&gt;.&lt;column_name&gt; |</span></span>
<span class="line"><span>  CONSTRAINT &lt;constraint_name&gt; ON &lt;table_name&gt; |</span></span>
<span class="line"><span>  CONSTRAINT &lt;constraint_name&gt; ON DOMAIN &lt;domain_name&gt; |</span></span>
<span class="line"><span>  CONVERSION &lt;object_name&gt; |</span></span>
<span class="line"><span>  DATABASE &lt;object_name&gt; |</span></span>
<span class="line"><span>  DOMAIN &lt;object_name&gt; |</span></span>
<span class="line"><span>  EVENT TRIGGER &lt;object_name&gt; |</span></span>
<span class="line"><span>  EXTENSION &lt;object_name&gt; |</span></span>
<span class="line"><span>  FOREIGN DATA WRAPPER &lt;object_name&gt; |</span></span>
<span class="line"><span>  FOREIGN TABLE &lt;object_name&gt; |</span></span>
<span class="line"><span>  FUNCTION &lt;function_name&gt; [([[&lt;argmode&gt;] [&lt;argname&gt;] &lt;argtype&gt; [, ...]])] |</span></span>
<span class="line"><span>  INDEX &lt;object_name&gt; |</span></span>
<span class="line"><span>  MATERIALIZED VIEW &lt;object_name&gt; |</span></span>
<span class="line"><span>  OPERATOR &lt;operator_name&gt; (&lt;left_type&gt;, &lt;right_type&gt;) |</span></span>
<span class="line"><span>  OPERATOR CLASS &lt;object_name&gt; USING &lt;index_method&gt; |</span></span>
<span class="line"><span>  OPERATOR FAMILY &lt;object_name&gt; USING &lt;index_method&gt; |</span></span>
<span class="line"><span>  POLICY &lt;policy_name&gt; ON &lt;table_name&gt; |</span></span>
<span class="line"><span>  [PROCEDURAL] LANGUAGE &lt;object_name&gt; |</span></span>
<span class="line"><span>  PROCEDURE &lt;procedure_name&gt; [([[&lt;argmode&gt;] [&lt;argname&gt;] &lt;argtype&gt; [, ...]])] |</span></span>
<span class="line"><span>  RESOURCE GROUP &lt;object_name&gt; |</span></span>
<span class="line"><span>  RESOURCE QUEUE &lt;object_name&gt; |</span></span>
<span class="line"><span>  ROLE &lt;object_name |</span></span>
<span class="line"><span>  ROUTINE &lt;routine_name&gt; [([[&lt;argmode&gt;] [&lt;argname&gt;] &lt;argtype&gt; [, ...]])] |</span></span>
<span class="line"><span>  RULE &lt;rule_name&gt; ON &lt;table_name&gt; |</span></span>
<span class="line"><span>  SCHEMA &lt;object_name&gt; |</span></span>
<span class="line"><span>  SEQUENCE &lt;object_name&gt; |</span></span>
<span class="line"><span>  SERVER &lt;object_name&gt; |</span></span>
<span class="line"><span>  STATISTICS &lt;object_name&gt; |</span></span>
<span class="line"><span>  TABLE &lt;object_name&gt; |</span></span>
<span class="line"><span>  TABLESPACE &lt;object_name&gt; |</span></span>
<span class="line"><span>  TEXT SEARCH CONFIGURATION &lt;object_name&gt; |</span></span>
<span class="line"><span>  TEXT SEARCH DICTIONARY &lt;object_name&gt; |</span></span>
<span class="line"><span>  TEXT SEARCH PARSER &lt;object_name&gt; |</span></span>
<span class="line"><span>  TEXT SEARCH TEMPLATE &lt;object_name&gt; |</span></span>
<span class="line"><span>  TRANSFORM FOR &lt;type_name&gt; LANGUAGE &lt;lang_name&gt; |</span></span>
<span class="line"><span>  TRIGGER &lt;trigger_name&gt; ON &lt;table_name&gt; |</span></span>
<span class="line"><span>  TYPE &lt;object_name&gt; |</span></span>
<span class="line"><span>  VIEW &lt;object_name&gt;</span></span>
<span class="line"><span>} IS { &lt;string_literal&gt; | NULL }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>where &lt;aggregate_signature&gt; is:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* |</span></span>
<span class="line"><span>[ &lt;argmode&gt; ] [ &lt;argname&gt; ] &lt;argtype&gt; [ , ... ] |</span></span>
<span class="line"><span>[ [ &lt;argmode&gt; ] [ &lt;argname&gt; ] &lt;argtype&gt; [ , ... ] ] ORDER BY [ &lt;argmode&gt; ] [ &lt;argname&gt; ] &lt;argtype&gt; [ , ... ]</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="section3"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;section3&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p><code>COMMENT</code> stores a comment about a database object. Only one comment string is stored for each object, so to modify a comment, issue a new <code>COMMENT</code> command for the same object. To remove a comment, specify <code>NULL</code> in place of the text string. Comments are automatically dropped when the object is dropped.</p><p>WarehousePG acquires a <code>SHARE UPDATE EXCLUSIVE</code> lock on the object to be commented.</p><p>For most kinds of object, only the object&#39;s owner can set the comment. Roles don&#39;t have owners, so the rule for <code>COMMENT ON ROLE</code> is that you must be superuser to comment on a superuser role, or have the <code>CREATEROLE</code> privilege to comment on non-superuser roles. Likewise, access methods don&#39;t have owners either; you must be superuser to comment on an access method. Of course, a superuser can comment on anything.</p><p>You can view comments using the <code>psql</code> meta-commands <code>\\dd</code>, <code>\\d+</code>, and <code>\\l+</code>. Other user interfaces to retrieve comments can be built atop the same built-in functions that <code>psql</code> uses, namely <code>obj_description()</code>, <code>col_description()</code>, and <code>shobj_description()</code>.</p><h2 id="parameters" tabindex="-1"><a id="section4"></a>Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;&lt;a id=&quot;section4&quot;&gt;&lt;/a&gt;Parameters&quot;">​</a></h2><p>object_name relation_name.column_name aggregate_name constraint_name function_name operator_name policy_name procedure_name routine_name rule_name trigger_name : The name of the object to be commented. Names of tables, aggregates, collations, conversions, domains, foreign tables, functions, indexes, operators, operator classes, operator families, procedures, routines, sequences, statistics, text search objects, types, views, and materialized views can be schema-qualified. When commenting on a column, relation_name must refer to a table, view, materialized view, composite type, or foreign table.</p><pre><code>&gt; **Note** WarehousePG does not support triggers.
</code></pre><p>table_name domain_name : When creating a comment on a constraint, a trigger, a rule, or a policy, these parameters specify the name of the table or domain on which that object is defined.</p><p>source_type : The name of the source data type of the cast.</p><p>target_type : The name of the target data type of the cast.</p><p>argmode : The mode of a function or aggregate argument: either <code>IN</code>, <code>OUT</code>, <code>INOUT</code>, or <code>VARIADIC</code>. If omitted, the default is <code>IN</code>. Note that <code>COMMENT</code> does not actually pay any attention to <code>OUT</code> arguments, since only the input arguments are needed to determine the function&#39;s identity. It is sufficient to list the <code>IN</code>, <code>INOUT</code>, and <code>VARIADIC</code> arguments.</p><p>argname : The name of a function, procedure, or aggregate argument. Note that <code>COMMENT</code> does not actually pay any attention to argument names, since only the argument data types are needed to determine the function&#39;s identity.</p><p>argtype : The data type of a function, procedure, or aggregate argument.</p><p>left_type right_type : The data type(s) of the operator&#39;s arguments (optionally schema-qualified). Specify <code>NONE</code> for the missing argument of a prefix or postfix operator.</p><p>PROCEDURAL : WarehousePG ignores this noise word.</p><p>type_name : The name of the data type of the transform.</p><p>lang_name : The name of the language of the transform.</p><p>string_literal : The new comment contents, written as a string literal.</p><p>NULL : Specify <code>NULL</code> to drop the comment.</p><h2 id="notes" tabindex="-1"><a id="section5"></a>Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;&lt;a id=&quot;section5&quot;&gt;&lt;/a&gt;Notes&quot;">​</a></h2><p>There is presently no security mechanism for viewing comments: any user connected to a database can see all of the comments for objects in that database. For shared objects such as databases, roles, and tablespaces, comments are stored globally so any user connected to any database in the cluster can see all the comments for shared objects.</p><blockquote><p><strong>Caution</strong> Do not put security-critical information in comments.</p></blockquote><h2 id="examples" tabindex="-1"><a id="section6"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;section6&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>Attach a comment to the table <code>mytable</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>COMMENT ON TABLE mytable IS &#39;This is my table.&#39;;</span></span></code></pre></div><p>Remove it again:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>COMMENT ON TABLE mytable IS NULL;</span></span></code></pre></div><p>More examples:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>COMMENT ON ACCESS METHOD gin IS &#39;GIN index access method&#39;;</span></span>
<span class="line"><span>COMMENT ON AGGREGATE my_aggregate (double precision) IS &#39;Computes sample variance&#39;;</span></span>
<span class="line"><span>COMMENT ON CAST (text AS int4) IS &#39;Allow casts from text to int4&#39;;</span></span>
<span class="line"><span>COMMENT ON COLLATION &quot;fr_CA&quot; IS &#39;Canadian French&#39;;</span></span>
<span class="line"><span>COMMENT ON COLUMN my_table.my_column IS &#39;Employee ID number&#39;;</span></span>
<span class="line"><span>COMMENT ON CONVERSION my_conv IS &#39;Conversion to UTF8&#39;;</span></span>
<span class="line"><span>COMMENT ON CONSTRAINT bar_col_cons ON bar IS &#39;Constrains column col&#39;;</span></span>
<span class="line"><span>COMMENT ON CONSTRAINT dom_col_constr ON DOMAIN dom IS &#39;Constrains col of domain&#39;;</span></span>
<span class="line"><span>COMMENT ON DATABASE my_database IS &#39;Development Database&#39;;</span></span>
<span class="line"><span>COMMENT ON DOMAIN my_domain IS &#39;Email Address Domain&#39;;</span></span>
<span class="line"><span>COMMENT ON EVENT TRIGGER cancel_ddl IS &#39;Cancels all DLL commands&#39;;</span></span>
<span class="line"><span>COMMENT ON EXTENSION hstore IS &#39;implements the hstore data type&#39;;</span></span>
<span class="line"><span>COMMENT ON FOREIGN DATA WRAPPER mywrapper IS &#39;my foreign data wrapper&#39;;</span></span>
<span class="line"><span>COMMENT ON FOREIGN TABLE my_foreign_table IS &#39;Employee Information in other database&#39;;</span></span>
<span class="line"><span>COMMENT ON FUNCTION my_function (timestamp) IS &#39;Returns Roman Numeral&#39;;</span></span>
<span class="line"><span>COMMENT ON INDEX my_index IS &#39;Enforces uniqueness on employee ID&#39;;</span></span>
<span class="line"><span>COMMENT ON LANGUAGE plpython IS &#39;Python support for stored procedures&#39;;</span></span>
<span class="line"><span>COMMENT ON MATERIALIZED VIEW my_matview IS &#39;Summary of order history&#39;;</span></span>
<span class="line"><span>COMMENT ON OPERATOR ^ (text, text) IS &#39;Performs intersection of two texts&#39;;</span></span>
<span class="line"><span>COMMENT ON OPERATOR - (NONE, integer) IS &#39;Unary minus&#39;;</span></span>
<span class="line"><span>COMMENT ON OPERATOR CLASS int4_ops USING btree IS &#39;4 byte integer operators for btrees&#39;;</span></span>
<span class="line"><span>COMMENT ON OPERATOR FAMILY integer_ops USING btree IS &#39;all integer operators for btrees&#39;;</span></span>
<span class="line"><span>COMMENT ON POLICY my_policy ON mytable IS &#39;Filter rows by users&#39;;</span></span>
<span class="line"><span>COMMENT ON PROCEDURE my_proc (integer, integer) IS &#39;Runs a report&#39;;</span></span>
<span class="line"><span>COMMENT ON ROLE my_role IS &#39;Administration group for finance tables&#39;;</span></span>
<span class="line"><span>COMMENT ON ROUTINE my_routine (integer, integer) IS &#39;Runs a routine (which is a function or procedure)&#39;;</span></span>
<span class="line"><span>COMMENT ON RULE my_rule ON my_table IS &#39;Logs updates of employee records&#39;;</span></span>
<span class="line"><span>COMMENT ON SCHEMA my_schema IS &#39;Departmental data&#39;;</span></span>
<span class="line"><span>COMMENT ON SEQUENCE my_sequence IS &#39;Used to generate primary keys&#39;;</span></span>
<span class="line"><span>COMMENT ON SERVER myserver IS &#39;my foreign server&#39;;</span></span>
<span class="line"><span>COMMENT ON STATISTICS my_statistics IS &#39;Improves planner row estimations&#39;;</span></span>
<span class="line"><span>COMMENT ON TABLE my_schema.my_table IS &#39;Employee Information&#39;;</span></span>
<span class="line"><span>COMMENT ON TABLESPACE my_tablespace IS &#39;Tablespace for indexes&#39;;</span></span>
<span class="line"><span>COMMENT ON TEXT SEARCH CONFIGURATION my_config IS &#39;Special word filtering&#39;;</span></span>
<span class="line"><span>COMMENT ON TEXT SEARCH DICTIONARY swedish IS &#39;Snowball stemmer for Swedish language&#39;;</span></span>
<span class="line"><span>COMMENT ON TEXT SEARCH PARSER my_parser IS &#39;Splits text into words&#39;;</span></span>
<span class="line"><span>COMMENT ON TEXT SEARCH TEMPLATE snowball IS &#39;Snowball stemmer&#39;;</span></span>
<span class="line"><span>COMMENT ON TRANSFORM FOR hstore LANGUAGE plpythonu IS &#39;Transform between hstore and Python dict&#39;;</span></span>
<span class="line"><span>COMMENT ON TRIGGER my_trigger ON my_table IS &#39;Used for RI&#39;;</span></span>
<span class="line"><span>COMMENT ON TYPE complex IS &#39;Complex number data type&#39;;</span></span>
<span class="line"><span>COMMENT ON VIEW my_view IS &#39;View of departmental costs&#39;;</span></span></code></pre></div><h2 id="compatibility" tabindex="-1"><a id="section7"></a>Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;&lt;a id=&quot;section7&quot;&gt;&lt;/a&gt;Compatibility&quot;">​</a></h2><p>There is no <code>COMMENT</code> command in the SQL standard.</p><p><strong>Parent topic:</strong> <a href="./../sql_commands/sql_ref.html">SQL Commands</a></p>`,37)]))}const N=n(p,[["render",o]]);export{g as __pageData,N as default};
