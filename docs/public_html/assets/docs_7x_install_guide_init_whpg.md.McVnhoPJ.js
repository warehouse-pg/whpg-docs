import{_ as t,c as a,o as i,ag as s}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"Initializing WarehousePG","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/install_guide/init_whpg.md","filePath":"docs/7x/install_guide/init_whpg.md"}'),n={name:"docs/7x/install_guide/init_whpg.md"};function o(r,e,l,p,c,d){return i(),a("div",null,e[0]||(e[0]=[s(`<h1 id="initializing-warehousepg" tabindex="-1">Initializing WarehousePG <a class="header-anchor" href="#initializing-warehousepg" aria-label="Permalink to &quot;Initializing WarehousePG&quot;">​</a></h1><hr><p>Describes how to initialize a WarehousePG database system.</p><p>The instructions in this chapter assume you have already prepared your hosts as described in <a href="./config_os.html">Configure Operating System</a> and installed the WarehousePG software on all of the hosts in the system according to the instructions in <a href="./install_whpg.html">Installing WarehousePG</a>.</p><p>This chapter contains the following topics:</p><ul><li><a href="#topic2">Overview</a></li><li><a href="#topic3">Initializing WarehousePG</a></li><li><a href="#topic8">Setting WarehousePG Environment Variables</a></li><li><a href="#topic9">Next Steps</a></li></ul><p><strong>Parent topic:</strong> <a href="./install_guide/">Installing and Upgrading WarehousePG</a></p><h2 id="overview" tabindex="-1"><a id="topic2"></a>Overview <a class="header-anchor" href="#overview" aria-label="Permalink to &quot;&lt;a id=&quot;topic2&quot;&gt;&lt;/a&gt;Overview&quot;">​</a></h2><p>Because WarehousePG is distributed, the process for initializing a WarehousePG management system (DBMS) involves initializing several individual PostgreSQL database instances (called <em>segment instances</em> in WarehousePG).</p><p>Each database instance (the coordinator and all segments) must be initialized across all of the hosts in the system in such a way that they can all work together as a unified DBMS. WarehousePG provides its own version of <code>initdb</code> called <a href="./../utility_guide/ref/gpinitsystem.html">gpinitsystem</a>, which takes care of initializing the database on the coordinator and on each segment instance, and starting each instance in the correct order.</p><p>After the WarehousePG database system has been initialized and started, you can then create and manage databases as you would in a regular PostgreSQL DBMS by connecting to the WarehousePG coordinator.</p><h2 id="initializing-warehousepg-1" tabindex="-1"><a id="topic3"></a>Initializing WarehousePG <a class="header-anchor" href="#initializing-warehousepg-1" aria-label="Permalink to &quot;&lt;a id=&quot;topic3&quot;&gt;&lt;/a&gt;Initializing WarehousePG&quot;">​</a></h2><p>These are the high-level tasks for initializing WarehousePG:</p><ol><li>Make sure you have completed all of the installation tasks described in <a href="./config_os.html">Configure Operating System</a> and <a href="./install_whpg.html">Installing WarehousePG</a>.</li><li>Create a host file that contains the host addresses of your segments. See <a href="#topic4">Creating the Initialization Host File</a>.</li><li>Create your WarehousePG cluster configuration file. See <a href="#topic5">Creating the WarehousePG Configuration File</a>.</li><li>By default, WarehousePG will be initialized using the locale of the coordinator host system. Make sure this is the correct locale you want to use, as some locale options cannot be changed after initialization. See <a href="./localization.html">Configuring Timezone and Localization Settings</a> for more information.</li><li>Run the WarehousePG initialization utility on the coordinator host. See <a href="#topic6">Running the Initialization Utility</a>.</li><li>Set the WarehousePG timezone. See <a href="#topic_xkd_d1q_l2b">Setting the WarehousePG Timezone</a>.</li><li>Set environment variables for the WarehousePG user. See <a href="#topic8">Setting WarehousePG Environment Variables</a>.</li></ol><p>When performing the following initialization tasks, you must be logged into the coordinator host as the <code>gpadmin</code> user, and to run WarehousePG utilities, you must source the <code>greenplum_path.sh</code> file to set WarehousePG environment variables. For example, if you are logged into the coordinator, run these commands.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ su - gpadmin</span></span>
<span class="line"><span>$ source /usr/local/greenplum-db/greenplum_path.sh</span></span></code></pre></div><h3 id="creating-the-initialization-host-file" tabindex="-1"><a id="topic4"></a>Creating the Initialization Host File <a class="header-anchor" href="#creating-the-initialization-host-file" aria-label="Permalink to &quot;&lt;a id=&quot;topic4&quot;&gt;&lt;/a&gt;Creating the Initialization Host File&quot;">​</a></h3><p>The <a href="./../utility_guide/ref/gpinitsystem.html">gpinitsystem</a> utility requires a host file that contains the list of addresses for each segment host. The initialization utility determines the number of segment instances per host by the number host addresses listed per host times the number of data directory locations specified in the <code>gpinitsystem_config</code> file.</p><p>This file should only contain segment host addresses (not the coordinator or standby coordinator). For segment machines with multiple, unbonded network interfaces, this file should list the host address names for each interface — one per line.</p><blockquote><p><strong>Note</strong> The WarehousePG segment host naming convention is sdwN where sdw is a prefix and N is an integer. For example, <code>sdw2</code> and so on. If hosts have multiple unbonded NICs, the convention is to append a dash (<code>-</code>) and number to the host name. For example, <code>sdw1-1</code> and <code>sdw1-2</code> are the two interface names for host <code>sdw1</code>. However, NIC bonding is recommended to create a load-balanced, fault-tolerant network.</p></blockquote><h4 id="to-create-the-initialization-host-file" tabindex="-1"><a id="jm138608"></a>To create the initialization host file <a class="header-anchor" href="#to-create-the-initialization-host-file" aria-label="Permalink to &quot;&lt;a id=&quot;jm138608&quot;&gt;&lt;/a&gt;To create the initialization host file&quot;">​</a></h4><ol><li><p>Create a file named <code>hostfile_gpinitsystem</code>. In this file add the host address name(s) of your <em>segment</em> host interfaces, one name per line, no extra lines or spaces. For example, if you have four segment hosts with two unbonded network interfaces each:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>sdw1-1</span></span>
<span class="line"><span>sdw1-2</span></span>
<span class="line"><span>sdw2-1</span></span>
<span class="line"><span>sdw2-2</span></span>
<span class="line"><span>sdw3-1</span></span>
<span class="line"><span>sdw3-2</span></span>
<span class="line"><span>sdw4-1</span></span>
<span class="line"><span>sdw4-2</span></span></code></pre></div></li><li><p>Save and close the file.</p></li></ol><blockquote><p><strong>Note</strong> If you are not sure of the host names and/or interface address names used by your machines, look in the <code>/etc/hosts</code> file.</p></blockquote><h3 id="creating-the-warehousepg-configuration-file" tabindex="-1"><a id="topic5"></a>Creating the WarehousePG Configuration File <a class="header-anchor" href="#creating-the-warehousepg-configuration-file" aria-label="Permalink to &quot;&lt;a id=&quot;topic5&quot;&gt;&lt;/a&gt;Creating the WarehousePG Configuration File&quot;">​</a></h3><p>Your WarehousePG configuration file tells the <a href="./../utility_guide/ref/gpinitsystem.html">gpinitsystem</a> utility how you want to configure your WarehousePG cluster. An example configuration file can be found in <code>$GPHOME/docs/cli_help/gpconfigs/gpinitsystem_config</code>.</p><h4 id="to-create-a-gpinitsystem-config-file" tabindex="-1"><a id="jm138725"></a>To create a gpinitsystem_config file <a class="header-anchor" href="#to-create-a-gpinitsystem-config-file" aria-label="Permalink to &quot;&lt;a id=&quot;jm138725&quot;&gt;&lt;/a&gt;To create a gpinitsystem\\_config file&quot;">​</a></h4><ol><li><p>Make a copy of the <code>gpinitsystem_config</code> file to use as a starting point. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ cp $GPHOME/docs/cli_help/gpconfigs/gpinitsystem_config \\</span></span>
<span class="line"><span>     /home/gpadmin/gpconfigs/gpinitsystem_config</span></span></code></pre></div></li><li><p>Open the file you just copied in a text editor.</p><p>Set all of the required parameters according to your environment. See <a href="./../utility_guide/ref/gpinitsystem.html">gpinitsystem</a> for more information. A WarehousePG cluster must contain a coordinator instance and at <em>least two</em> segment instances (even if setting up a single node system).</p><p>The <code>DATA_DIRECTORY</code> parameter is what determines how many segments per host will be created. If your segment hosts have multiple network interfaces, and you used their interface address names in your host file, the number of segments will be evenly spread over the number of available interfaces.</p><p>To specify <code>PORT_BASE</code>, review the port range specified in the <code>net.ipv4.ip_local_port_range</code> parameter in the <code>/etc/sysctl.conf</code> file. See <a href="./config_os.html">Recommended OS Parameters Settings</a>.</p><p>Here is an example of the <em>required</em> parameters in the <code>gpinitsystem_config</code> file:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SEG_PREFIX=gpseg</span></span>
<span class="line"><span>PORT_BASE=6000 </span></span>
<span class="line"><span>declare -a DATA_DIRECTORY=(/data1/primary /data1/primary /data1/primary /data2/primary /data2/primary /data2/primary)</span></span>
<span class="line"><span>COORDINATOR_HOSTNAME=cdw </span></span>
<span class="line"><span>COORDINATOR_DIRECTORY=/data/coordinator </span></span>
<span class="line"><span>COORDINATOR_PORT=5432 </span></span>
<span class="line"><span>TRUSTED SHELL=ssh</span></span>
<span class="line"><span>CHECK_POINT_SEGMENTS=8</span></span>
<span class="line"><span>ENCODING=UNICODE</span></span></code></pre></div></li><li><p>(Optional) If you want to deploy mirror segments, uncomment and set the mirroring parameters according to your environment. To specify <code>MIRROR_PORT_BASE</code>, review the port range specified under the <code>net.ipv4.ip_local_port_range</code> parameter in the <code>/etc/sysctl.conf</code> file. Here is an example of the <em>optional</em> mirror parameters in the <code>gpinitsystem_config</code> file:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>MIRROR_PORT_BASE=7000</span></span>
<span class="line"><span>declare -a MIRROR_DATA_DIRECTORY=(/data1/mirror /data1/mirror /data1/mirror /data2/mirror /data2/mirror /data2/mirror)</span></span></code></pre></div><blockquote><p><strong>Note</strong> You can initialize your WarehousePG cluster with primary segments only and deploy mirrors later using the <a href="./../utility_guide/ref/gpaddmirrors.html">gpaddmirrors</a> utility.</p></blockquote></li><li><p>Save and close the file.</p></li></ol><h3 id="running-the-initialization-utility" tabindex="-1"><a id="topic6"></a>Running the Initialization Utility <a class="header-anchor" href="#running-the-initialization-utility" aria-label="Permalink to &quot;&lt;a id=&quot;topic6&quot;&gt;&lt;/a&gt;Running the Initialization Utility&quot;">​</a></h3><p>The <a href="./../utility_guide/ref/gpinitsystem.html">gpinitsystem</a> utility will create a WarehousePG cluster using the values defined in the configuration file.</p><p>These steps assume you are logged in as the <code>gpadmin</code> user and have sourced the <code>greenplum_path.sh</code> file to set WarehousePG environment variables.</p><h4 id="to-run-the-initialization-utility" tabindex="-1"><a id="jm138821"></a>To run the initialization utility <a class="header-anchor" href="#to-run-the-initialization-utility" aria-label="Permalink to &quot;&lt;a id=&quot;jm138821&quot;&gt;&lt;/a&gt;To run the initialization utility&quot;">​</a></h4><ol><li><p>Run the following command referencing the path and file name of your initialization configuration file (<code>gpinitsystem_config</code>) and host file (<code>hostfile_gpinitsystem</code>). For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ cd ~</span></span>
<span class="line"><span>$ gpinitsystem -c gpconfigs/gpinitsystem_config -h gpconfigs/hostfile_gpinitsystem</span></span></code></pre></div><p>For a fully redundant system (with a standby coordinator and a <em>spread</em> mirror configuration) include the <code>-s</code> and <code>--mirror-mode=spread</code> options. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpinitsystem -c gpconfigs/gpinitsystem_config -h gpconfigs/hostfile_gpinitsystem \\</span></span>
<span class="line"><span>  -s &lt;standby_coordinator_hostname&gt; --mirror-mode=spread</span></span></code></pre></div><p>During a new cluster creation, you may use the <code>-O output\\_configuration\\_file</code> option to save the cluster configuration details in a file. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpinitsystem -c gpconfigs/gpinitsystem_config -O gpconfigs/config_template</span></span></code></pre></div><p>This output file can be edited and used at a later stage as the input file of the <code>-I</code> option, to create a new cluster or to recover from a backup. See <a href="./../utility_guide/ref/gpinitsystem.html">gpinitsystem</a> for further details.</p><blockquote><p><strong>Note</strong> Calling <code>gpinitsystem</code> with the <code>-O</code> option does not initialize the WarehousePG cluster; it merely generates and saves a file with cluster configuration details.</p></blockquote></li><li><p>The utility will verify your setup information and make sure it can connect to each host and access the data directories specified in your configuration. If all of the pre-checks are successful, the utility will prompt you to confirm your configuration. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; Continue with WarehousePG creation? Yy/Nn</span></span></code></pre></div></li><li><p>Press <code>y</code> to start the initialization.</p></li><li><p>The utility will then begin setup and initialization of the coordinator instance and each segment instance in the system. Each segment instance is set up in parallel. Depending on the number of segments, this process can take a while.</p></li><li><p>At the end of a successful setup, the utility will start your WarehousePG cluster. You should see:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; WarehousePG instance successfully created.</span></span></code></pre></div></li></ol><h4 id="troubleshooting-initialization-problems" tabindex="-1"><a id="topic7"></a>Troubleshooting Initialization Problems <a class="header-anchor" href="#troubleshooting-initialization-problems" aria-label="Permalink to &quot;&lt;a id=&quot;topic7&quot;&gt;&lt;/a&gt;Troubleshooting Initialization Problems&quot;">​</a></h4><p>If the utility encounters any errors while setting up an instance, the entire process will fail, and could possibly leave you with a partially created system. Refer to the error messages and logs to determine the cause of the failure and where in the process the failure occurred. Log files are created in <code>~/gpAdminLogs</code>.</p><p>Depending on when the error occurred in the process, you may need to clean up and then try the <code>gpinitsystem</code> utility again. For example, if some segment instances were created and some failed, you may need to stop <code>postgres</code> processes and remove any utility-created data directories from your data storage area(s). A backout script is created to help with this cleanup if necessary.</p><h5 id="using-the-backout-script" tabindex="-1"><a id="jm139087"></a>Using the Backout Script <a class="header-anchor" href="#using-the-backout-script" aria-label="Permalink to &quot;&lt;a id=&quot;jm139087&quot;&gt;&lt;/a&gt;Using the Backout Script&quot;">​</a></h5><p>If the gpinitsystem utility fails, it will create the following backout script if it has left your system in a partially installed state:</p><p><code>~/gpAdminLogs/backout_gpinitsystem_&lt;user&gt;_&lt;timestamp&gt;</code></p><p>You can use this script to clean up a partially created WarehousePG cluster. This backout script will remove any utility-created data directories, <code>postgres</code> processes, and log files. After correcting the error that caused <code>gpinitsystem</code> to fail and running the backout script, you should be ready to retry initializing your WarehousePG cluster.</p><p>The following example shows how to run the backout script:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ bash ~/gpAdminLogs/backout_gpinitsystem_gpadmin_20071031_121053</span></span></code></pre></div><h3 id="setting-the-warehousepg-timezone" tabindex="-1"><a id="topic_xkd_d1q_l2b"></a>Setting the WarehousePG Timezone <a class="header-anchor" href="#setting-the-warehousepg-timezone" aria-label="Permalink to &quot;&lt;a id=&quot;topic_xkd_d1q_l2b&quot;&gt;&lt;/a&gt;Setting the WarehousePG Timezone&quot;">​</a></h3><p>As a best practice, configure WarehousePG and the host systems to use a known, supported timezone. WarehousePG uses a timezone from a set of internally stored PostgreSQL timezones. Setting the WarehousePG timezone prevents WarehousePG from selecting a timezone each time the cluster is restarted and sets the timezone for the WarehousePG coordinator and segment instances.</p><p>Use the <a href="./../utility_guide/ref/gpconfig.html">gpconfig</a> utility to show and set the WarehousePG timezone. For example, these commands show the WarehousePG timezone and set the timezone to <code>US/Pacific</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpconfig -s TimeZone</span></span>
<span class="line"><span>$ gpconfig -c TimeZone -v &#39;US/Pacific&#39;</span></span></code></pre></div><p>You must restart WarehousePG after changing the timezone. The command <code>gpstop -ra</code> restarts WarehousePG. The catalog view <code>pg_timezone_names</code> provides WarehousePG timezone information.</p><p>For more information about the WarehousePG timezone, see <a href="./localization.html">Configuring Timezone and Localization Settings</a>.</p><h2 id="setting-warehousepg-environment-variables" tabindex="-1"><a id="topic8"></a>Setting WarehousePG Environment Variables <a class="header-anchor" href="#setting-warehousepg-environment-variables" aria-label="Permalink to &quot;&lt;a id=&quot;topic8&quot;&gt;&lt;/a&gt;Setting WarehousePG Environment Variables&quot;">​</a></h2><p>You must set environment variables in the WarehousePG user (<code>gpadmin</code>) environment that runs WarehousePG on the WarehousePG coordinator and standby coordinator hosts. A <code>greenplum_path.sh</code> file is provided in the WarehousePG installation directory with environment variable settings for WarehousePG.</p><p>The WarehousePG management utilities also require that the <code>COORDINATOR_DATA_DIRECTORY</code> environment variable be set. This should point to the directory created by the <code>gpinitsystem</code> utility in the coordinator data directory location.</p><blockquote><p><strong>Note</strong> The <code>greenplum_path.sh</code> script changes the operating environment in order to support running the WarehousePG-specific utilities. These same changes to the environment can negatively affect the operation of other system-level utilities, such as <code>ps</code> or <code>yum</code>. Use separate accounts for performing system administration and database administration, instead of attempting to perform both functions as <code>gpadmin</code>.</p></blockquote><p>These steps ensure that the environment variables are set for the <code>gpadmin</code> user after a system reboot.</p><h3 id="to-set-up-the-gpadmin-environment-for-warehousepg" tabindex="-1"><a id="jm144961"></a>To set up the gpadmin environment for WarehousePG <a class="header-anchor" href="#to-set-up-the-gpadmin-environment-for-warehousepg" aria-label="Permalink to &quot;&lt;a id=&quot;jm144961&quot;&gt;&lt;/a&gt;To set up the gpadmin environment for WarehousePG&quot;">​</a></h3><ol><li><p>Open the <code>gpadmin</code> profile file (such as <code>.bashrc</code>) in a text editor. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ vi ~/.bashrc</span></span></code></pre></div></li><li><p>Add lines to this file to source the <code>greenplum_path.sh</code> file and set the <code>COORDINATOR_DATA_DIRECTORY</code> environment variable. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>source /usr/local/greenplum-db/greenplum_path.sh</span></span>
<span class="line"><span>export COORDINATOR_DATA_DIRECTORY=/data/coordinator/gpseg-1</span></span></code></pre></div></li><li><p>(Optional) You may also want to set some client session environment variables such as <code>PGPORT</code>, <code>PGUSER</code> and <code>PGDATABASE</code> for convenience. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export PGPORT=5432</span></span>
<span class="line"><span>export PGUSER=gpadmin</span></span>
<span class="line"><span>export PGDATABASE=gpadmin</span></span></code></pre></div></li><li><p>(Optional) If you use RHEL/Oracle/Rocky Linux, add the following line to the end of the <code>.bashrc</code> file to enable using the <code>ps</code> command in the <code>greenplum_path.sh</code> environment:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>export LD_PRELOAD=/lib64/libz.so.1 ps</span></span></code></pre></div></li><li><p>Save and close the file.</p></li><li><p>After editing the profile file, source it to make the changes active. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ source ~/.bashrc</span></span></code></pre></div></li><li><p>If you have a standby coordinator host, copy your environment file to the standby coordinator as well. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ cd ~</span></span>
<span class="line"><span>$ scp .bashrc &lt;standby_hostname&gt;:\`pwd\`</span></span></code></pre></div></li></ol><blockquote><p><strong>Note</strong> The <code>.bashrc</code> file should not produce any output. If you wish to have a message display to users upon logging in, use the <code>.bash_profile</code> file instead.</p></blockquote><h2 id="next-steps" tabindex="-1"><a id="topic9"></a>Next Steps <a class="header-anchor" href="#next-steps" aria-label="Permalink to &quot;&lt;a id=&quot;topic9&quot;&gt;&lt;/a&gt;Next Steps&quot;">​</a></h2><p>After your system is up and running, the next steps are:</p><ul><li><a href="#topic10">Allowing Client Connections</a></li><li><a href="#topic11">Creating Databases and Loading Data</a></li></ul><h3 id="allowing-client-connections" tabindex="-1"><a id="topic10"></a>Allowing Client Connections <a class="header-anchor" href="#allowing-client-connections" aria-label="Permalink to &quot;&lt;a id=&quot;topic10&quot;&gt;&lt;/a&gt;Allowing Client Connections&quot;">​</a></h3><p>After a WarehousePG is first initialized it will only allow local connections to the database from the <code>gpadmin</code> role (or whatever system user ran <code>gpinitsystem</code>). If you would like other users or client machines to be able to connect to WarehousePG, you must give them access. See the <em>WarehousePG Administrator Guide</em> for more information.</p><h3 id="creating-databases-and-loading-data" tabindex="-1"><a id="topic11"></a>Creating Databases and Loading Data <a class="header-anchor" href="#creating-databases-and-loading-data" aria-label="Permalink to &quot;&lt;a id=&quot;topic11&quot;&gt;&lt;/a&gt;Creating Databases and Loading Data&quot;">​</a></h3><p>After verifying your installation, you may want to begin creating databases and loading data. See <a href="./../admin_guide/ddl/ddl.html">DDL: Defining Database Objects</a> and <a href="./../admin_guide/load/topics/g-loading-and-unloading-data.html">Loading and Unloading Data</a> in the <em>WarehousePG Administrator Guide</em> for more information about creating databases, schemas, tables, and other database objects in WarehousePG and loading your data.</p>`,62)]))}const g=t(n,[["render",o]]);export{u as __pageData,g as default};
