import{_ as t,c as a,o,ag as i}from"./chunks/framework.Ds6Eueu6.js";const p=JSON.parse('{"title":"About View Storage in WarehousePG","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/ddl/ddl-view-storage.md","filePath":"docs/7x/admin_guide/ddl/ddl-view-storage.md"}'),r={name:"docs/7x/admin_guide/ddl/ddl-view-storage.md"};function n(s,e,d,c,l,h){return o(),a("div",null,e[0]||(e[0]=[i('<h1 id="about-view-storage-in-warehousepg" tabindex="-1">About View Storage in WarehousePG <a class="header-anchor" href="#about-view-storage-in-warehousepg" aria-label="Permalink to &quot;About View Storage in WarehousePG&quot;">​</a></h1><hr><p>A view is similar to a table, both are relations - that is &quot;something with columns&quot;. All such objects are stored in the catalog table <a href="./../../ref_guide/system_catalogs/pg_class.html"><code>pg_class</code></a>. These are the general differences:</p><ul><li><p>A view has no data files (because it holds no data).</p></li><li><p>The value of <code>pg_class.relkind</code> for a view is <code>v</code> rather than <code>r</code>.</p></li><li><p>A view has an <code>ON SELECT</code> query rewrite rule called <code>_RETURN</code>.</p><p>The rewrite rule contains the definition of the view and is stored in the <code>ev_action</code> column of the <a href="./../../ref_guide/system_catalogs/pg_rewrite.html"><code>pg_rewrite</code></a> catalog table.</p></li></ul><p>For more technical information about views, see the PostgreSQL documentation about <a href="https://www.postgresql.org/docs/12/rules-views.html" target="_blank" rel="noreferrer">Views and the Rule System</a>.</p><p>Also, a view definition is <em>not</em> stored as a string, but in the form of a query parse tree. Views are parsed when they are created, which has several consequences:</p><ul><li>Object names are resolved during <code>CREATE VIEW</code>, so the current setting of <code>search_path</code> affects the view definition.</li><li>Objects are referred to by their internal immutable object ID rather than by their name. Consequently, renaming an object or column referenced in a view definition can be performed without dropping the view.</li><li>WarehousePG can determine exactly which objects are used in the view definition, so it can add dependencies on them.</li></ul><p>Note that the way WarehousePG handles views is quite different from the way WarehousePG handles functions: function bodies are stored as strings and are not parsed when they are created. Consequently, WarehousePG does not know on which objects a given function depends.</p><h2 id="where-view-dependency-information-is-stored" tabindex="-1"><a id="whereview"></a>Where View Dependency Information is Stored <a class="header-anchor" href="#where-view-dependency-information-is-stored" aria-label="Permalink to &quot;&lt;a id=&quot;whereview&quot;&gt;&lt;/a&gt;Where View Dependency Information is Stored&quot;">​</a></h2><p>These system catalog tables contain the information used to determine the tables on which a view depends.</p><ul><li><a href="./../../ref_guide/system_catalogs/pg_class.html"><code>pg_class</code></a> - object information including tables and views. The <code>relkind</code> column describes the type of object.</li><li><a href="./../../ref_guide/system_catalogs/pg_depend.html"><code>pg_depend</code></a> - object dependency information for database-specific (non-shared) objects.</li><li><a href="./../../ref_guide/system_catalogs/pg_rewrite.html"><code>pg_rewrite</code></a> - rewrite rules for tables and views.</li><li><a href="./../../ref_guide/system_catalogs/pg_attribute.html"><code>pg_attribute</code></a> - information about table columns.</li><li><a href="./../../ref_guide/system_catalogs/pg_namespace.html"><code>pg_namespace</code></a> - information about schemas (namespaces).</li></ul><p>It is important to note that there is no direct dependency of a view on the objects it uses: the dependent object is actually the view&#39;s rewrite rule. That adds another layer of indirection to view dependency information.</p>',12)]))}const f=t(r,[["render",n]]);export{p as __pageData,f as default};
