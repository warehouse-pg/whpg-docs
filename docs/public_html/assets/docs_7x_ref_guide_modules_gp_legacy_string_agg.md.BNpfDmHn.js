import{_ as a,c as n,o as t,ag as s}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"gp_legacy_string_agg","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/modules/gp_legacy_string_agg.md","filePath":"docs/7x/ref_guide/modules/gp_legacy_string_agg.md"}'),i={name:"docs/7x/ref_guide/modules/gp_legacy_string_agg.md"};function g(o,e,l,c,p,r){return t(),n("div",null,e[0]||(e[0]=[s(`<h1 id="gp-legacy-string-agg" tabindex="-1">gp_legacy_string_agg <a class="header-anchor" href="#gp-legacy-string-agg" aria-label="Permalink to &quot;gp\\_legacy\\_string\\_agg&quot;">​</a></h1><p>The <code>gp_legacy_string_agg</code> module re-introduces the single-argument <code>string_agg()</code> function that was present in WarehousePG 5.</p><p>The <code>gp_legacy_string_agg</code> module is a WarehousePG extension.</p><blockquote><p><strong>Note</strong> Use this module to aid migration from WarehousePG 5 to the native, two-argument <code>string_agg()</code> function included in WarehousePG 6.</p></blockquote><h2 id="installing-and-registering-the-module" tabindex="-1"><a id="topic_reg"></a>Installing and Registering the Module <a class="header-anchor" href="#installing-and-registering-the-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_reg&quot;&gt;&lt;/a&gt;Installing and Registering the Module&quot;">​</a></h2><p>The <code>gp_legacy_string_agg</code> module is installed when you install WarehousePG. Before you can use the function defined in the module, you must register the <code>gp_legacy_string_agg</code> extension in each database where you want to use the function. Refer to <a href="./../../install_guide/install_extensions.html">Installing Extensions</a> for more information about registering the module.</p><h2 id="using-the-module" tabindex="-1"><a id="topic_use"></a>Using the Module <a class="header-anchor" href="#using-the-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_use&quot;&gt;&lt;/a&gt;Using the Module&quot;">​</a></h2><p>The single-argument <code>string_agg()</code> function has the following signature:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>string_agg( text )</span></span></code></pre></div><p>You can use the function to concatenate non-null input values into a string. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT string_agg(a) FROM (VALUES(&#39;aaaa&#39;),(&#39;bbbb&#39;),(&#39;cccc&#39;),(NULL)) g(a);</span></span>
<span class="line"><span>WARNING:  Deprecated call to string_agg(text), use string_agg(text, text) instead</span></span>
<span class="line"><span>  string_agg  </span></span>
<span class="line"><span>--------------</span></span>
<span class="line"><span> aaaabbbbcccc</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>The function concatenates each string value until it encounters a null value, and then returns the string. The function returns a null value when no rows are selected in the query.</p><p><code>string_agg()</code> produces results that depend on the ordering of the input rows. The ordering is unspecified by default; you can control the ordering by specifying an <code>ORDER BY</code> clause within the aggregate. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE table1(a int, b text);</span></span>
<span class="line"><span>INSERT INTO table1 VALUES(4, &#39;aaaa&#39;),(2, &#39;bbbb&#39;),(1, &#39;cccc&#39;), (3, NULL);</span></span>
<span class="line"><span>SELECT string_agg(b ORDER BY a) FROM table1;</span></span>
<span class="line"><span>WARNING:  Deprecated call to string_agg(text), use string_agg(text, text) instead</span></span>
<span class="line"><span>  string_agg  </span></span>
<span class="line"><span>--------------</span></span>
<span class="line"><span> ccccbbbb</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><h2 id="migrating-to-the-two-argument-string-agg-function" tabindex="-1"><a id="topic_migrate"></a>Migrating to the Two-Argument string_agg() Function <a class="header-anchor" href="#migrating-to-the-two-argument-string-agg-function" aria-label="Permalink to &quot;&lt;a id=&quot;topic_migrate&quot;&gt;&lt;/a&gt;Migrating to the Two-Argument string\\_agg\\(\\) Function&quot;">​</a></h2><p>WarehousePG 6 includes a native, two-argument, text input <code>string_agg()</code> function:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>string_agg( text, text )</span></span></code></pre></div><p>The following function invocation is equivalent to the single-argument <code>string_agg()</code> function that is provided in this module:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>string_agg( text, &#39;&#39; )</span></span></code></pre></div><p>You can use this conversion when you are ready to migrate from this contrib module.</p>`,20)]))}const h=a(i,[["render",g]]);export{u as __pageData,h as default};
