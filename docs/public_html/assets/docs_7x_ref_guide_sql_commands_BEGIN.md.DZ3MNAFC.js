import{_ as e,c as t,o as s,ag as n}from"./chunks/framework.Ds6Eueu6.js";const m=JSON.parse('{"title":"BEGIN","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/sql_commands/BEGIN.md","filePath":"docs/7x/ref_guide/sql_commands/BEGIN.md"}'),i={name:"docs/7x/ref_guide/sql_commands/BEGIN.md"};function o(r,a,l,c,d,p){return s(),t("div",null,a[0]||(a[0]=[n(`<h1 id="begin" tabindex="-1">BEGIN <a class="header-anchor" href="#begin" aria-label="Permalink to &quot;BEGIN&quot;">​</a></h1><p>Starts a transaction block.</p><h2 id="synopsis" tabindex="-1"><a id="section2"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;section2&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BEGIN [WORK | TRANSACTION] [&lt;transaction_mode&gt;]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>where &lt;transaction_mode&gt; is:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>   ISOLATION LEVEL {READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE}</span></span>
<span class="line"><span>   READ WRITE | READ ONLY</span></span>
<span class="line"><span>   [NOT] DEFERRABLE</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="section3"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;section3&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p><code>BEGIN</code> initiates a transaction block, that is, all statements after a <code>BEGIN</code> command will be run in a single transaction until an explicit <a href="./COMMIT.html">COMMIT</a> or <a href="./ROLLBACK.html">ROLLBACK</a> is given. By default (without <code>BEGIN</code>), WarehousePG runs transactions in &quot;autocommit&quot; mode, that is, each statement is run in its own transaction and a commit is implicitly performed at the end of the statement (if execution was successful, otherwise a rollback is done).</p><p>Statements are run more quickly in a transaction block, because transaction start/commit requires significant CPU and disk activity. Execution of multiple statements inside a transaction is also useful to ensure consistency when making several related changes: other sessions will be unable to see the intermediate states wherein not all the related updates have been done.</p><p>If the isolation level, read/write mode, or deferrable mode is specified, the new transaction has those characteristics, as if <a href="./SET_TRANSACTION.html">SET TRANSACTION</a> was run.</p><h2 id="parameters" tabindex="-1"><a id="section4"></a>Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;&lt;a id=&quot;section4&quot;&gt;&lt;/a&gt;Parameters&quot;">​</a></h2><p>WORK TRANSACTION : Optional key words. They have no effect.</p><p>Refer to <a href="./SET_TRANSACTION.html">SET TRANSACTION</a> for information on the meaning of the other parameters to this statement.</p><h2 id="notes" tabindex="-1"><a id="section5"></a>Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;&lt;a id=&quot;section5&quot;&gt;&lt;/a&gt;Notes&quot;">​</a></h2><p><a href="./START_TRANSACTION.html">START TRANSACTION</a> has the same functionality as <code>BEGIN</code>.</p><p>Use <a href="./COMMIT.html">COMMIT</a> or <a href="./ROLLBACK.html">ROLLBACK</a> to terminate a transaction block.</p><p>Issuing <code>BEGIN</code> when already inside a transaction block will provoke a warning message. The state of the transaction is not affected. To nest transactions within a transaction block, use savepoints (see <a href="./SAVEPOINT.html">SAVEPOINT</a>).</p><p>For reasons of backwards compatibility, the commas between successive transaction_modes can be omitted.</p><h2 id="examples" tabindex="-1"><a id="section6"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;section6&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>To begin a transaction block:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>BEGIN;</span></span></code></pre></div><h2 id="compatibility" tabindex="-1"><a id="section7"></a>Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;&lt;a id=&quot;section7&quot;&gt;&lt;/a&gt;Compatibility&quot;">​</a></h2><p><code>BEGIN</code> is a WarehousePG language extension. It is equivalent to the SQL-standard command <a href="./START_TRANSACTION.html">START TRANSACTION</a>, whose reference page contains additional compatibility information.</p><p>The <code>DEFERRABLE</code> transaction_mode is a WarehousePG language extension.</p><p>Incidentally, the <code>BEGIN</code> key word is used for a different purpose in embedded SQL. You are advised to be careful about the transaction semantics when porting database applications.</p><h2 id="see-also" tabindex="-1"><a id="section8"></a>See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;&lt;a id=&quot;section8&quot;&gt;&lt;/a&gt;See Also&quot;">​</a></h2><p><a href="./COMMIT.html">COMMIT</a>, <a href="./ROLLBACK.html">ROLLBACK</a>, <a href="./SAVEPOINT.html">SAVEPOINT</a>, <a href="./START_TRANSACTION.html">START TRANSACTION</a></p><p><strong>Parent topic:</strong> <a href="./../sql_commands/sql_ref.html">SQL Commands</a></p>`,26)]))}const u=e(i,[["render",o]]);export{m as __pageData,u as default};
