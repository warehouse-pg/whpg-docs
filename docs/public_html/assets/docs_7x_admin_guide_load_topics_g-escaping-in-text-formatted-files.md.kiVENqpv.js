import{_ as a,c as t,o as c,ag as s}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"Escaping in Text Formatted Files","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/load/topics/g-escaping-in-text-formatted-files.md","filePath":"docs/7x/admin_guide/load/topics/g-escaping-in-text-formatted-files.md"}'),o={name:"docs/7x/admin_guide/load/topics/g-escaping-in-text-formatted-files.md"};function i(d,e,r,n,p,l){return c(),t("div",null,e[0]||(e[0]=[s('<h1 id="escaping-in-text-formatted-files" tabindex="-1">Escaping in Text Formatted Files <a class="header-anchor" href="#escaping-in-text-formatted-files" aria-label="Permalink to &quot;Escaping in Text Formatted Files&quot;">â€‹</a></h1><hr><p>By default, the escape character is a \\ (backslash) for text-formatted files. You can declare a different escape character in the <code>ESCAPE</code> clause of <code>COPY</code>, <code>CREATE EXTERNAL TABLE</code>or <code>gpload</code>. If your escape character appears in your data, use it to escape itself.</p><p>For example, suppose you have a table with three columns and you want to load the following three fields:</p><ul><li><code>backslash = \\</code></li><li><code>vertical bar = |</code></li><li><code>exclamation point = !</code></li></ul><p>Your designated delimiter character is <code>|</code> (pipe character), and your designated escape character is <code>\\</code> (backslash). The formatted row in your data file looks like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>backslash = \\\\ | vertical bar = \\| | exclamation point = !</span></span></code></pre></div><p>Notice how the backslash character that is part of the data is escaped with another backslash character, and the pipe character that is part of the data is escaped with a backslash character.</p><p>You can use the escape character to escape octal and hexadecimal sequences. The escaped value is converted to the equivalent character when loaded into WarehousePG. For example, to load the ampersand character (<code>&amp;</code>), use the escape character to escape its equivalent hexadecimal (<code>\\0x26</code>) or octal (<code>\\046</code>) representation.</p><p>You can deactivate escaping in <code>TEXT</code>-formatted files using the <code>ESCAPE</code> clause of <code>COPY</code>, <code>CREATE EXTERNAL TABLE</code>or <code>gpload</code> as follows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ESCAPE &#39;OFF&#39;</span></span></code></pre></div><p>This is useful for input data that contains many backslash characters, such as web log data.</p><p><strong>Parent topic:</strong> <a href="./../../load/topics/g-escaping.html">Escaping</a></p>',13)]))}const g=a(o,[["render",i]]);export{u as __pageData,g as default};
