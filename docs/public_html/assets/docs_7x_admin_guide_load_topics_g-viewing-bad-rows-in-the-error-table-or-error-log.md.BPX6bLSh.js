import{_ as t,c as r,o,ag as a}from"./chunks/framework.Ds6Eueu6.js";const m=JSON.parse('{"title":"Viewing Bad Rows in the Error Log","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/load/topics/g-viewing-bad-rows-in-the-error-table-or-error-log.md","filePath":"docs/7x/admin_guide/load/topics/g-viewing-bad-rows-in-the-error-table-or-error-log.md"}'),n={name:"docs/7x/admin_guide/load/topics/g-viewing-bad-rows-in-the-error-table-or-error-log.md"};function i(d,e,s,l,h,g){return o(),r("div",null,e[0]||(e[0]=[a('<h1 id="viewing-bad-rows-in-the-error-log" tabindex="-1">Viewing Bad Rows in the Error Log <a class="header-anchor" href="#viewing-bad-rows-in-the-error-log" aria-label="Permalink to &quot;Viewing Bad Rows in the Error Log&quot;">â€‹</a></h1><hr><p>If you use single row error isolation (see <a href="./g-define-an-external-table-with-single-row-error-isolation.html">Define an External Table with Single Row Error Isolation</a> or <a href="./g-running-copy-in-single-row-error-isolation-mode.html">Running COPY in Single Row Error Isolation Mode</a>), any rows with formatting errors are logged internally by WarehousePG.</p><p>WarehousePG captures the following error information in a table format:</p><table tabindex="0"><thead><tr><th>column</th><th>type</th><th>description</th></tr></thead><tbody><tr><td>cmdtime</td><td>timestamptz</td><td>Timestamp when the error occurred.</td></tr><tr><td>relname</td><td>text</td><td>The name of the external table or the target table of a <code>COPY</code> command.</td></tr><tr><td>filename</td><td>text</td><td>The name of the load file that contains the error.</td></tr><tr><td>linenum</td><td>int</td><td>If <code>COPY</code> was used, the line number in the load file where the error occurred. For external tables using file:// protocol or gpfdist:// protocol and CSV format, the file name and line number is logged.</td></tr><tr><td>bytenum</td><td>int</td><td>For external tables with the gpfdist:// protocol and data in TEXT format: the byte offset in the load file where the error occurred. gpfdist parses TEXT files in blocks, so logging a line number is not possible. CSV files are parsed a line at a time so line number tracking is possible for CSV files.</td></tr><tr><td>errmsg</td><td>text</td><td>The error message text.</td></tr><tr><td>rawdata</td><td>text</td><td>The raw data of the rejected row.</td></tr><tr><td>rawbytes</td><td>bytea</td><td>In cases where there is a database encoding error (the client encoding used cannot be converted to a server-side encoding), it is not possible to log the encoding error as <em>rawdata</em>. Instead the raw bytes are stored and you will see the octal code for any non seven bit ASCII characters.</td></tr></tbody></table><p>You can use the WarehousePG built-in SQL function <code>gp_read_error_log()</code> to display formatting errors that are logged internally. For example, this command displays the error log information for the table <em>ext_expenses</em>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT gp_read_error_log(&#39;ext_expenses&#39;);</span></span></code></pre></div><p>For information about managing formatting errors that are logged internally, see the command <code>COPY</code> or <code>CREATE EXTERNAL TABLE</code> in the <em>WarehousePG Reference Guide</em>.</p><p><strong>Parent topic:</strong> <a href="./../../load/topics/g-handling-load-errors.html">Handling Load Errors</a></p>',9)]))}const p=t(n,[["render",i]]);export{m as __pageData,p as default};
