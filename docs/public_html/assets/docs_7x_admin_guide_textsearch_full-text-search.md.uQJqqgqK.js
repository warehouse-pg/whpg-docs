import{_ as t,c as r,o as a,ag as s}from"./chunks/framework.Ds6Eueu6.js";const f=JSON.parse('{"title":"Using Full Text Search","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/textsearch/full-text-search.md","filePath":"docs/7x/admin_guide/textsearch/full-text-search.md"}'),o={name:"docs/7x/admin_guide/textsearch/full-text-search.md"};function i(n,e,h,c,l,u){return a(),r("div",null,e[0]||(e[0]=[s('<h1 id="using-full-text-search" tabindex="-1">Using Full Text Search <a class="header-anchor" href="#using-full-text-search" aria-label="Permalink to &quot;Using Full Text Search&quot;">â€‹</a></h1><hr><p>WarehousePG provides data types, functions, operators, index types, and configurations for querying natural language documents.</p><ul><li><strong><a href="./../textsearch/intro.html">About Full Text Search</a></strong><br> This topic provides an overview of WarehousePG full text search, basic text search expressions, configuring, and customizing text search. WarehousePG full text search is compared with WarehousePG Text.</li><li><strong><a href="./../textsearch/tables-indexes.html">Searching Text in Database Tables</a></strong><br> This topic shows how to use text search operators to search database tables and how to create indexes to speed up text searches.</li><li><strong><a href="./../textsearch/controlling.html">Controlling Text Search</a></strong><br> This topic shows how to create search and query vectors, how to rank search results, and how to highlight search terms in the results of text search queries.</li><li><strong><a href="./../textsearch/features.html">Additional Text Search Features</a></strong><br> WarehousePG has additional functions and operators you can use to manipulate search and query vectors, and to rewrite search queries.</li><li><strong><a href="./../textsearch/parsers.html">Text Search Parsers</a></strong><br> This topic describes the types of tokens the WarehousePG text search parser produces from raw text.</li><li><strong><a href="./../textsearch/dictionaries.html">Text Search Dictionaries</a></strong><br> Tokens produced by the WarehousePG full text search parser are passed through a chain of dictionaries to produce a normalized term or &quot;lexeme&quot;. Different kinds of dictionaries are available to filter and transform tokens in different ways and for different languages.</li><li><strong><a href="./../textsearch/configuration.html">Text Search Configuration Example</a></strong><br> This topic shows how to create a customized text search configuration to process document and query text.</li><li><strong><a href="./../textsearch/testing.html">Testing and Debugging Text Search</a></strong><br> This topic introduces the WarehousePG functions you can use to test and debug a search configuration or the individual parser and dictionaries specified in a configuration.</li><li><strong><a href="./../textsearch/gist-gin.html">GiST and GIN Indexes for Text Search</a></strong><br> This topic describes and compares the WarehousePG index types that are used for full text searching.</li><li><strong><a href="./../textsearch/psql-support.html">psql Support</a></strong><br> The psql command-line utility provides a meta-command to display information about WarehousePG full text search configurations.</li><li><strong><a href="./../textsearch/limitations.html">Limitations</a></strong><br> This topic lists limitations and maximums for WarehousePG full text search objects.</li></ul><p><strong>Parent topic:</strong> <a href="./../query/topics/query.html">SQL: Querying Data</a></p>',5)]))}const g=t(o,[["render",i]]);export{f as __pageData,g as default};
