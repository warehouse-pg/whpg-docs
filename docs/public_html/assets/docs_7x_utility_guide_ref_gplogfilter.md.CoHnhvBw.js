import{_ as t,c as s,o as i,ag as a}from"./chunks/framework.Ds6Eueu6.js";const h=JSON.parse('{"title":"gplogfilter","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/utility_guide/ref/gplogfilter.md","filePath":"docs/7x/utility_guide/ref/gplogfilter.md"}'),n={name:"docs/7x/utility_guide/ref/gplogfilter.md"};function o(l,e,p,r,d,c){return i(),s("div",null,e[0]||(e[0]=[a(`<h1 id="gplogfilter" tabindex="-1">gplogfilter <a class="header-anchor" href="#gplogfilter" aria-label="Permalink to &quot;gplogfilter&quot;">​</a></h1><p>Searches through WarehousePG log files for specified entries.</p><h2 id="synopsis" tabindex="-1"><a id="section2"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;section2&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gplogfilter [&lt;timestamp_options&gt;] [&lt;pattern_options&gt;] </span></span>
<span class="line"><span>     [&lt;output_options&gt;] [&lt;input_options&gt;] [&lt;input_file&gt;] </span></span>
<span class="line"><span></span></span>
<span class="line"><span>gplogfilter --help </span></span>
<span class="line"><span></span></span>
<span class="line"><span>gplogfilter --version</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="section3"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;section3&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p>The <code>gplogfilter</code> utility can be used to search through a WarehousePG log file for entries matching the specified criteria. If an input file is not supplied, then <code>gplogfilter</code> will use the <code>$COORDINATOR_DATA_DIRECTORY</code> environment variable to locate the WarehousePG coordinator log file in the standard logging location. To read from standard input, use a dash (<code>-</code>) as the input file name. Input files may be compressed using <code>gzip</code>. In an input file, a log entry is identified by its timestamp in <code>YYYY-MM-DD [hh:mm[:ss]]</code> format.</p><p>You can also use <code>gplogfilter</code> to search through all segment log files at once by running it through the <a href="./gpssh.html">gpssh</a> utility. For example, to display the last three lines of each segment log file:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpssh -f seg_host_file</span></span>
<span class="line"><span>=&gt; source /usr/local/greenplum-db/greenplum_path.sh</span></span>
<span class="line"><span>=&gt; gplogfilter -n 3 /gpdata/*/log/gpdb*.csv</span></span></code></pre></div><p>By default, the output of <code>gplogfilter</code> is sent to standard output. Use the <code>-o</code> option to send the output to a file or a directory. If you supply an output file name ending in <code>.gz</code>, the output file will be compressed by default using maximum compression. If the output destination is a directory, the output file is given the same name as the input file.</p><h2 id="options" tabindex="-1"><a id="section4"></a>Options <a class="header-anchor" href="#options" aria-label="Permalink to &quot;&lt;a id=&quot;section4&quot;&gt;&lt;/a&gt;Options&quot;">​</a></h2><p><strong>Timestamp Options</strong></p><p>-b datetime | --begin=datetime : Specifies a starting date and time to begin searching for log entries in the format of <code>YYYY-MM-DD [hh:mm[:ss]]</code>.</p><p>: If a time is specified, the date and time must be enclosed in either single or double quotes. This example encloses the date and time in single quotes:</p><p>: \`\`\` gplogfilter -b &#39;2013-05-23 14:33&#39;</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>-e datetime \\| --end=datetime</span></span>
<span class="line"><span>:   Specifies an ending date and time to stop searching for log entries in the format of \`YYYY-MM-DD [hh:mm[:ss]]\`.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>:   If a time is specified, the date and time must be enclosed in either single or double quotes. This example encloses the date and time in single quotes:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>:   \`\`\`</span></span>
<span class="line"><span>gplogfilter -e &#39;2013-05-23 14:33&#39;</span></span></code></pre></div><p>-d&lt;time&gt; | --duration=&lt;time&gt; : Specifies a time duration to search for log entries in the format of <code>[hh][:mm[:ss]]</code>. If used without either the <code>-b</code> or <code>-e</code> option, will use the current time as a basis.</p><p><strong>Pattern Matching Options</strong></p><p>-c i [gnore] | r [espect] | --case=i [gnore] | r [espect] : Matching of alphabetic characters is case sensitive by default unless proceeded by the <code>--case=ignore</code> option.</p><p>-C &#39;string&#39; | --columns=&#39;string&#39; : Selects specific columns from the log file. Specify the desired columns as a comma-delimited string of column numbers beginning with 1, where the second column from left is 2, the third is 3, and so on. See &quot;Viewing the Database Server Log Files&quot; in the <em>WarehousePG Administrator Guide</em> for details about the log file format and for a list of the available columns and their associated number.</p><p>-f &#39;string&#39; | --find=&#39;string&#39; : Finds the log entries containing the specified string.</p><p>-F &#39;string&#39; | --nofind=&#39;string&#39; : Rejects the log entries containing the specified string.</p><p>-m regex | --match=regex : Finds log entries that match the specified Python regular expression. See <a href="https://docs.python.org/library/re.html" target="_blank" rel="noreferrer">https://docs.python.org/library/re.html</a> for Python regular expression syntax.</p><p>-M regex | --nomatch=regex : Rejects log entries that match the specified Python regular expression. See <a href="https://docs.python.org/library/re.html" target="_blank" rel="noreferrer">https://docs.python.org/library/re.html</a> for Python regular expression syntax.</p><p>-t | --trouble : Finds only the log entries that have <code>ERROR:</code>, <code>FATAL:</code>, or <code>PANIC:</code> in the first line.</p><p><strong>Output Options</strong></p><p>-n &lt;integer&gt; | --tail=&lt;integer&gt; : Limits the output to the last &lt;integer&gt; of qualifying log entries found.</p><p>-s &lt;offset&gt; [limit] | --slice=&lt;offset&gt; [limit] : From the list of qualifying log entries, returns the &lt;limit&gt; number of entries starting at the &lt;offset&gt; entry number, where an &lt;offset&gt; of zero (<code>0</code>) denotes the first entry in the result set and an &lt;offset&gt; of any number greater than zero counts back from the end of the result set.</p><p>-o &lt;output_file&gt; | --out=&lt;output_file&gt; : Writes the output to the specified file or directory location instead of <code>STDOUT</code>.</p><p>-z 0-9 | --zip=0-9 : Compresses the output file to the specified compression level using <code>gzip</code>, where <code>0</code> is no compression and <code>9</code> is maximum compression. If you supply an output file name ending in <code>.gz</code>, the output file will be compressed by default using maximum compression.</p><p>-a | --append : If the output file already exists, appends to the file instead of overwriting it.</p><p><strong>Input Options</strong></p><p>input_file : The name of the input log file(s) to search through. If an input file is not supplied, <code>gplogfilter</code> will use the <code>$COORDINATOR_DATA_DIRECTORY</code> environment variable to locate the WarehousePG coordinator log file. To read from standard input, use a dash (<code>-</code>) as the input file name.</p><p>-u | --unzip : Uncompress the input file using <code>gunzip</code>. If the input file name ends in <code>.gz</code>, it will be uncompressed by default.</p><p>--help : Displays the online help.</p><p>--version : Displays the version of this utility.</p><h2 id="examples" tabindex="-1"><a id="section9"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;section9&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>Display the last three error messages in the coordinator log file:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gplogfilter -t -n 3</span></span></code></pre></div><p>Display all log messages in the coordinator log file timestamped in the last 10 minutes:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gplogfilter -d :10</span></span></code></pre></div><p>Display log messages in the coordinator log file containing the string <code>|con6 cmd11|</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gplogfilter -f &#39;|con6 cmd11|&#39;</span></span></code></pre></div><p>Using <a href="./gpssh.html">gpssh</a>, run <code>gplogfilter</code> on the segment hosts and search for log messages in the segment log files containing the string <code>con6</code> and save output to a file.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpssh -f seg_hosts_file -e &#39;source </span></span>
<span class="line"><span>/usr/local/greenplum-db/greenplum_path.sh ; gplogfilter -f </span></span>
<span class="line"><span>con6 /gpdata/*/log/gpdb*.csv&#39; &gt; seglog.out</span></span></code></pre></div><h2 id="see-also" tabindex="-1"><a id="section10"></a>See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;&lt;a id=&quot;section10&quot;&gt;&lt;/a&gt;See Also&quot;">​</a></h2><p><a href="./gpssh.html">gpssh</a>, <a href="./gpsync.html">gpsync</a></p>`,46)]))}const u=t(n,[["render",o]]);export{h as __pageData,u as default};
