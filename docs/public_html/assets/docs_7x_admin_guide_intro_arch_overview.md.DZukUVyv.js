import{_ as t}from"./chunks/standby_coordinator.D0zdgToC.js";import{_ as a}from"./chunks/group-mirroring.um3lxUQa.js";import{_ as o,a as r,b as s,c as n}from"./chunks/multi_switch_arch.DAghsTGY.js";import{_ as i}from"./chunks/ext_tables_multinic.CSkYAbUg.js";import{_ as h}from"./chunks/ext_tables.BRbN9lXc.js";import{_ as c,c as l,o as d,ag as u}from"./chunks/framework.Ds6Eueu6.js";const m="/assets/gp-architecture.C-glfoTa.png",p="/assets/cc_arch_gpdb.D4-dOLXj.png",x=JSON.parse('{"title":"About the WarehousePG Architecture","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/intro/arch_overview.md","filePath":"docs/7x/admin_guide/intro/arch_overview.md"}'),g={name:"docs/7x/admin_guide/intro/arch_overview.md"};function f(y,e,b,w,P,v){return d(),l("div",null,e[0]||(e[0]=[u('<h1 id="about-the-warehousepg-architecture" tabindex="-1">About the WarehousePG Architecture <a class="header-anchor" href="#about-the-warehousepg-architecture" aria-label="Permalink to &quot;About the WarehousePG Architecture&quot;">​</a></h1><hr><p>WarehousePG is a massively parallel processing (MPP) database server with an architecture specially designed to manage large-scale analytic data warehouses and business intelligence workloads.</p><p>MPP (also known as a <em>shared nothing</em> architecture) refers to systems with two or more processors that cooperate to carry out an operation, each processor with its own memory, operating system and disks. WarehousePG uses this high-performance system architecture to distribute the load of multi-terabyte data warehouses, and can use all of a system&#39;s resources in parallel to process a query.</p><p>WarehousePG is based on PostgreSQL open-source technology. It is essentially several PostgreSQL disk-oriented database instances acting together as one cohesive database management system (DBMS). It is based on PostgreSQL 12, and in most cases is very similar to PostgreSQL with regard to SQL support, features, configuration options, and end-user functionality. Database users interact with WarehousePG as they would with a regular PostgreSQL DBMS.</p><p>WarehousePG can use the append-optimized (AO) storage format for bulk loading and reading of data, and provides performance advantages over HEAP tables. Append-optimized storage provides checksums for data protection, compression and row/column orientation. Both row-oriented or column-oriented append-optimized tables can be compressed.</p><p>The main differences between WarehousePG and PostgreSQL are as follows:</p><ul><li>GPORCA is leveraged for query planning, in addition to the Postgres-based planner.</li><li>WarehousePG can use append-optimized storage.</li><li>WarehousePG has the option to use column storage, data that is logically organized as a table, using rows and columns that are physically stored in a column-oriented format, rather than as rows. Column storage can only be used with append-optimized tables. Column storage is compressible. It also can provide performance improvements as you only need to return the columns of interest to you. All compression algorithms can be used with either row or column-oriented tables, but Run-Length Encoded (RLE) compression can only be used with column-oriented tables. WarehousePG provides compression on all Append-Optimized tables that use column storage.</li></ul><p>The internals of PostgreSQL have been modified or supplemented to support the parallel structure of WarehousePG. For example, the system catalog, optimizer, query executor, and transaction manager components have been modified and enhanced to be able to run queries simultaneously across all of the parallel PostgreSQL database instances. The WarehousePG <em>interconnect</em> (the networking layer) enables communication between the distinct PostgreSQL instances and allows the system to behave as one logical database.</p><p>WarehousePG also can use declarative partitions and sub-partitions to implicitly generate partition constraints.</p><p>WarehousePG also includes features designed to optimize PostgreSQL for business intelligence (BI) workloads. For example, WarehousePG has added parallel data loading (external tables), resource management, query optimizations, and storage enhancements, which are not found in standard PostgreSQL. Many features and optimizations developed by WarehousePG make their way into the PostgreSQL community. For example, table partitioning is a feature first developed by WarehousePG, and it is now in standard PostgreSQL.</p><p>WarehousePG queries use a Volcano-style query engine model, where the execution engine takes an execution plan and uses it to generate a tree of physical operators, evaluates tables through physical operators, and delivers results in a query response.</p><p>WarehousePG stores and processes large amounts of data by distributing the data and processing workload across several servers or <em>hosts</em>. WarehousePG is an <em>array</em> of individual databases based upon PostgreSQL 12 working together to present a single database image. The <em>coordinator</em> is the entry point to the WarehousePG cluster. It is the database instance to which clients connect and submit SQL statements. The coordinator coordinates its work with the other database instances in the system, called <em>segments</em>, which store and process the data.</p><p><img src="'+m+'" alt="High-Level WarehousePG Architecture" title="High-Level WarehousePG Architecture"></p><p>The following topics describe the components that make up a WarehousePG cluster and how they work together.</p><ul><li><a href="#arch_coordinator">About the WarehousePG Coordinator</a></li><li><a href="#arch_segments">About the WarehousePG Segments</a></li><li><a href="#arch_interconnect">About the WarehousePG Interconnect</a></li><li><a href="#topic13">About ETL Hosts for Data Loading</a></li><li><a href="#topic_e5t_whm_kbb">About WarehousePG Performance Monitoring</a></li></ul><h2 id="about-the-warehousepg-coordinator" tabindex="-1"><a id="arch_coordinator"></a>About the WarehousePG Coordinator <a class="header-anchor" href="#about-the-warehousepg-coordinator" aria-label="Permalink to &quot;&lt;a id=&quot;arch_coordinator&quot;&gt;&lt;/a&gt;About the WarehousePG Coordinator&quot;">​</a></h2><p>The WarehousePG coordinator is the entry to the WarehousePG cluster, accepting client connections and SQL queries, and distributing work to the segment instances.</p><p>WarehousePG end-users interact with WarehousePG (through the coordinator) as they would with a typical PostgreSQL database. They connect to the database using client programs such as <code>psql</code> or application programming interfaces (APIs) such as JDBC, ODBC or <a href="https://www.postgresql.org/docs/12/libpq.html" target="_blank" rel="noreferrer">libpq</a> (the PostgreSQL C API).</p><p>The coordinator is where the <em>global system catalog</em> resides. The global system catalog is the set of system tables that contain metadata about the WarehousePG cluster itself. The coordinator does not contain any user data; data resides only on the <em>segments</em>. The coordinator authenticates client connections, processes incoming SQL commands, distributes workloads among segments, coordinates the results returned by each segment, and presents the final results to the client program.</p><p>WarehousePG uses Write-Ahead Logging (WAL) for coordinator/standby coordinator mirroring. In WAL-based logging, all modifications are written to the log before being applied, to ensure data integrity for any in-process operations.</p><h3 id="coordinator-redundancy" tabindex="-1"><a id="topic3"></a>Coordinator Redundancy <a class="header-anchor" href="#coordinator-redundancy" aria-label="Permalink to &quot;&lt;a id=&quot;topic3&quot;&gt;&lt;/a&gt;Coordinator Redundancy&quot;">​</a></h3><p>You may optionally deploy a <em>backup</em> or <em>mirror</em> of the coordinator instance. A backup coordinator host serves as a <em>warm standby</em> if the primary coordinator host becomes nonoperational. You can deploy the standby coordinator on a designated redundant coordinator host or on one of the segment hosts.</p><p>The standby coordinator is kept up to date by a transaction log replication process, which runs on the standby coordinator host and synchronizes the data between the primary and standby coordinator hosts. If the primary coordinator fails, the log replication process shuts down, and an administrator can activate the standby coordinator in its place. When the standby coordinator is active, the replicated logs are used to reconstruct the state of the coordinator host at the time of the last successfully committed transaction.</p><p>Since the coordinator does not contain any user data, only the system catalog tables need to be synchronized between the primary and backup copies. When these tables are updated, changes automatically copy over to the standby coordinator so it is always synchronized with the primary.</p><p><img src="'+t+'" alt="Coordinator Mirroring in WarehousePG" title="Coordinator Mirroring in WarehousePG"></p><h2 id="about-the-warehousepg-segments" tabindex="-1"><a id="arch_segments"></a>About the WarehousePG Segments <a class="header-anchor" href="#about-the-warehousepg-segments" aria-label="Permalink to &quot;&lt;a id=&quot;arch_segments&quot;&gt;&lt;/a&gt;About the WarehousePG Segments&quot;">​</a></h2><p>WarehousePG segment instances are independent PostgreSQL databases that each store a portion of the data and perform the majority of query processing.</p><p>When a user connects to the database via the WarehousePG coordinator and issues a query, processes are created in each segment database to handle the work of that query. For more information about query processes, see <a href="./../query/topics/parallel-proc.html">About WarehousePG Query Processing</a>.</p><p>User-defined tables and their indexes are distributed across the available segments in a WarehousePG cluster; each segment contains a distinct portion of data. The database server processes that serve segment data run under the corresponding segment instances. Users interact with segments in a WarehousePG cluster through the coordinator.</p><p>A server that runs a segment instance is called a <em>segment host</em>. A segment host typically runs from two to eight WarehousePG segments, depending on the CPU cores, RAM, storage, network interfaces, and workloads. Segment hosts are expected to be identically configured. The key to obtaining the best performance from WarehousePG is to distribute data and workloads <em>evenly</em> across a large number of equally capable segments so that all segments begin working on a task simultaneously and complete their work at the same time.</p><h3 id="segment-redundancy" tabindex="-1"><a id="topic5"></a>Segment Redundancy <a class="header-anchor" href="#segment-redundancy" aria-label="Permalink to &quot;&lt;a id=&quot;topic5&quot;&gt;&lt;/a&gt;Segment Redundancy&quot;">​</a></h3><p>When you deploy your WarehousePG cluster, you have the option to configure <em>mirror</em> segments. Mirror segments allow database queries to fail over to a backup segment if the primary segment becomes unavailable. Mirroring is a requirement for WarehousePG-supported production WarehousePG clusters.</p><p>A mirror segment must always reside on a different host than its primary segment. Mirror segments can be arranged across the hosts in the system in one of two standard configurations, or in a custom configuration you design. The default configuration, called <em>group</em> mirroring, places the mirror segments for all primary segments on one other host. Another option, called <em>spread</em> mirroring, spreads mirrors for each host&#39;s primary segments over the remaining hosts. Spread mirroring requires that there be more hosts in the system than there are primary segments on the host. On hosts with multiple network interfaces, the primary and mirror segments are distributed equally among the interfaces. The following figure shows how table data is distributed across the segments when the default group mirroring option is configured.</p><p><img src="'+a+'" alt="Data Mirroring in WarehousePG" title="Data Mirroring in WarehousePG"></p><h4 id="segment-failover-and-recovery" tabindex="-1"><a id="topic6"></a>Segment Failover and Recovery <a class="header-anchor" href="#segment-failover-and-recovery" aria-label="Permalink to &quot;&lt;a id=&quot;topic6&quot;&gt;&lt;/a&gt;Segment Failover and Recovery&quot;">​</a></h4><p>When mirroring is enabled in a WarehousePG cluster, the system automatically fails over to the mirror copy if a primary copy becomes unavailable. A WarehousePG cluster can remain operational if a segment instance or host goes down only if all portions of data are available on the remaining active segments.</p><p>If the coordinator cannot connect to a segment instance, it marks that segment instance as <em>invalid</em> in the WarehousePG cluster catalog. The segment instance remains invalid and out of operation until an administrator brings that segment back online. An administrator can recover a failed segment while the system is up and running. The recovery process copies over only the changes that were missed while the segment was nonoperational.</p><p>If you do not have mirroring enabled and a segment becomes invalid, the system automatically shuts down. An administrator must recover all failed segments before operations can continue.</p><h3 id="example-segment-host-hardware-stack" tabindex="-1"><a id="topic7"></a>Example Segment Host Hardware Stack <a class="header-anchor" href="#example-segment-host-hardware-stack" aria-label="Permalink to &quot;&lt;a id=&quot;topic7&quot;&gt;&lt;/a&gt;Example Segment Host Hardware Stack&quot;">​</a></h3><p>Regardless of the hardware platform you choose, a production WarehousePG processing node (a segment host) is typically configured as described in this section.</p><p>The segment hosts do the majority of database processing, so the segment host servers are configured in order to achieve the best performance possible from your WarehousePG cluster. WarehousePG&#39;s performance will be as fast as the slowest segment server in the array. Therefore, it is important to ensure that the underlying hardware and operating systems that are running WarehousePG are all running at their optimal performance level. It is also advised that all segment hosts in a WarehousePG cluster have identical hardware resources and configurations.</p><p>Segment hosts should also be dedicated to WarehousePG operations only. To get the best query performance, you do not want WarehousePG competing with other applications for machine or network resources.</p><p>The following diagram shows an example WarehousePG segment host hardware stack. The number of effective CPUs on a host is the basis for determining how many primary WarehousePG segment instances to deploy per segment host. This example shows a host with two effective CPUs (one dual-core CPU). Note that there is one primary segment instance (or primary/mirror pair if using mirroring) per CPU core.</p><p><img src="'+o+'" alt="Example WarehousePG Segment Host Configuration" title="Example WarehousePG Segment Host Configuration"></p><h3 id="example-segment-disk-layout" tabindex="-1"><a id="topic8"></a>Example Segment Disk Layout <a class="header-anchor" href="#example-segment-disk-layout" aria-label="Permalink to &quot;&lt;a id=&quot;topic8&quot;&gt;&lt;/a&gt;Example Segment Disk Layout&quot;">​</a></h3><p>Each CPU is typically mapped to a logical disk. A logical disk consists of one primary file system (and optionally a mirror file system) accessing a pool of physical disks through an I/O channel or disk controller. The logical disk and file system are provided by the operating system. Most operating systems provide the ability for a logical disk drive to use groups of physical disks arranged in RAID arrays.</p><p><img src="'+r+'" alt="Logical Disk Layout in WarehousePG" title="Logical Disk Layout in WarehousePG"></p><p>Depending on the hardware platform you choose, different RAID configurations offer different performance and capacity levels. WarehousePG supports and certifies a number of reference hardware platforms and operating systems. Check with your sales account representative for the recommended configuration on your chosen platform.</p><h2 id="about-the-warehousepg-interconnect" tabindex="-1"><a id="arch_interconnect"></a>About the WarehousePG Interconnect <a class="header-anchor" href="#about-the-warehousepg-interconnect" aria-label="Permalink to &quot;&lt;a id=&quot;arch_interconnect&quot;&gt;&lt;/a&gt;About the WarehousePG Interconnect&quot;">​</a></h2><p>The interconnect is the networking layer of the WarehousePG architecture.</p><p>The <em>interconnect</em> refers to the inter-process communication between segments and the network infrastructure on which this communication relies. The WarehousePG interconnect uses a standard Ethernet switching fabric. For performance reasons, a 10-Gigabit system, or faster, is recommended.</p><p>By default, the interconnect uses User Datagram Protocol with flow control (UDPIFC) for interconnect traffic to send messages over the network. The WarehousePG software performs packet verification beyond what is provided by UDP. This means the reliability is equivalent to Transmission Control Protocol (TCP), and the performance and scalability exceeds TCP. If the interconnect is changed to TCP, WarehousePG has a scalability limit of 1000 segment instances. With UDPIFC as the default protocol for the interconnect, this limit is not applicable.</p><h3 id="interconnect-redundancy" tabindex="-1"><a id="topic10"></a>Interconnect Redundancy <a class="header-anchor" href="#interconnect-redundancy" aria-label="Permalink to &quot;&lt;a id=&quot;topic10&quot;&gt;&lt;/a&gt;Interconnect Redundancy&quot;">​</a></h3><p>A highly available interconnect can be achieved by deploying dual 10 Gigabit Ethernet switches on your network, and redundant 10 Gigabit connections to the WarehousePG coordinator and segment host servers.</p><h3 id="network-interface-configuration" tabindex="-1"><a id="topic11"></a>Network Interface Configuration <a class="header-anchor" href="#network-interface-configuration" aria-label="Permalink to &quot;&lt;a id=&quot;topic11&quot;&gt;&lt;/a&gt;Network Interface Configuration&quot;">​</a></h3><p>A segment host typically has multiple network interfaces designated to WarehousePG interconnect traffic. The coordinator host typically has additional external network interfaces in addition to the interfaces used for interconnect traffic.</p><p>Depending on the number of interfaces available, you will want to distribute interconnect network traffic across the number of available interfaces. This is done by assigning segment instances to a particular network interface and ensuring that the primary segments are evenly balanced over the number of available interfaces.</p><p>This is done by creating separate host address names for each network interface. For example, if a host has four network interfaces, then it would have four corresponding host addresses, each of which maps to one or more primary segment instances. The <code>/etc/hosts</code> file should be configured to contain not only the host name of each machine, but also all interface host addresses for all of the WarehousePG hosts (coordinator, standby coordinator, segments, and ETL hosts).</p><p>With this configuration, the operating system automatically selects the best path to the destination. WarehousePG automatically balances the network destinations to maximize parallelism.</p><p><img src="'+s+'" alt="Example Network Interface Architecture" title="Example Network Interface Architecture"></p><h3 id="switch-configuration" tabindex="-1"><a id="topic12"></a>Switch Configuration <a class="header-anchor" href="#switch-configuration" aria-label="Permalink to &quot;&lt;a id=&quot;topic12&quot;&gt;&lt;/a&gt;Switch Configuration&quot;">​</a></h3><p>When using multiple 10 Gigabit Ethernet switches within your WarehousePG cluster, evenly divide the number of subnets between each switch. In this example configuration, if we had two switches, NICs 1 and 2 on each host would use switch 1 and NICs 3 and 4 on each host would use switch 2. For the coordinator host, the host name bound to NIC 1 (and therefore using switch 1) is the effective coordinator host name for the array. Therefore, if deploying a warm standby coordinator for redundancy purposes, the standby coordinator should map to a NIC that uses a different switch than the primary coordinator.</p><p><img src="'+n+'" alt="Example Switch Configuration" title="Example Switch Configuration"></p><h2 id="about-etl-hosts-for-data-loading" tabindex="-1"><a id="topic13"></a>About ETL Hosts for Data Loading <a class="header-anchor" href="#about-etl-hosts-for-data-loading" aria-label="Permalink to &quot;&lt;a id=&quot;topic13&quot;&gt;&lt;/a&gt;About ETL Hosts for Data Loading&quot;">​</a></h2><p>WarehousePG supports fast, parallel data loading with its external tables feature. By using external tables in conjunction with WarehousePG&#39;s parallel file server (<code>gpfdist</code>), administrators can achieve maximum parallelism and load bandwidth from their WarehousePG cluster. Many production systems deploy designated ETL servers for data loading purposes. These machines run the WarehousePG parallel file server (<code>gpfdist</code>), but not WarehousePG instances.</p><p>One advantage of using the <code>gpfdist</code> file server program is that it ensures that all of the segments in your WarehousePG cluster are fully utilized when reading from external table data files.</p><p>The <code>gpfdist</code> program can serve data to the segment instances at an average rate of about 350 MB/s for delimited text formatted files and 200 MB/s for CSV formatted files. Therefore, you should consider the following options when running <code>gpfdist</code> in order to maximize the network bandwidth of your ETL systems:</p><ul><li>If your ETL machine is configured with multiple network interface cards (NICs) as described in <a href="#topic11">Network Interface Configuration</a>, run one instance of <code>gpfdist</code> on your ETL host and then define your external table definition so that the host name of each NIC is declared in the <code>LOCATION</code> clause (see <code>CREATE EXTERNAL TABLE</code> in the <em>WarehousePG Reference Guide</em>). This allows network traffic between your WarehousePG segment hosts and your ETL host to use all NICs simultaneously.</li></ul><p><img src="'+i+'" alt="External Table Using Single gpfdist Instance with Multiple NICs" title="External Table Using Single gpfdist Instance with Multiple NICs"></p><ul><li>Run multiple <code>gpfdist</code> instances on your ETL host and divide your external data files equally between each instance. For example, if you have an ETL system with two network interface cards (NICs), then you could run two <code>gpfdist</code> instances on that machine to maximize your load performance. You would then divide the external table data files evenly between the two <code>gpfdist</code> programs.</li></ul><p><img src="'+h+'" alt="External Tables Using Multiple gpfdist Instances with Multiple NICs" title="External Tables Using Multiple gpfdist Instances with Multiple NICs"></p><p><img src="'+p+'" alt="WarehousePG Performance Monitoring Architecture" title="WarehousePG Performance Monitoring Architecture"></p>',73)]))}const A=c(g,[["render",f]]);export{x as __pageData,A as default};
