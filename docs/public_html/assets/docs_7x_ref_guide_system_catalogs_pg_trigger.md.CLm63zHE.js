import{_ as e,c as d,o as r,ag as o}from"./chunks/framework.Ds6Eueu6.js";const p=JSON.parse('{"title":"pg_trigger","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/system_catalogs/pg_trigger.md","filePath":"docs/7x/ref_guide/system_catalogs/pg_trigger.md"}'),i={name:"docs/7x/ref_guide/system_catalogs/pg_trigger.md"};function n(a,t,g,s,c,l){return r(),d("div",null,t[0]||(t[0]=[o('<h1 id="pg-trigger" tabindex="-1">pg_trigger <a class="header-anchor" href="#pg-trigger" aria-label="Permalink to &quot;pg_trigger&quot;">â€‹</a></h1><p>The <code>pg_trigger</code> system catalog table stores triggers on tables.</p><blockquote><p><strong>Note</strong> WarehousePG does not support triggers.</p></blockquote><table tabindex="0"><thead><tr><th>column</th><th>type</th><th>references</th><th>description</th></tr></thead><tbody><tr><td><code>oid</code></td><td>oid</td><td></td><td>The object ID</td></tr><tr><td><code>tgrelid</code></td><td>oid</td><td><em>pg_class.oid</em><br><br>Note that WarehousePG does not enforce referential integrity.</td><td>The table this trigger is on.</td></tr><tr><td><code>tgname</code></td><td>name</td><td></td><td>Trigger name (must be unique among triggers of same table).</td></tr><tr><td><code>tgfoid</code></td><td>oid</td><td><em>pg_proc.oid</em><br><br>Note that WarehousePG does not enforce referential integrity.</td><td>The function to be called.</td></tr><tr><td><code>tgtype</code></td><td>smallint</td><td></td><td>Bit mask identifying trigger conditions.</td></tr><tr><td><code>tgenabled</code></td><td>char</td><td></td><td>True if trigger is enabled.</td></tr><tr><td><code>tgisinternal</code></td><td>boolean</td><td></td><td>True if trigger is internally generated (usually, to enforce the constraint identified by tgconstraint).</td></tr><tr><td><code>tgconstrrelid</code></td><td>oid</td><td><em>pg_class.oid</em><br><br>Note that WarehousePG does not enforce referential integrity.</td><td>The table referenced by an referential integrity constraint.</td></tr><tr><td><code>tgconstrindid</code></td><td>oid</td><td><em>pg_class.oid</em></td><td>The index supporting a unique, primary key, or referential integrity constraint.</td></tr><tr><td><code>tgconstraint</code></td><td>oid</td><td><em>pg_constraint.oid</em></td><td>The <code>pg_constraint</code> entry associated with the trigger, if any.</td></tr><tr><td><code>tgdeferrable</code></td><td>boolean</td><td></td><td>True if deferrable.</td></tr><tr><td><code>tginitdeferred</code></td><td>boolean</td><td></td><td>True if initially deferred.</td></tr><tr><td><code>tgnargs</code></td><td>smallint</td><td></td><td>Number of argument strings passed to trigger function.</td></tr><tr><td><code>tgattr</code></td><td>int2vector</td><td></td><td>Currently not used.</td></tr><tr><td><code>tgargs</code></td><td>bytea</td><td></td><td>Argument strings to pass to trigger, each NULL-terminated.</td></tr><tr><td><code>tgqual</code></td><td>pg_node_tree</td><td></td><td>Expression tree (in <code>nodeToString()</code> representation) for the trigger&#39;s <code>WHEN</code> condition, or null if none.</td></tr><tr><td><code>tgoldtable</code></td><td>name</td><td></td><td>The name of the old transition table, or NULL if none.</td></tr><tr><td><code>tgnewtable</code></td><td>name</td><td></td><td>The name of the new transition table, or NULL if none.</td></tr></tbody></table><p><strong>Parent topic:</strong> <a href="./../system_catalogs/catalog_ref-html.html">System Catalogs Definitions</a></p>',5)]))}const m=e(i,[["render",n]]);export{p as __pageData,m as default};
