import{_ as t,c as a,o as s,ag as o}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"Starting and Stopping WarehousePG","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/managing/startstop.md","filePath":"docs/7x/admin_guide/managing/startstop.md"}'),n={name:"docs/7x/admin_guide/managing/startstop.md"};function i(c,e,p,r,d,l){return s(),a("div",null,e[0]||(e[0]=[o(`<h1 id="starting-and-stopping-warehousepg" tabindex="-1">Starting and Stopping WarehousePG <a class="header-anchor" href="#starting-and-stopping-warehousepg" aria-label="Permalink to &quot;Starting and Stopping WarehousePG&quot;">​</a></h1><hr><p>In a WarehousePG DBMS, the database server instances (the coordinator and all segments) are started or stopped across all of the hosts in the system in such a way that they can work together as a unified DBMS.</p><p>Because a WarehousePG cluster is distributed across many machines, the process for starting and stopping a WarehousePG cluster is different than the process for starting and stopping a regular PostgreSQL DBMS.</p><p>Use the <code>gpstart</code> and <code>gpstop</code> utilities to start and stop WarehousePG, respectively. These utilities are located in the $GPHOME/bin directory on your WarehousePG coordinator host.</p><blockquote><p><strong>Important</strong> Do not issue a <code>kill</code> command to end any Postgres process. Instead, use the database command <code>pg_cancel_backend()</code>.</p></blockquote><p>Issuing a <code>kill -9</code> or <code>kill -11</code> can introduce database corruption and prevent root cause analysis from being performed.</p><p>For information about <code>gpstart</code> and <code>gpstop</code>, see the <em>WarehousePG Utility Guide</em>.</p><p><strong>Parent topic:</strong> <a href="./../managing/managing.html">Managing a WarehousePG cluster</a></p><h2 id="starting-warehousepg" tabindex="-1"><a id="task_hkd_gzv_fp"></a>Starting WarehousePG <a class="header-anchor" href="#starting-warehousepg" aria-label="Permalink to &quot;&lt;a id=&quot;task_hkd_gzv_fp&quot;&gt;&lt;/a&gt;Starting WarehousePG&quot;">​</a></h2><p>Start an initialized WarehousePG cluster by running the <code>gpstart</code> utility on the coordinator instance.</p><p>Use the <code>gpstart</code> utility to start a WarehousePG cluster that has already been initialized by the <code>gpinitsystem</code> utility, but has been stopped by the <code>gpstop</code> utility. The <code>gpstart</code> utility starts WarehousePG by starting all the Postgres database instances on the WarehousePG cluster. <code>gpstart</code> orchestrates this process and performs the process in parallel.</p><p>Run <code>gpstart</code> on the coordinator host to start WarehousePG:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpstart</span></span></code></pre></div><h2 id="restarting-warehousepg" tabindex="-1"><a id="task_gpdb_restart"></a>Restarting WarehousePG <a class="header-anchor" href="#restarting-warehousepg" aria-label="Permalink to &quot;&lt;a id=&quot;task_gpdb_restart&quot;&gt;&lt;/a&gt;Restarting WarehousePG&quot;">​</a></h2><p>Stop the WarehousePG cluster and then restart it.</p><p>The <code>gpstop</code> utility with the <code>-r</code> option can stop and then restart WarehousePG after the shutdown completes.</p><p>To restart WarehousePG, enter the following command on the coordinator host:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpstop -r</span></span></code></pre></div><h2 id="reloading-configuration-file-changes-only" tabindex="-1"><a id="task_upload_config"></a>Reloading Configuration File Changes Only <a class="header-anchor" href="#reloading-configuration-file-changes-only" aria-label="Permalink to &quot;&lt;a id=&quot;task_upload_config&quot;&gt;&lt;/a&gt;Reloading Configuration File Changes Only&quot;">​</a></h2><p>Reload changes to WarehousePG configuration files without interrupting the system.</p><p>The <code>gpstop</code> utility can reload changes to the pg_hba.conf configuration file and to <em>runtime</em> parameters in the coordinator postgresql.conf file without service interruption. Active sessions pick up changes when they reconnect to the database. Many server configuration parameters require a full system restart (<code>gpstop -r</code>) to activate. For information about server configuration parameters, see the <em>WarehousePG Reference Guide</em>.</p><p>Reload configuration file changes without shutting down the WarehousePG cluster using the <code>gpstop</code> utility:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpstop -u</span></span></code></pre></div><h2 id="starting-the-coordinator-in-maintenance-mode" tabindex="-1"><a id="task_maint_mode"></a>Starting the Coordinator in Maintenance Mode <a class="header-anchor" href="#starting-the-coordinator-in-maintenance-mode" aria-label="Permalink to &quot;&lt;a id=&quot;task_maint_mode&quot;&gt;&lt;/a&gt;Starting the Coordinator in Maintenance Mode&quot;">​</a></h2><p>Start only the coordinator to perform maintenance or administrative tasks without affecting data on the segments.</p><p>Maintenance mode should only be used with direction from WarehousePG Technical Support. For example, you could connect to a database only on the coordinator instance in maintenance mode and edit system catalog settings. For more information about system catalog tables, see the <em>WarehousePG Reference Guide</em>.</p><ol><li><p>Run <code>gpstart</code> using the -m option:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpstart -m</span></span></code></pre></div></li><li><p>Connect to the coordinator in maintenance mode to do catalog maintenance. For example:</p><p><a id="kg155401"></a></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ PGOPTIONS=&#39;-c gp_role=utility&#39; psql postgres</span></span></code></pre></div></li><li><p>After completing your administrative tasks, stop the coordinator in maintenance mode. Then, restart it in production mode.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpstop -m</span></span>
<span class="line"><span>$ gpstart</span></span></code></pre></div><blockquote><p><strong>Caution</strong> Incorrect use of maintenance mode connections can result in an inconsistent system state. Only Technical Support should perform this operation.</p></blockquote></li></ol><h2 id="stopping-warehousepg" tabindex="-1"><a id="task_gpdb_stop"></a>Stopping WarehousePG <a class="header-anchor" href="#stopping-warehousepg" aria-label="Permalink to &quot;&lt;a id=&quot;task_gpdb_stop&quot;&gt;&lt;/a&gt;Stopping WarehousePG&quot;">​</a></h2><p>The <code>gpstop</code> utility stops or restarts your WarehousePG cluster and always runs on the coordinator host. When activated, <code>gpstop</code> stops all <code>postgres</code> processes in the system, including the coordinator and all segment instances. The <code>gpstop</code> utility uses a default of up to 64 parallel worker threads to bring down the Postgres instances that make up the WarehousePG cluster. The system waits for any active transactions to finish before shutting down. If after two minutes there are still active connections, <code>gpstop</code> will prompt you to either continue waiting in smart mode, stop in fast mode, or stop in immediate mode. To stop WarehousePG immediately, use fast mode.</p><blockquote><p><strong>Important</strong> Immediate shut down mode is not recommended. This mode stops all database processes without allowing the database server to complete transaction processing or clean up any temporary or in-process work files.</p></blockquote><ul><li><p>To stop WarehousePG:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpstop</span></span></code></pre></div></li><li><p>To stop WarehousePG in fast mode:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpstop -M fast</span></span></code></pre></div><p>By default, you are not allowed to shut down WarehousePG if there are any client connections to the database. Use the <code>-M fast</code> option to roll back all in progress transactions and terminate any connections before shutting down.</p></li></ul><h2 id="stopping-client-processes" tabindex="-1"><a id="topic13"></a>Stopping Client Processes <a class="header-anchor" href="#stopping-client-processes" aria-label="Permalink to &quot;&lt;a id=&quot;topic13&quot;&gt;&lt;/a&gt;Stopping Client Processes&quot;">​</a></h2><p>WarehousePG launches a new backend process for each client connection. A WarehousePG user with <code>SUPERUSER</code> privileges can cancel and terminate these client backend processes.</p><p>Canceling a backend process with the <code>pg_cancel_backend()</code> function ends a specific queued or active client query. Terminating a backend process with the <code>pg_terminate_backend()</code> function terminates a client connection to a database.</p><p>The <code>pg_cancel_backend()</code> function has two signatures:</p><ul><li><code>pg_cancel_backend( pid int4 )</code></li><li><code>pg_cancel_backend( pid int4, msg text )</code></li></ul><p>The <code>pg_terminate_backend()</code> function has two similar signatures:</p><ul><li><code>pg_terminate_backend( pid int4 )</code></li><li><code>pg_terminate_backend( pid int4, msg text )</code></li></ul><p>If you provide a <code>msg</code>, WarehousePG includes the text in the cancel message returned to the client. <code>msg</code> is limited to 128 bytes; WarehousePG truncates anything longer.</p><p>The <code>pg_cancel_backend()</code> and <code>pg_terminate_backend()</code> functions return <code>true</code> if successful, and <code>false</code> otherwise.</p><p>To cancel or terminate a backend process, you must first identify the process ID of the backend. You can obtain the process ID from the <code>pid</code> column of the <code>pg_stat_activity</code> view. For example, to view the process information associated with all running and queued queries:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=# SELECT usename, pid, waiting, state, query, datname</span></span>
<span class="line"><span>     FROM pg_stat_activity;</span></span></code></pre></div><p>Sample partial query output:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> usename |  pid     | waiting | state  |         query          | datname</span></span>
<span class="line"><span>---------+----------+---------+--------+------------------------+---------</span></span>
<span class="line"><span>  sammy  |   31861  |    f    | idle   | SELECT * FROM testtbl; | testdb</span></span>
<span class="line"><span>  billy  |   31905  |    t    | active | SELECT * FROM topten;  | testdb</span></span></code></pre></div><p>Use the output to identify the process id (<code>pid</code>) of the query or client connection.</p><p>For example, to cancel the waiting query identified in the sample output above and include <code>&#39;Admin canceled long-running query.&#39;</code> as the message returned to the client:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=# SELECT pg_cancel_backend(31905 ,&#39;Admin canceled long-running query.&#39;);</span></span>
<span class="line"><span>ERROR:  canceling statement due to user request: &quot;Admin canceled long-running query.&quot;</span></span></code></pre></div>`,48)]))}const g=t(n,[["render",i]]);export{u as __pageData,g as default};
