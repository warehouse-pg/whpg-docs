import{_ as t,c as a,o,ag as n}from"./chunks/framework.Ds6Eueu6.js";const p=JSON.parse('{"title":"SET CONSTRAINTS","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/sql_commands/SET_CONSTRAINTS.md","filePath":"docs/7x/ref_guide/sql_commands/SET_CONSTRAINTS.md"}'),s={name:"docs/7x/ref_guide/sql_commands/SET_CONSTRAINTS.md"};function i(c,e,d,r,h,l){return o(),a("div",null,e[0]||(e[0]=[n('<h1 id="set-constraints" tabindex="-1">SET CONSTRAINTS <a class="header-anchor" href="#set-constraints" aria-label="Permalink to &quot;SET CONSTRAINTS&quot;">​</a></h1><p>Sets constraint check timing for the current transaction.</p><blockquote><p><strong>Note</strong> Referential integrity syntax (foreign key constraints) is accepted but not enforced.</p></blockquote><h2 id="synopsis" tabindex="-1"><a id="section2"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;section2&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SET CONSTRAINTS { ALL | &lt;name&gt; [, ...] } { DEFERRED | IMMEDIATE }</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="section3"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;section3&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p><code>SET CONSTRAINTS</code> sets the behavior of constraint checking within the current transaction. <code>IMMEDIATE</code> constraints are checked at the end of each statement. <code>DEFERRED</code> constraints are not checked until transaction commit. Each constraint has its own <code>IMMEDIATE</code> or <code>DEFERRED</code> mode.</p><p>Upon creation, a constraint is given one of three characteristics: <code>DEFERRABLE INITIALLY DEFERRED</code>, <code>DEFERRABLE INITIALLY IMMEDIATE</code>, or <code>NOT DEFERRABLE</code>. The third class is always <code>IMMEDIATE</code> and is not affected by the <code>SET CONSTRAINTS</code> command. The first two classes start every transaction in the indicated mode, but their behavior can be changed within a transaction by <code>SET CONSTRAINTS</code>.</p><p><code>SET CONSTRAINTS</code> with a list of constraint names changes the mode of just those constraints (which must all be deferrable). Each constraint name can be schema-qualified. The current schema search path is used to find the first matching name if no schema name is specified. <code>SET CONSTRAINTS ALL</code> changes the mode of all deferrable constraints.</p><p>When <code>SET CONSTRAINTS</code> changes the mode of a constraint from <code>DEFERRED</code> to <code>IMMEDIATE</code>, the new mode takes effect retroactively: any outstanding data modifications that would have been checked at the end of the transaction are instead checked during the execution of the <code>SET CONSTRAINTS</code> command. If any such constraint is violated, the <code>SET CONSTRAINTS</code> fails (and does not change the constraint mode). Thus, <code>SET CONSTRAINTS</code> can be used to force checking of constraints to occur at a specific point in a transaction.</p><p>Currently, only <code>UNIQUE</code>, <code>PRIMARY KEY</code>, <code>REFERENCES</code> (foreign key), and <code>EXCLUDE</code> constraints are affected by this setting. <code>NOT NULL</code> and <code>CHECK</code> constraints are always checked immediately when a row is inserted or modified (<em>not</em> at the end of the statement). Uniqueness and exclusion constraints that have not been declared <code>DEFERRABLE</code> are also checked immediately.</p><p>The firing of triggers that are declared as &quot;constraint triggers&quot; is also controlled by this setting — they fire at the same time that the associated constraint should be checked.</p><h2 id="notes" tabindex="-1"><a id="section4"></a>Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;&lt;a id=&quot;section4&quot;&gt;&lt;/a&gt;Notes&quot;">​</a></h2><p>Because WarehousePG does not require constraint names to be unique within a schema (but only per-table), it is possible that there is more than one match for a specified constraint name. In this case <code>SET CONSTRAINTS</code> will act on all matches. For a non-schema-qualified name, once a match or matches have been found in some schema in the search path, schemas appearing later in the path are not searched.</p><p>This command only alters the behavior of constraints within the current transaction. Issuing this outside of a transaction block emits a warning and otherwise has no effect.</p><h2 id="compatibility" tabindex="-1"><a id="section5"></a>Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;&lt;a id=&quot;section5&quot;&gt;&lt;/a&gt;Compatibility&quot;">​</a></h2><p>This command complies with the behavior defined in the SQL standard, except for the limitation that, in WarehousePG, it does not apply to <code>NOT NULL</code> and <code>CHECK</code> constraints. Also, WarehousePG checks non-deferrable uniqueness constraints immediately, not at end of statement as the standard would suggest.</p><p><strong>Parent topic:</strong> <a href="./../sql_commands/sql_ref.html">SQL Commands</a></p>',18)]))}const T=t(s,[["render",i]]);export{p as __pageData,T as default};
