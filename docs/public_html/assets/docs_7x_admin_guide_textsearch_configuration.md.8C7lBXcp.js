import{_ as a,c as n,o as e,ag as t}from"./chunks/framework.Ds6Eueu6.js";const g=JSON.parse('{"title":"Text Search Configuration Example","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/textsearch/configuration.md","filePath":"docs/7x/admin_guide/textsearch/configuration.md"}'),i={name:"docs/7x/admin_guide/textsearch/configuration.md"};function p(o,s,c,l,r,d){return e(),n("div",null,s[0]||(s[0]=[t(`<h1 id="text-search-configuration-example" tabindex="-1">Text Search Configuration Example <a class="header-anchor" href="#text-search-configuration-example" aria-label="Permalink to &quot;Text Search Configuration Example&quot;">â€‹</a></h1><hr><p>This topic shows how to create a customized text search configuration to process document and query text.</p><p>A text search configuration specifies all options necessary to transform a document into a <code>tsvector</code>: the parser to use to break text into tokens, and the dictionaries to use to transform each token into a lexeme. Every call of <code>to_tsvector</code> or <code>to_tsquery</code> needs a text search configuration to perform its processing. The configuration parameter <a href="./../../ref_guide/config_params/guc-list.html">default_text_search_config</a> specifies the name of the default configuration, which is the one used by text search functions if an explicit configuration parameter is omitted. It can be set in <code>postgresql.conf</code> using the <code>gpconfig</code> command-line utility, or set for an individual session using the <code>SET</code> command.</p><p>Several predefined text search configurations are available, and you can create custom configurations easily. To facilitate management of text search objects, a set of SQL commands is available, and there are several psql commands that display information about text search objects (<a href="./psql-support.html">psql Support</a>).</p><p>As an example we will create a configuration <code>pg</code>, starting by duplicating the built-in <code>english</code> configuration:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TEXT SEARCH CONFIGURATION public.pg ( COPY = pg_catalog.english );</span></span></code></pre></div><p>We will use a PostgreSQL-specific synonym list and store it in <code>$SHAREDIR/tsearch_data/pg_dict.syn</code>. The file contents look like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>postgres    pg</span></span>
<span class="line"><span>pgsql       pg</span></span>
<span class="line"><span>postgresql  pg</span></span></code></pre></div><p>We define the synonym dictionary like this:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TEXT SEARCH DICTIONARY pg_dict (</span></span>
<span class="line"><span>    TEMPLATE = synonym,</span></span>
<span class="line"><span>    SYNONYMS = pg_dict</span></span>
<span class="line"><span>);</span></span></code></pre></div><p>Next we register the Ispell dictionary <code>english_ispell</code>, which has its own configuration files:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TEXT SEARCH DICTIONARY english_ispell (</span></span>
<span class="line"><span>    TEMPLATE = ispell,</span></span>
<span class="line"><span>    DictFile = english,</span></span>
<span class="line"><span>    AffFile = english,</span></span>
<span class="line"><span>    StopWords = english</span></span>
<span class="line"><span>);</span></span></code></pre></div><p>Now we can set up the mappings for words in configuration <code>pg</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER TEXT SEARCH CONFIGURATION pg</span></span>
<span class="line"><span>    ALTER MAPPING FOR asciiword, asciihword, hword_asciipart,</span></span>
<span class="line"><span>                      word, hword, hword_part</span></span>
<span class="line"><span>    WITH pg_dict, english_ispell, english_stem;</span></span></code></pre></div><p>We choose not to index or search some token types that the built-in configuration does handle:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER TEXT SEARCH CONFIGURATION pg</span></span>
<span class="line"><span>    DROP MAPPING FOR email, url, url_path, sfloat, float;</span></span></code></pre></div><p>Now we can test our configuration:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM ts_debug(&#39;public.pg&#39;, &#39;</span></span>
<span class="line"><span>PostgreSQL, the highly scalable, SQL compliant, open source object-relational</span></span>
<span class="line"><span>database management system, is now undergoing beta testing of the next</span></span>
<span class="line"><span>version of our software.</span></span>
<span class="line"><span>&#39;);</span></span></code></pre></div><p>The next step is to set the session to use the new configuration, which was created in the <code>public</code> schema:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; \\dF</span></span>
<span class="line"><span>   List of text search configurations</span></span>
<span class="line"><span> Schema  | Name | Description</span></span>
<span class="line"><span>---------+------+-------------</span></span>
<span class="line"><span> public  | pg   |</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SET default_text_search_config = &#39;public.pg&#39;;</span></span>
<span class="line"><span>SET</span></span>
<span class="line"><span></span></span>
<span class="line"><span>SHOW default_text_search_config;</span></span>
<span class="line"><span> default_text_search_config</span></span>
<span class="line"><span>----------------------------</span></span>
<span class="line"><span> public.pg</span></span></code></pre></div><p><strong>Parent topic:</strong> <a href="./../textsearch/full-text-search.html">Using Full Text Search</a></p>`,22)]))}const u=a(i,[["render",p]]);export{g as __pageData,u as default};
