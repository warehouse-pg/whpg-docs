import{_ as a,c as t,o,ag as n}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"CREATE FOREIGN DATA WRAPPER","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/sql_commands/CREATE_FOREIGN_DATA_WRAPPER.md","filePath":"docs/7x/ref_guide/sql_commands/CREATE_FOREIGN_DATA_WRAPPER.md"}'),i={name:"docs/7x/ref_guide/sql_commands/CREATE_FOREIGN_DATA_WRAPPER.md"};function s(r,e,p,d,c,l){return o(),t("div",null,e[0]||(e[0]=[n('<h1 id="create-foreign-data-wrapper" tabindex="-1">CREATE FOREIGN DATA WRAPPER <a class="header-anchor" href="#create-foreign-data-wrapper" aria-label="Permalink to &quot;CREATE FOREIGN DATA WRAPPER&quot;">​</a></h1><p>Defines a new foreign-data wrapper.</p><h2 id="synopsis" tabindex="-1"><a id="section2"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;section2&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE FOREIGN DATA WRAPPER &lt;name&gt;</span></span>\n<span class="line"><span>    [ HANDLER &lt;handler_function&gt; | NO HANDLER ]</span></span>\n<span class="line"><span>    [ VALIDATOR &lt;validator_function&gt; | NO VALIDATOR ]</span></span>\n<span class="line"><span>    [ OPTIONS ( [ mpp_execute { &#39;coordinator&#39; | &#39;any&#39; | &#39;all segments&#39; } [, ] ] &lt;option&gt; &#39;&lt;value&gt;&#39; [, ... ] ) ]</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="section3"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;section3&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p><code>CREATE FOREIGN DATA WRAPPER</code> creates a new foreign-data wrapper in the current database. The user who defines the foreign-data wrapper becomes its owner.</p><p>The foreign-data wrapper name must be unique within the database.</p><p>Only superusers can create foreign-data wrappers.</p><h2 id="parameters" tabindex="-1"><a id="section4"></a>Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;&lt;a id=&quot;section4&quot;&gt;&lt;/a&gt;Parameters&quot;">​</a></h2><p>name : The name of the foreign-data wrapper to create. The name must be unique within the database.</p><p>HANDLER handler_function : The name of a previously registered function that WarehousePG calls to retrieve the execution functions for foreign tables. hander_function must take no arguments, and its return type must be <code>fdw_handler</code>. : It is possible to create a foreign-data wrapper with no handler function, but you can only declare, not access, foreign tables using such a wrapper.</p><p>VALIDATOR validator_function : The name of a previously registered function that WarehousePG calls to check the generic options provided to the foreign-data wrapper. This function also checks the options for foreign servers, user mappings, and foreign tables that use the foreign-data wrapper. If no validator function or <code>NO VALIDATOR</code> is specified, WarehousePG does not check options at creation time. (Depending upon the implementation, foreign-data wrappers may ignore or reject invalid options at runtime.) : validator_function must take two arguments: one of type <code>text[]</code>, which contains the array of options as stored in the system catalogs, and one of type <code>oid</code>, which identifies the OID of the system catalog containing the options. : The return type is ignored; validator_function should report invalid options using the <code>ereport(ERROR)</code> function.</p><p>OPTIONS ( option &#39;value&#39; [, ... ] ) : The options for the new foreign-data wrapper. Option names must be unique. The option names and values are foreign-data wrapper-specific and are validated using the foreign-data wrappers&#39; validator_function.</p><p>mpp_execute { &#39;coordinator&#39; | &#39;any&#39; | &#39;all segments&#39; } : A WarehousePG-specific option that identifies the host from which the foreign-data wrapper reads or writes data:</p><pre><code>-   `coordinator` \\(the default\\)—Read or write data from the coordinator host.\n-   `any`—Read data from either the coordinator host or any one segment, depending on which path costs less.\n-   `all segments`—Read or write data from all segments. To support this option value, the foreign-data wrapper must have a policy that matches the segments to data.\n\n&gt; **Note** WarehousePG supports parallel writes to foreign tables only when you set `mpp_execute &#39;all segments&#39;`.\n\nSupport for the foreign-data wrapper `mpp_execute` option, and the specific modes, is foreign-data wrapper-specific.\n\nThe `mpp_execute` option can be specified in multiple commands: `CREATE FOREIGN TABLE`, `CREATE SERVER`, and `CREATE FOREIGN DATA WRAPPER`. The foreign table setting takes precedence over the foreign server setting, followed by the foreign-data wrapper setting.\n</code></pre><h2 id="notes" tabindex="-1"><a id="section5"></a>Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;&lt;a id=&quot;section5&quot;&gt;&lt;/a&gt;Notes&quot;">​</a></h2><p>The foreign-data wrapper functionality is still under development. Optimization of queries is primitive (and mostly left to the wrapper).</p><h2 id="examples" tabindex="-1"><a id="section6"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;section6&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>Create a useless foreign-data wrapper named <code>dummy</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE FOREIGN DATA WRAPPER dummy;</span></span></code></pre></div><p>Create a foreign-data wrapper named <code>file</code> with a handler function named <code>file_fdw_handler</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE FOREIGN DATA WRAPPER file HANDLER file_fdw_handler;</span></span></code></pre></div><p>Create a foreign-data wrapper named <code>mywrapper</code> that includes an option:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE FOREIGN DATA WRAPPER mywrapper OPTIONS (debug &#39;true&#39;);</span></span></code></pre></div><h2 id="compatibility" tabindex="-1"><a id="section7"></a>Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;&lt;a id=&quot;section7&quot;&gt;&lt;/a&gt;Compatibility&quot;">​</a></h2><p><code>CREATE FOREIGN DATA WRAPPER</code> conforms to ISO/IEC 9075-9 (SQL/MED), with the exception that the <code>HANDLER</code> and <code>VALIDATOR</code> clauses are extensions, and the standard clauses <code>LIBRARY</code> and <code>LANGUAGE</code> are not implemented in WarehousePG.</p><p>Note, however, that the SQL/MED functionality as a whole is not yet conforming.</p><h2 id="see-also" tabindex="-1"><a id="section8"></a>See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;&lt;a id=&quot;section8&quot;&gt;&lt;/a&gt;See Also&quot;">​</a></h2><p><a href="./ALTER_FOREIGN_DATA_WRAPPER.html">ALTER FOREIGN DATA WRAPPER</a>, <a href="./DROP_FOREIGN_DATA_WRAPPER.html">DROP FOREIGN DATA WRAPPER</a>, <a href="./CREATE_FOREIGN_TABLE.html">CREATE FOREIGN TABLE</a>, <a href="./CREATE_SERVER.html">CREATE SERVER</a>, <a href="./CREATE_USER_MAPPING.html">CREATE USER MAPPING</a></p><p><strong>Parent topic:</strong> <a href="./../sql_commands/sql_ref.html">SQL Commands</a></p>',30)]))}const m=a(i,[["render",s]]);export{u as __pageData,m as default};
