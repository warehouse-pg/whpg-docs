import{_ as t,c as d,o,ag as s}from"./chunks/framework.Ds6Eueu6.js";const b=JSON.parse('{"title":"pg_shdepend","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/system_catalogs/pg_shdepend.md","filePath":"docs/7x/ref_guide/system_catalogs/pg_shdepend.md"}'),a={name:"docs/7x/ref_guide/system_catalogs/pg_shdepend.md"};function n(r,e,c,i,h,p){return o(),d("div",null,e[0]||(e[0]=[s('<h1 id="pg-shdepend" tabindex="-1">pg_shdepend <a class="header-anchor" href="#pg-shdepend" aria-label="Permalink to &quot;pg_shdepend&quot;">​</a></h1><p>The <code>pg_shdepend</code> system catalog table records the dependency relationships between database objects and shared objects, such as roles. This information allows WarehousePG to ensure that those objects are unreferenced before attempting to delete them. See also <a href="./pg_depend.html">pg_depend</a>, which performs a similar function for dependencies involving objects within a single database. Unlike most system catalogs, <code>pg_shdepend</code> is shared across all databases of WarehousePG cluster: there is only one copy of <code>pg_shdepend</code> per system, not one per database.</p><p>In all cases, a <code>pg_shdepend</code> entry indicates that the referenced object may not be dropped without also dropping the dependent object. However, there are several subflavors identified by <code>deptype</code>:</p><ul><li><strong>SHARED_DEPENDENCY_OWNER (o)</strong> — The referenced object (which must be a role) is the owner of the dependent object.</li><li><strong>SHARED_DEPENDENCY_ACL (a)</strong> — The referenced object (which must be a role) is mentioned in the ACL (access control list) of the dependent object.</li><li><strong>SHARED_DEPENDENCY_PIN (p)</strong> — There is no dependent object; this type of entry is a signal that the system itself depends on the referenced object, and so that object must never be deleted. Entries of this type are created only by system initialization. The columns for the dependent object contain zeroes.</li></ul><table tabindex="0"><thead><tr><th>column</th><th>type</th><th>references</th><th>description</th></tr></thead><tbody><tr><td><code>dbid</code></td><td>oid</td><td>pg_database.oid</td><td>The OID of the database the dependent object is in, or zero for a shared object.</td></tr><tr><td><code>classid</code></td><td>oid</td><td>pg_class.oid</td><td>The OID of the system catalog the dependent object is in.</td></tr><tr><td><code>objid</code></td><td>oid</td><td>any OID column</td><td>The OID of the specific dependent object.</td></tr><tr><td><code>objsubid</code></td><td>integer</td><td></td><td>For a table column, this is the column number. For all other object types, this column is zero.</td></tr><tr><td><code>refclassid</code></td><td>oid</td><td>pg_class.oid</td><td>The OID of the system catalog the referenced object is in (must be a shared catalog).</td></tr><tr><td><code>refobjid</code></td><td>oid</td><td>any OID column</td><td>The OID of the specific referenced object.</td></tr><tr><td><code>deptype</code></td><td>char</td><td></td><td>A code defining the specific semantics of this dependency relationship.</td></tr></tbody></table><p><strong>Parent topic:</strong> <a href="./../system_catalogs/catalog_ref-html.html">System Catalogs Definitions</a></p>',6)]))}const f=t(a,[["render",n]]);export{b as __pageData,f as default};
