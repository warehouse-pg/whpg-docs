import{_ as a,c as s,o as t,ag as n}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"Determining the Query Optimizer that is Used","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/query/topics/query-piv-opt-fallback.md","filePath":"docs/7x/admin_guide/query/topics/query-piv-opt-fallback.md"}'),i={name:"docs/7x/admin_guide/query/topics/query-piv-opt-fallback.md"};function p(o,e,l,r,d,c){return t(),s("div",null,e[0]||(e[0]=[n(`<h1 id="determining-the-query-optimizer-that-is-used" tabindex="-1">Determining the Query Optimizer that is Used <a class="header-anchor" href="#determining-the-query-optimizer-that-is-used" aria-label="Permalink to &quot;Determining the Query Optimizer that is Used&quot;">​</a></h1><hr><p>When GPORCA is enabled (the default), you can determine if WarehousePG is using GPORCA or is falling back to the Postgres-based planner.</p><p>You can examine the <code>EXPLAIN</code> query plan for the query to determine which query optimizer was used by WarehousePG to run the query:</p><ul><li><p>The optimizer is listed at the end of the query plan. For example, when GPORCA generates the query plan, the query plan ends with:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> Optimizer: GPORCA</span></span></code></pre></div><p>When WarehousePG falls back to the Postgres-based planner to generate the plan, the query plan ends with:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> Optimizer: Postgres-based planner</span></span></code></pre></div></li><li><p>These plan items appear only in the <code>EXPLAIN</code> plan output generated by GPORCA. The items are not supported in a Postgres-based planner query plan.</p><ul><li>Assert operator</li><li>Sequence operator</li><li>Dynamic Index Scan</li><li>Dynamic Seq Scan</li></ul></li><li><p>When a query against a partitioned table is generated by GPORCA, the <code>EXPLAIN</code> plan displays only the number of partitions that are being eliminated is listed. The scanned partitions are not shown. The <code>EXPLAIN</code> plan generated by the Postgres-based planner lists the scanned partitions.</p></li></ul><p>The log file contains messages that indicate which query optimizer was used. If WarehousePG falls back to the Postgres-based planner, a message with <code>NOTICE</code> information is added to the log file that indicates the unsupported feature. Also, the label <code>Planner produced plan:</code> appears before the query in the query execution log message when WarehousePG falls back to the Postgres optimizer.</p><blockquote><p><strong>Note</strong> You can configure WarehousePG to display log messages on the psql command line by setting the WarehousePG server configuration parameter <code>client_min_messages</code> to <code>LOG</code>. See the <em>WarehousePG Reference Guide</em> for information about the parameter.</p></blockquote><p><strong>Parent topic:</strong> <a href="./../../query/topics/query-piv-optimizer.html">About GPORCA</a></p><h2 id="examples" tabindex="-1"><a id="topic_n4w_nb5_xr"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;topic_n4w_nb5_xr&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>This example shows the differences for a query that is run against partitioned tables when GPORCA is enabled.</p><p>This <code>CREATE TABLE</code> statement creates a table with single level partitions:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE sales (trans_id int, date date, </span></span>
<span class="line"><span>    amount decimal(9,2), region text)</span></span>
<span class="line"><span>   DISTRIBUTED BY (trans_id)</span></span>
<span class="line"><span>   PARTITION BY RANGE (date)</span></span>
<span class="line"><span>      (START (date &#39;2016­01­01&#39;) </span></span>
<span class="line"><span>       INCLUSIVE END (date &#39;2017­01­01&#39;) </span></span>
<span class="line"><span>       EXCLUSIVE EVERY (INTERVAL &#39;1 month&#39;),</span></span>
<span class="line"><span>   DEFAULT PARTITION outlying_dates );</span></span></code></pre></div><p>This query against the table is supported by GPORCA and does not generate errors in the log file:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select * from sales ;</span></span></code></pre></div><p>The <code>EXPLAIN</code> plan output lists only the number of selected partitions.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> -&gt;  Partition Selector for sales (dynamic scan id: 1)  (cost=10.00..100.00 rows=50 width=4)</span></span>
<span class="line"><span>       Partitions selected:  13 (out of 13)</span></span></code></pre></div><p>If a query against a partitioned table is not supported by GPORCA. WarehousePG falls back to the Postgres-based planner. The <code>EXPLAIN</code> plan generated by the Postgres-based planner lists the selected partitions. This example shows a part of the explain plan that lists some selected partitions.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span> -&gt;  Append  (cost=0.00..0.00 rows=26 width=53)</span></span>
<span class="line"><span>     -&gt;  Seq Scan on sales2_1_prt_7_2_prt_usa sales2  (cost=0.00..0.00 rows=1 width=53)</span></span>
<span class="line"><span>     -&gt;  Seq Scan on sales2_1_prt_7_2_prt_asia sales2  (cost=0.00..0.00 rows=1 width=53)</span></span>
<span class="line"><span>     ...</span></span></code></pre></div><p>This example shows the log output when the WarehousePG falls back to the Postgres-based planner from GPORCA.</p><p>When this query is run, WarehousePG falls back to the Postgres-based planner.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>explain select * from pg_class;</span></span></code></pre></div><p>A message is added to the log file. The message contains this <code>NOTICE</code> information that indicates the reason GPORCA did not run the query:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>NOTICE,&quot;&quot;Falling back to Postgres-based planner because GPORCA does not support the following feature: Queries on coordinator-only tables&quot;</span></span></code></pre></div>`,23)]))}const g=a(i,[["render",p]]);export{u as __pageData,g as default};
