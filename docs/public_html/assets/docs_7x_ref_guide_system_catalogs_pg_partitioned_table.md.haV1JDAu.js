import{_ as e,c as a,o,ag as d}from"./chunks/framework.Ds6Eueu6.js";const _=JSON.parse('{"title":"pg_partitioned_table","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/system_catalogs/pg_partitioned_table.md","filePath":"docs/7x/ref_guide/system_catalogs/pg_partitioned_table.md"}'),r={name:"docs/7x/ref_guide/system_catalogs/pg_partitioned_table.md"};function i(n,t,s,c,p,l){return o(),a("div",null,t[0]||(t[0]=[d('<h1 id="pg-partitioned-table" tabindex="-1">pg_partitioned_table <a class="header-anchor" href="#pg-partitioned-table" aria-label="Permalink to &quot;pg_partitioned_table&quot;">â€‹</a></h1><p>The <code>pg_partitioned_table</code> system catalog stores information about how tables are partitioned.</p><table tabindex="0"><thead><tr><th>column</th><th>type</th><th>references</th><th>description</th></tr></thead><tbody><tr><td><code>partrelid</code></td><td>oid</td><td><a href="./pg_class.html">pg_class</a>.oid</td><td>The object identifier of the <code>pg_class</code> entry for this partitioned table.</td></tr><tr><td><code>partstrat</code></td><td>char</td><td></td><td>The partitioning strategy: <code>h</code> = hash partitioned table, <code>l</code> = list partitioned table, <code>r</code> = range partitioned table.</td></tr><tr><td><code>partnatts</code></td><td>smallint</td><td></td><td>The number of columns in the partition key.</td></tr><tr><td><code>partdefid</code></td><td>oid</td><td><a href="./pg_class.html">pg_class</a>.oid</td><td>The object identifier of the <code>pg_class</code> entry for the default partition of this partitioned table, or zero if this partitioned table does not have a default partition.</td></tr><tr><td><code>partattrs</code></td><td>int2vector</td><td><a href="./pg_attribute.html">pg_attribute</a>.attnum</td><td>An array of <code>partnatts</code> values that indicate which table columns are part of the partition key. For example, a value of <code>1 3</code> would mean that the first and the third table columns make up the partition key. A zero in this array indicates that the corresponding partition key column is an expression, rather than a simple column reference.</td></tr><tr><td><code>partclass</code></td><td>oidvector</td><td><a href="./pg_class.html">pg_opclass</a>.oid</td><td>For each column in the partition key, contains the object identifier of the operator class to use. See <a href="./pg_opclass.html">pg_opclass</a> for details.</td></tr><tr><td><code>partcollation</code></td><td>oidvector</td><td><a href="./pg_class.html">pg_opclass</a>.oid</td><td>For each column in the partition key, contains the object identifier of the collation to use for partitioning, or zero if the column is not of a collatable data type.</td></tr><tr><td><code>partexprs</code></td><td>pg_node_tree</td><td></td><td>Expression trees (in <code>nodeToString()</code> representation) for partition key columns that are not simple column references. This list contains one element for each zero entry in <code>partattrs</code>. Null if all partition key columns are simple references. <em>WarehousePG classic partition syntax does not support specifying an expression in a partition key.</em></td></tr></tbody></table><p><strong>Parent topic:</strong> <a href="./../system_catalogs/catalog_ref-html.html">System Catalogs Definitions</a></p>',4)]))}const f=e(r,[["render",i]]);export{_ as __pageData,f as default};
