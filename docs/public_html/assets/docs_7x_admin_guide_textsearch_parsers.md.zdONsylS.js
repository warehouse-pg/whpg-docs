import{_ as e,c as a,o as s,ag as d}from"./chunks/framework.Ds6Eueu6.js";const m=JSON.parse('{"title":"Text Search Parsers","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/textsearch/parsers.md","filePath":"docs/7x/admin_guide/textsearch/parsers.md"}'),r={name:"docs/7x/admin_guide/textsearch/parsers.md"};function n(o,t,i,p,l,c){return s(),a("div",null,t[0]||(t[0]=[d(`<h1 id="text-search-parsers" tabindex="-1">Text Search Parsers <a class="header-anchor" href="#text-search-parsers" aria-label="Permalink to &quot;Text Search Parsers&quot;">​</a></h1><hr><p>This topic describes the types of tokens the WarehousePG text search parser produces from raw text.</p><p>Text search parsers are responsible for splitting raw document text into <em>tokens</em> and identifying each token&#39;s type, where the set of possible types is defined by the parser itself. Note that a parser does not modify the text at all — it simply identifies plausible word boundaries. Because of this limited scope, there is less need for application-specific custom parsers than there is for custom dictionaries. At present WarehousePG provides just one built-in parser, which has been found to be useful for a wide range of applications.</p><p>The built-in parser is named <code>pg_catalog.default</code>. It recognizes 23 token types, shown in the following table.</p><table tabindex="0"><thead><tr><th>Alias</th><th>Description</th><th>Example</th></tr></thead><tbody><tr><td>asciiword</td><td>Word, all ASCII letters</td><td>elephant</td></tr><tr><td>word</td><td>Word, all letters</td><td>mañana</td></tr><tr><td>numword</td><td>Word, letters and digits</td><td>beta1</td></tr><tr><td>asciihword</td><td>Hyphenated word, all ASCII</td><td>up-to-date</td></tr><tr><td>hword</td><td>Hyphenated word, all letters</td><td>lógico-matemática</td></tr><tr><td>numhword</td><td>Hyphenated word, letters and digits</td><td>postgresql-beta1</td></tr><tr><td>hword_asciipart</td><td>Hyphenated word part, all ASCII</td><td>postgresql in the context postgresql-beta1</td></tr><tr><td>hword_part</td><td>Hyphenated word part, all letters</td><td>lógico or matemática in the context lógico-matemática</td></tr><tr><td>hword_numpart</td><td>Hyphenated word part, letters and digits</td><td>beta1 in the context postgresql-beta1</td></tr><tr><td>email</td><td>Email address</td><td><a href="mailto:foo@example.com" target="_blank" rel="noreferrer">foo@example.com</a></td></tr><tr><td>protocol</td><td>Protocol head</td><td>http://</td></tr><tr><td>url</td><td>URL</td><td>example.com/stuff/index.html</td></tr><tr><td>host</td><td>Host</td><td>example.com</td></tr><tr><td>url_path</td><td>URL path</td><td>/stuff/index.html, in the context of a URL</td></tr><tr><td>file</td><td>File or path name</td><td>/usr/local/foo.txt, if not within a URL</td></tr><tr><td>sfloat</td><td>Scientific notation</td><td>-1.234e56</td></tr><tr><td>float</td><td>Decimal notation</td><td>-1.234</td></tr><tr><td>int</td><td>Signed integer</td><td>-1234</td></tr><tr><td>uint</td><td>Unsigned integer</td><td>1234</td></tr><tr><td>version</td><td>Version number</td><td>8.3.0</td></tr><tr><td>tag</td><td>XML tag</td><td>&lt;a href=&quot;dictionaries.html&quot;&gt;</td></tr><tr><td>entity</td><td>XML entity</td><td>&amp;amp;</td></tr><tr><td>blank</td><td>Space symbols</td><td>(any whitespace or punctuation not otherwise recognized)</td></tr></tbody></table><blockquote><p><strong>Note</strong> The parser&#39;s notion of a &quot;letter&quot; is determined by the database&#39;s locale setting, specifically <code>lc_ctype</code>. Words containing only the basic ASCII letters are reported as a separate token type, since it is sometimes useful to distinguish them. In most European languages, token types <code>word</code> and <code>asciiword</code> should be treated alike.</p></blockquote><p><code>email</code> does not support all valid email characters as defined by RFC 5322. Specifically, the only non-alphanumeric characters supported for email user names are period, dash, and underscore.</p><p>It is possible for the parser to produce overlapping tokens from the same piece of text. As an example, a hyphenated word will be reported both as the entire word and as each component:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT alias, description, token FROM ts_debug(&#39;foo-bar-beta1&#39;);</span></span>
<span class="line"><span>      alias      |               description                |     token     </span></span>
<span class="line"><span>-----------------+------------------------------------------+---------------</span></span>
<span class="line"><span> numhword        | Hyphenated word, letters and digits      | foo-bar-beta1</span></span>
<span class="line"><span> hword_asciipart | Hyphenated word part, all ASCII          | foo</span></span>
<span class="line"><span> blank           | Space symbols                            | -</span></span>
<span class="line"><span> hword_asciipart | Hyphenated word part, all ASCII          | bar</span></span>
<span class="line"><span> blank           | Space symbols                            | -</span></span>
<span class="line"><span> hword_numpart   | Hyphenated word part, letters and digits | beta1</span></span></code></pre></div><p>This behavior is desirable since it allows searches to work for both the whole compound word and for components. Here is another instructive example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT alias, description, token FROM ts_debug(&#39;http://example.com/stuff/index.html&#39;);</span></span>
<span class="line"><span>  alias   |  description  |            token             </span></span>
<span class="line"><span>----------+---------------+------------------------------</span></span>
<span class="line"><span> protocol | Protocol head | http://</span></span>
<span class="line"><span> url      | URL           | example.com/stuff/index.html</span></span>
<span class="line"><span> host     | Host          | example.com</span></span>
<span class="line"><span> url_path | URL path      | /stuff/index.html</span></span></code></pre></div><p><strong>Parent topic:</strong> <a href="./../textsearch/full-text-search.html">Using Full Text Search</a></p>`,13)]))}const u=e(r,[["render",n]]);export{m as __pageData,u as default};
