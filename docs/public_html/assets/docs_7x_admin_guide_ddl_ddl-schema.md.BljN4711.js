import{_ as e,c as t,o as s,ag as i}from"./chunks/framework.Ds6Eueu6.js";const m=JSON.parse('{"title":"Creating and Managing Schemas","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/ddl/ddl-schema.md","filePath":"docs/7x/admin_guide/ddl/ddl-schema.md"}'),c={name:"docs/7x/admin_guide/ddl/ddl-schema.md"};function o(n,a,h,l,d,p){return s(),t("div",null,a[0]||(a[0]=[i('<h1 id="creating-and-managing-schemas" tabindex="-1">Creating and Managing Schemas <a class="header-anchor" href="#creating-and-managing-schemas" aria-label="Permalink to &quot;Creating and Managing Schemas&quot;">​</a></h1><hr><p>Schemas logically organize objects and data in a database. Schemas allow you to have more than one object (such as tables) with the same name in the database without conflict if the objects are in different schemas.</p><p><strong>Parent topic:</strong> <a href="./../ddl/ddl.html">DDL: Defining Database Objects</a></p><h2 id="the-default-public-schema" tabindex="-1"><a id="topic18"></a>The Default &quot;Public&quot; Schema <a class="header-anchor" href="#the-default-public-schema" aria-label="Permalink to &quot;&lt;a id=&quot;topic18&quot;&gt;&lt;/a&gt;The Default &quot;Public&quot; Schema&quot;">​</a></h2><p>Every database has a default schema named <em>public</em>. If you do not create any schemas, objects are created in the <em>public</em> schema. All database roles (users) have <code>CREATE</code> and <code>USAGE</code> privileges in the <em>public</em> schema. When you create a schema, you grant privileges to your users to allow access to the schema.</p><h2 id="creating-a-schema" tabindex="-1"><a id="topic19"></a>Creating a Schema <a class="header-anchor" href="#creating-a-schema" aria-label="Permalink to &quot;&lt;a id=&quot;topic19&quot;&gt;&lt;/a&gt;Creating a Schema&quot;">​</a></h2><p>Use the <code>CREATE SCHEMA</code> command to create a new schema. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; CREATE SCHEMA myschema;</span></span></code></pre></div><p>To create or access objects in a schema, write a qualified name consisting of the schema name and table name separated by a period. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>myschema.table</span></span></code></pre></div><p>See <a href="#topic20">Schema Search Paths</a> for information about accessing a schema.</p><p>You can create a schema owned by someone else, for example, to restrict the activities of your users to well-defined namespaces. The syntax is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; CREATE SCHEMA `schemaname` AUTHORIZATION `username`;</span></span></code></pre></div><h2 id="schema-search-paths" tabindex="-1"><a id="topic20"></a>Schema Search Paths <a class="header-anchor" href="#schema-search-paths" aria-label="Permalink to &quot;&lt;a id=&quot;topic20&quot;&gt;&lt;/a&gt;Schema Search Paths&quot;">​</a></h2><p>To specify an object&#39;s location in a database, use the schema-qualified name. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; SELECT * FROM myschema.mytable;</span></span></code></pre></div><p>You can set the <code>search_path</code> configuration parameter to specify the order in which to search the available schemas for objects. The schema listed first in the search path becomes the <em>default</em> schema. If a schema is not specified, objects are created in the default schema.</p><h3 id="setting-the-schema-search-path" tabindex="-1"><a id="topic21"></a>Setting the Schema Search Path <a class="header-anchor" href="#setting-the-schema-search-path" aria-label="Permalink to &quot;&lt;a id=&quot;topic21&quot;&gt;&lt;/a&gt;Setting the Schema Search Path&quot;">​</a></h3><p>The <code>search_path</code> configuration parameter sets the schema search order. The <code>ALTER DATABASE</code> command sets the search path. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; ALTER DATABASE mydatabase SET search_path TO myschema, </span></span>\n<span class="line"><span>public, pg_catalog;</span></span></code></pre></div><p>You can also set <code>search_path</code> for a particular role (user) using the <code>ALTER ROLE</code> command. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; ALTER ROLE sally SET search_path TO myschema, public, </span></span>\n<span class="line"><span>pg_catalog;</span></span></code></pre></div><h3 id="viewing-the-current-schema" tabindex="-1"><a id="topic22"></a>Viewing the Current Schema <a class="header-anchor" href="#viewing-the-current-schema" aria-label="Permalink to &quot;&lt;a id=&quot;topic22&quot;&gt;&lt;/a&gt;Viewing the Current Schema&quot;">​</a></h3><p>Use the <code>current_schema()</code> function to view the current schema. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; SELECT current_schema();</span></span></code></pre></div><p>Use the <code>SHOW</code> command to view the current search path. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; SHOW search_path;</span></span></code></pre></div><h2 id="dropping-a-schema" tabindex="-1"><a id="topic23"></a>Dropping a Schema <a class="header-anchor" href="#dropping-a-schema" aria-label="Permalink to &quot;&lt;a id=&quot;topic23&quot;&gt;&lt;/a&gt;Dropping a Schema&quot;">​</a></h2><p>Use the <code>DROP SCHEMA</code> command to drop (delete) a schema. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; DROP SCHEMA myschema;</span></span></code></pre></div><p>By default, the schema must be empty before you can drop it. To drop a schema and all of its objects (tables, data, functions, and so on) use:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; DROP SCHEMA myschema CASCADE;</span></span></code></pre></div><h2 id="system-schemas" tabindex="-1"><a id="topic24"></a>System Schemas <a class="header-anchor" href="#system-schemas" aria-label="Permalink to &quot;&lt;a id=&quot;topic24&quot;&gt;&lt;/a&gt;System Schemas&quot;">​</a></h2><p>The following system-level schemas exist in every database:</p><ul><li><code>pg_catalog</code> contains the system catalog tables, built-in data types, functions, and operators. It is always part of the schema search path, even if it is not explicitly named in the search path.</li><li><code>information_schema</code> consists of a standardized set of views that contain information about the objects in the database. These views get system information from the system catalog tables in a standardized way.</li><li><code>pg_toast</code> stores large objects such as records that exceed the page size. This schema is used internally by the WarehousePG cluster.</li><li><code>pg_bitmapindex</code> stores bitmap index objects such as lists of values. This schema is used internally by the WarehousePG cluster.</li><li><code>pg_aoseg</code> stores append-optimized table objects. This schema is used internally by the WarehousePG cluster.</li><li><code>gp_toolkit</code> is an administrative schema that contains external tables, views, and functions that you can access with SQL commands. All database users can access <code>gp_toolkit</code> to view and query the system log files and other system metrics.</li></ul>',36)]))}const u=e(c,[["render",o]]);export{m as __pageData,u as default};
