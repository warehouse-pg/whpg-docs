import{_ as n,c as a,o as e,ag as p}from"./chunks/framework.Ds6Eueu6.js";const g=JSON.parse('{"title":"Encrypting Data and Database Connections","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/security_guide/encryption.md","filePath":"docs/7x/security_guide/encryption.md"}'),t={name:"docs/7x/security_guide/encryption.md"};function i(l,s,o,c,r,d){return e(),a("div",null,s[0]||(s[0]=[p(`<h1 id="encrypting-data-and-database-connections" tabindex="-1">Encrypting Data and Database Connections <a class="header-anchor" href="#encrypting-data-and-database-connections" aria-label="Permalink to &quot;Encrypting Data and Database Connections&quot;">​</a></h1><p>This topic describes how to encrypt data at rest in the database or in transit over the network, to protect from eavesdroppers or man-in-the-middle attacks.</p><ul><li>Connections between clients and the coordinator database can be encrypted with SSL. This is enabled with the <code>ssl</code> server configuration parameter, which is <code>off</code> by default. Setting the <code>ssl</code> parameter to <code>on</code> allows client communications with the coordinator to be encrypted. The coordinator database must be set up for SSL. See <a href="./authentication.html#openssl_config">OpenSSL Configuration</a> for more about encrypting client connections with SSL.</li><li>WarehousePG allows SSL encryption of data in transit between the WarehousePG parallel file distribution server, <code>gpfdist</code>, and segment hosts. See <a href="#gpfdist_connections">Encrypting gpfdist Connections</a> for more information.</li><li>The <code>pgcrypto</code> module of encryption/decryption functions protects data at rest in the database. Encryption at the column level protects sensitive information, such as social security numbers or credit card numbers. See <a href="#pgcrypto">Encrypting Data at Rest with pgcrypto</a> for more information.</li></ul><p><strong>Parent topic:</strong> <a href="./..../security_guide//">WarehousePG Security Configuration Guide</a></p><h2 id="encrypting-gpfdist-connections" tabindex="-1"><a id="gpfdist_connections"></a>Encrypting gpfdist Connections <a class="header-anchor" href="#encrypting-gpfdist-connections" aria-label="Permalink to &quot;&lt;a id=&quot;gpfdist_connections&quot;&gt;&lt;/a&gt;Encrypting gpfdist Connections&quot;">​</a></h2><p>The <code>gpfdists</code> protocol is a secure version of the <code>gpfdist</code> protocol that securely identifies the file server and the WarehousePG and encrypts the communications between them. Using <code>gpfdists</code> protects against eavesdropping and man-in-the-middle attacks.</p><p>The <code>gpfdists</code> protocol implements client/server SSL security with the following notable features:</p><ul><li>Client certificates are required.</li><li>Multilingual certificates are not supported.</li><li>A Certificate Revocation List (CRL) is not supported.</li><li>A minimum TLS version of 1.2 is required.</li><li>SSL renegotiation is supported.</li><li>The SSL ignore host mismatch parameter is set to false.</li><li>Private keys containing a passphrase are not supported for the <code>gpfdist</code> file server (server.key) or for the WarehousePG (client.key).</li><li>It is the user&#39;s responsibility to issue certificates that are appropriate for the operating system in use. Generally, converting certificates to the required format is supported, for example using the SSL Converter at <a href="http://www.commoncriteriaportal.org/products/?expand#ALL" target="_blank" rel="noreferrer">https://www.sslshopper.com/ssl-converter.html</a>.</li></ul><p>A <code>gpfdist</code> server started with the <code>--ssl</code> option can only communicate with the <code>gpfdists</code> protocol. A <code>gpfdist</code> server started without the <code>--ssl</code> option can only communicate with the <code>gpfdist</code> protocol. For more detail about <code>gpfdist</code> refer to the <em>WarehousePG Administrator Guide</em>.</p><p>There are two ways to enable the <code>gpfdists</code> protocol:</p><ul><li>Run <code>gpfdist</code> with the <code>--ssl</code> option and then use the <code>gpfdists</code> protocol in the <code>LOCATION</code> clause of a <code>CREATE EXTERNAL TABLE</code> statement.</li><li>Use a YAML control file with the SSL option set to true and run <code>gpload</code>. Running <code>gpload</code> starts the <code>gpfdist</code> server with the <code>--ssl</code> option and then uses the <code>gpfdists</code> protocol.</li></ul><p>When using gpfdists, the following client certificates must be located in the <code>$PGDATA/gpfdists</code> directory on each segment:</p><ul><li>The client certificate file, <code>client.crt</code></li><li>The client private key file, <code>client.key</code></li><li>The trusted certificate authorities, <code>root.crt</code></li></ul><blockquote><p><strong>Important</strong> Do not protect the private key with a passphrase. The server does not prompt for a passphrase for the private key, and loading data fails with an error if one is required.</p></blockquote><p>When using <code>gpload</code> with SSL you specify the location of the server certificates in the YAML control file. When using <code>gpfdist</code> with SSL, you specify the location of the server certificates with the --ssl option.</p><p>The following example shows how to securely load data into an external table. The example creates a readable external table named <code>ext_expenses</code> from all files with the <code>txt</code> extension, using the <code>gpfdists</code> protocol. The files are formatted with a pipe (<code>|</code>) as the column delimiter and an empty space as null.</p><ol><li><p>Run <code>gpfdist</code> with the <code>--ssl</code> option on the segment hosts.</p></li><li><p>Log into the database and run the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>=# CREATE EXTERNAL TABLE ext_expenses </span></span>
<span class="line"><span>   ( name text, date date, amount float4, category text, desc1 text )</span></span>
<span class="line"><span>LOCATION (&#39;gpfdists://etlhost-1:8081/*.txt&#39;, &#39;gpfdists://etlhost-2:8082/*.txt&#39;)</span></span>
<span class="line"><span>FORMAT &#39;TEXT&#39; ( DELIMITER &#39;|&#39; NULL &#39; &#39;) ;</span></span></code></pre></div></li></ol><h2 id="encrypting-data-at-rest-with-pgcrypto" tabindex="-1"><a id="pgcrypto"></a>Encrypting Data at Rest with pgcrypto <a class="header-anchor" href="#encrypting-data-at-rest-with-pgcrypto" aria-label="Permalink to &quot;&lt;a id=&quot;pgcrypto&quot;&gt;&lt;/a&gt;Encrypting Data at Rest with pgcrypto&quot;">​</a></h2><p>The pgcrypto module for WarehousePG provides functions for encrypting data at rest in the database. Administrators can encrypt columns with sensitive information, such as social security numbers or credit card numbers, to provide an extra layer of protection. Database data stored in encrypted form cannot be read by users who do not have the encryption key, and the data cannot be read directly from disk.</p><p>pgcrypto is installed by default when you install WarehousePG. You must explicitly enable pgcrypto in each database in which you want to use the module.</p><p>pgcrypto allows PGP encryption using symmetric and asymmetric encryption. Symmetric encryption encrypts and decrypts data using the same key and is faster than asymmetric encryption. It is the preferred method in an environment where exchanging secret keys is not an issue. With asymmetric encryption, a public key is used to encrypt data and a private key is used to decrypt data. This is slower then symmetric encryption and it requires a stronger key.</p><p>Using pgcrypto always comes at the cost of performance and maintainability. It is important to use encryption only with the data that requires it. Also, keep in mind that you cannot search encrypted data by indexing the data.</p><p>Before you implement in-database encryption, consider the following PGP limitations.</p><ul><li>No support for signing. That also means that it is not checked whether the encryption sub-key belongs to the coordinator key.</li><li>No support for encryption key as coordinator key. This practice is generally discouraged, so this limitation should not be a problem.</li><li>No support for several subkeys. This may seem like a problem, as this is common practice. On the other hand, you should not use your regular GPG/PGP keys with pgcrypto, but create new ones, as the usage scenario is rather different.</li></ul><p>WarehousePG is compiled with zlib by default; this allows PGP encryption functions to compress data before encrypting. When compiled with OpenSSL, more algorithms will be available.</p><p>Because pgcrypto functions run inside the database server, the data and passwords move between pgcrypto and the client application in clear-text. For optimal security, you should connect locally or use SSL connections and you should trust both the system and database administrators.</p><p>pgcrypto configures itself according to the findings of the main PostgreSQL configure script.</p><p>When compiled with <code>zlib</code>, pgcrypto encryption functions are able to compress data before encrypting.</p><p>Pgcrypto has various levels of encryption ranging from basic to advanced built-in functions. The following table shows the supported encryption algorithms.</p><table tabindex="0"><thead><tr><th style="text-align:left;">Value Functionality</th><th style="text-align:left;">Built-in</th><th style="text-align:left;">With OpenSSL</th></tr></thead><tbody><tr><td style="text-align:left;">MD5</td><td style="text-align:left;">yes</td><td style="text-align:left;">yes</td></tr><tr><td style="text-align:left;">SHA1</td><td style="text-align:left;">yes</td><td style="text-align:left;">yes</td></tr><tr><td style="text-align:left;">SHA224/256/384/512</td><td style="text-align:left;">yes</td><td style="text-align:left;">yes <sup><a href="#fnsrc">1</a></sup></td></tr><tr><td style="text-align:left;">Other digest algorithms</td><td style="text-align:left;">no</td><td style="text-align:left;">yes <sup><a href="#fnsrc">2</a></sup></td></tr><tr><td style="text-align:left;">Blowfish</td><td style="text-align:left;">yes</td><td style="text-align:left;">yes</td></tr><tr><td style="text-align:left;">AES</td><td style="text-align:left;">yes</td><td style="text-align:left;">yes<sup><a href="#fnsrc">3</a></sup></td></tr><tr><td style="text-align:left;">DES/3DES/CAST5</td><td style="text-align:left;">no</td><td style="text-align:left;">yes</td></tr><tr><td style="text-align:left;">Raw Encryption</td><td style="text-align:left;">yes</td><td style="text-align:left;">yes</td></tr><tr><td style="text-align:left;">PGP Symmetric-Key</td><td style="text-align:left;">yes</td><td style="text-align:left;">yes</td></tr><tr><td style="text-align:left;">PGP Public Key</td><td style="text-align:left;">yes</td><td style="text-align:left;">yes</td></tr></tbody></table><h3 id="creating-pgp-keys" tabindex="-1"><a id="creating_pgp_keys"></a>Creating PGP Keys <a class="header-anchor" href="#creating-pgp-keys" aria-label="Permalink to &quot;&lt;a id=&quot;creating_pgp_keys&quot;&gt;&lt;/a&gt;Creating PGP Keys&quot;">​</a></h3><p>To use PGP asymmetric encryption in WarehousePG, you must first create public and private keys and install them.</p><p>This section assumes you are installing WarehousePG on a Linux machine with the Gnu Privacy Guard (<code>gpg</code>) command line tool. Use the latest version of GPG to create keys. Download and install Gnu Privacy Guard (GPG) for your operating system from <a href="https://www.gnupg.org/download/" target="_blank" rel="noreferrer">https://www.gnupg.org/download/</a>. On the GnuPG website you will find installers for popular Linux distributions and links for Windows and Mac OS X installers.</p><ol><li><p>As root, run the following command and choose option 1 from the menu:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gpg --gen-key </span></span>
<span class="line"><span>gpg (GnuPG) 2.0.14; Copyright (C) 2009 Free Software Foundation, Inc.</span></span>
<span class="line"><span>This is free software: you are free to change and redistribute it.</span></span>
<span class="line"><span>There is NO WARRANTY, to the extent permitted by law.</span></span>
<span class="line"><span> </span></span>
<span class="line"><span>gpg: directory &#39;/root/.gnupg&#39; created</span></span>
<span class="line"><span>gpg: new configuration file &#39;/root/.gnupg/gpg.conf&#39; created</span></span>
<span class="line"><span>gpg: WARNING: options in &#39;/root/.gnupg/gpg.conf&#39; are not yet active during this run</span></span>
<span class="line"><span>gpg: keyring &#39;/root/.gnupg/secring.gpg&#39; created</span></span>
<span class="line"><span>gpg: keyring &#39;/root/.gnupg/pubring.gpg&#39; created</span></span>
<span class="line"><span>Please select what kind of key you want:</span></span>
<span class="line"><span> (1) RSA and RSA (default)</span></span>
<span class="line"><span> (2) DSA and Elgamal</span></span>
<span class="line"><span> (3) DSA (sign only)</span></span>
<span class="line"><span> (4) RSA (sign only)</span></span>
<span class="line"><span>Your selection? **1**</span></span></code></pre></div></li><li><p>Respond to the prompts and follow the instructions, as shown in this example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>RSA keys may be between 1024 and 4096 bits long.</span></span>
<span class="line"><span>What keysize do you want? (2048) Press enter to accept default key size</span></span>
<span class="line"><span>Requested keysize is 2048 bits</span></span>
<span class="line"><span>Please specify how long the key should be valid.</span></span>
<span class="line"><span> 0 = key does not expire</span></span>
<span class="line"><span> &lt;n&gt; = key expires in n days</span></span>
<span class="line"><span> &lt;n&gt;w = key expires in n weeks</span></span>
<span class="line"><span> &lt;n&gt;m = key expires in n months</span></span>
<span class="line"><span> &lt;n&gt;y = key expires in n years</span></span>
<span class="line"><span> Key is valid for? (0) **365**</span></span>
<span class="line"><span>Key expires at Wed 13 Jan 2016 10:35:39 AM PST</span></span>
<span class="line"><span>Is this correct? (y/N) **y**</span></span>
<span class="line"><span></span></span>
<span class="line"><span>GnuPG needs to construct a user ID to identify your key.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Real name: **John Doe**</span></span>
<span class="line"><span>Email address: **jdoe@email.com**</span></span>
<span class="line"><span>Comment: </span></span>
<span class="line"><span>You selected this USER-ID:</span></span>
<span class="line"><span> &quot;John Doe &lt;jdoe@email.com&gt;&quot;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>Change (N)ame, (C)omment, (E)mail or (O)kay/(Q)uit? **O**</span></span>
<span class="line"><span>You need a Passphrase to protect your secret key.</span></span>
<span class="line"><span>*\\(For this demo the passphrase is blank.\\)*</span></span>
<span class="line"><span>can&#39;t connect to &#39;/root/.gnupg/S.gpg-agent&#39;: No such file or directory</span></span>
<span class="line"><span>You don&#39;t want a passphrase - this is probably a *bad* idea!</span></span>
<span class="line"><span>I will do it anyway.  You can change your passphrase at any time,</span></span>
<span class="line"><span>using this program with the option &quot;--edit-key&quot;.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>We need to generate a lot of random bytes. It is a good idea to perform</span></span>
<span class="line"><span>some other action (type on the keyboard, move the mouse, utilize the</span></span>
<span class="line"><span>disks) during the prime generation; this gives the random number</span></span>
<span class="line"><span>generator a better chance to gain enough entropy.</span></span>
<span class="line"><span>We need to generate a lot of random bytes. It is a good idea to perform</span></span>
<span class="line"><span>some other action (type on the keyboard, move the mouse, utilize the</span></span>
<span class="line"><span>disks) during the prime generation; this gives the random number</span></span>
<span class="line"><span>generator a better chance to gain enough entropy.</span></span>
<span class="line"><span>gpg: /root/.gnupg/trustdb.gpg: trustdb created</span></span>
<span class="line"><span>gpg: key 2027CC30 marked as ultimately trusted</span></span>
<span class="line"><span>public and secret key created and signed.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>gpg:  checking the trustdbgpg: </span></span>
<span class="line"><span>      3 marginal(s) needed, 1 complete(s) needed, PGP trust model</span></span>
<span class="line"><span>gpg:  depth: 0  valid:   1  signed:   0  trust: 0-, 0q, 0n, 0m, 0f, 1u</span></span>
<span class="line"><span>gpg:  next trustdb check due at 2016-01-13</span></span>
<span class="line"><span>pub   2048R/2027CC30 2015-01-13 [expires: 2016-01-13]</span></span>
<span class="line"><span>      Key fingerprint = 7EDA 6AD0 F5E0 400F 4D45   3259 077D 725E 2027 CC30</span></span>
<span class="line"><span>uid                  John Doe &lt;jdoe@email.com&gt;</span></span>
<span class="line"><span>sub   2048R/4FD2EFBB 2015-01-13 [expires: 2016-01-13]</span></span></code></pre></div></li><li><p>List the PGP keys by entering the following command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpg --list-secret-keys </span></span>
<span class="line"><span>/root/.gnupg/secring.gpg</span></span>
<span class="line"><span>------------------------</span></span>
<span class="line"><span>sec   2048R/2027CC30 2015-01-13 [expires: 2016-01-13]</span></span>
<span class="line"><span>uid                  John Doe &lt;jdoe@email.com&gt;</span></span>
<span class="line"><span>ssb   2048R/4FD2EFBB 2015-01-13</span></span></code></pre></div><p>2027CC30 is the public key and will be used to <em>encrypt</em> data in the database. 4FD2EFBB is the private (secret) key and will be used to <em>decrypt</em> data.</p></li><li><p>Export the keys using the following commands:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># gpg -a --export 4FD2EFBB &gt; public.key</span></span>
<span class="line"><span># gpg -a --export-secret-keys 2027CC30 &gt; secret.key</span></span></code></pre></div></li></ol><p>See the <a href="https://www.postgresql.org/docs/12/pgcrypto.html" target="_blank" rel="noreferrer">pgcrypto</a> documentation for more information about PGP encryption functions.</p><h3 id="encrypting-data-in-tables-using-pgp" tabindex="-1"><a id="encpgp"></a>Encrypting Data in Tables using PGP <a class="header-anchor" href="#encrypting-data-in-tables-using-pgp" aria-label="Permalink to &quot;&lt;a id=&quot;encpgp&quot;&gt;&lt;/a&gt;Encrypting Data in Tables using PGP&quot;">​</a></h3><p>This section shows how to encrypt data inserted into a column using the PGP keys you generated.</p><ol><li><p>Dump the contents of the <code>public.key</code> file and then copy it to the clipboard:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># cat public.key</span></span>
<span class="line"><span>-----BEGIN PGP PUBLIC KEY BLOCK-----</span></span>
<span class="line"><span>Version: GnuPG v2.0.14 (GNU/Linux)</span></span>
<span class="line"><span>            </span></span>
<span class="line"><span>mQENBFS1Zf0BCADNw8Qvk1V1C36Kfcwd3Kpm/dijPfRyyEwB6PqKyA05jtWiXZTh</span></span>
<span class="line"><span>2His1ojSP6LI0cSkIqMU9LAlncecZhRIhBhuVgKlGSgd9texg2nnSL9Admqik/yX</span></span>
<span class="line"><span>R5syVKG+qcdWuvyZg9oOOmeyjhc3n+kkbRTEMuM3flbMs8shOwzMvstCUVmuHU/V</span></span>
<span class="line"><span>vG5rJAe8PuYDSJCJ74I6w7SOH3RiRIc7IfL6xYddV42l3ctd44bl8/i71hq2UyN2</span></span>
<span class="line"><span>/Hbsjii2ymg7ttw3jsWAx2gP9nssDgoy8QDy/o9nNqC8EGlig96ZFnFnE6Pwbhn+</span></span>
<span class="line"><span>ic8MD0lK5/GAlR6Hc0ZIHf8KEcavruQlikjnABEBAAG0HHRlc3Qga2V5IDx0ZXN0</span></span>
<span class="line"><span>a2V5QGVtYWlsLmNvbT6JAT4EEwECACgFAlS1Zf0CGwMFCQHhM4AGCwkIBwMCBhUI</span></span>
<span class="line"><span>AgkKCwQWAgMBAh4BAheAAAoJEAd9cl4gJ8wwbfwH/3VyVsPkQl1owRJNxvXGt1bY</span></span>
<span class="line"><span>7BfrvU52yk+PPZYoes9UpdL3CMRk8gAM9bx5Sk08q2UXSZLC6fFOpEW4uWgmGYf8</span></span>
<span class="line"><span>JRoC3ooezTkmCBW8I1bU0qGetzVxopdXLuPGCE7hVWQe9HcSntiTLxGov1mJAwO7</span></span>
<span class="line"><span>TAoccXLbyuZh9Rf5vLoQdKzcCyOHh5IqXaQOT100TeFeEpb9TIiwcntg3WCSU5P0</span></span>
<span class="line"><span>DGoUAOanjDZ3KE8Qp7V74fhG1EZVzHb8FajR62CXSHFKqpBgiNxnTOk45NbXADn4</span></span>
<span class="line"><span>eTUXPSnwPi46qoAp9UQogsfGyB1XDOTB2UOqhutAMECaM7VtpePv79i0Z/NfnBe5</span></span>
<span class="line"><span>AQ0EVLVl/QEIANabFdQ+8QMCADOipM1bF/JrQt3zUoc4BTqICaxdyzAfz0tUSf/7</span></span>
<span class="line"><span>Zro2us99GlARqLWd8EqJcl/xmfcJiZyUam6ZAzzFXCgnH5Y1sdtMTJZdLp5WeOjw</span></span>
<span class="line"><span>gCWG/ZLu4wzxOFFzDkiPv9RDw6e5MNLtJrSp4hS5o2apKdbO4Ex83O4mJYnav/rE</span></span>
<span class="line"><span>iDDCWU4T0lhv3hSKCpke6LcwsX+7liozp+aNmP0Ypwfi4hR3UUMP70+V1beFqW2J</span></span>
<span class="line"><span>bVLz3lLLouHRgpCzla+PzzbEKs16jq77vG9kqZTCIzXoWaLljuitRlfJkO3vQ9hO</span></span>
<span class="line"><span>v/8yAnkcAmowZrIBlyFg2KBzhunYmN2YvkUAEQEAAYkBJQQYAQIADwUCVLVl/QIb</span></span>
<span class="line"><span>DAUJAeEzgAAKCRAHfXJeICfMMOHYCACFhInZA9uAM3TC44l+MrgMUJ3rW9izrO48</span></span>
<span class="line"><span>WrdTsxR8WkSNbIxJoWnYxYuLyPb/shc9k65huw2SSDkj//0fRrI61FPHQNPSvz62</span></span>
<span class="line"><span>WH+N2lasoUaoJjb2kQGhLOnFbJuevkyBylRz+hI/+8rJKcZOjQkmmK8Hkk8qb5x/</span></span>
<span class="line"><span>HMUc55H0g2qQAY0BpnJHgOOQ45Q6pk3G2/7Dbek5WJ6K1wUrFy51sNlGWE8pvgEx</span></span>
<span class="line"><span>/UUZB+dYqCwtvX0nnBu1KNCmk2AkEcFK3YoliCxomdOxhFOv9AKjjojDyC65KJci</span></span>
<span class="line"><span>Pv2MikPS2fKOAg1R3LpMa8zDEtl4w3vckPQNrQNnYuUtfj6ZoCxv</span></span>
<span class="line"><span>=XZ8J</span></span>
<span class="line"><span>-----END PGP PUBLIC KEY BLOCK-----</span></span></code></pre></div></li><li><p>Create a table called <code>userssn</code> and insert some sensitive data, social security numbers for Bob and Alice, in this example. Paste the public.key contents after &quot;dearmor(&quot;.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE userssn( ssn_id SERIAL PRIMARY KEY, </span></span>
<span class="line"><span>    username varchar(100), ssn bytea); </span></span>
<span class="line"><span></span></span>
<span class="line"><span>INSERT INTO userssn(username, ssn)</span></span>
<span class="line"><span>SELECT robotccs.username, pgp_pub_encrypt(robotccs.ssn, keys.pubkey) AS ssn</span></span>
<span class="line"><span>FROM ( </span></span>
<span class="line"><span>        VALUES (&#39;Alice&#39;, &#39;123-45-6788&#39;), (&#39;Bob&#39;, &#39;123-45-6799&#39;)) </span></span>
<span class="line"><span>            AS robotccs(username, ssn)</span></span>
<span class="line"><span>CROSS JOIN  (SELECT  dearmor(&#39;-----BEGIN PGP PUBLIC KEY BLOCK-----</span></span>
<span class="line"><span>Version: GnuPG v2.0.14 (GNU/Linux)</span></span>
<span class="line"><span>            </span></span>
<span class="line"><span>mQENBFS1Zf0BCADNw8Qvk1V1C36Kfcwd3Kpm/dijPfRyyEwB6PqKyA05jtWiXZTh</span></span>
<span class="line"><span>2His1ojSP6LI0cSkIqMU9LAlncecZhRIhBhuVgKlGSgd9texg2nnSL9Admqik/yX</span></span>
<span class="line"><span>R5syVKG+qcdWuvyZg9oOOmeyjhc3n+kkbRTEMuM3flbMs8shOwzMvstCUVmuHU/V</span></span>
<span class="line"><span>vG5rJAe8PuYDSJCJ74I6w7SOH3RiRIc7IfL6xYddV42l3ctd44bl8/i71hq2UyN2</span></span>
<span class="line"><span>/Hbsjii2ymg7ttw3jsWAx2gP9nssDgoy8QDy/o9nNqC8EGlig96ZFnFnE6Pwbhn+</span></span>
<span class="line"><span>ic8MD0lK5/GAlR6Hc0ZIHf8KEcavruQlikjnABEBAAG0HHRlc3Qga2V5IDx0ZXN0</span></span>
<span class="line"><span>a2V5QGVtYWlsLmNvbT6JAT4EEwECACgFAlS1Zf0CGwMFCQHhM4AGCwkIBwMCBhUI</span></span>
<span class="line"><span>AgkKCwQWAgMBAh4BAheAAAoJEAd9cl4gJ8wwbfwH/3VyVsPkQl1owRJNxvXGt1bY</span></span>
<span class="line"><span>7BfrvU52yk+PPZYoes9UpdL3CMRk8gAM9bx5Sk08q2UXSZLC6fFOpEW4uWgmGYf8</span></span>
<span class="line"><span>JRoC3ooezTkmCBW8I1bU0qGetzVxopdXLuPGCE7hVWQe9HcSntiTLxGov1mJAwO7</span></span>
<span class="line"><span>TAoccXLbyuZh9Rf5vLoQdKzcCyOHh5IqXaQOT100TeFeEpb9TIiwcntg3WCSU5P0</span></span>
<span class="line"><span>DGoUAOanjDZ3KE8Qp7V74fhG1EZVzHb8FajR62CXSHFKqpBgiNxnTOk45NbXADn4</span></span>
<span class="line"><span>eTUXPSnwPi46qoAp9UQogsfGyB1XDOTB2UOqhutAMECaM7VtpePv79i0Z/NfnBe5</span></span>
<span class="line"><span>AQ0EVLVl/QEIANabFdQ+8QMCADOipM1bF/JrQt3zUoc4BTqICaxdyzAfz0tUSf/7</span></span>
<span class="line"><span>Zro2us99GlARqLWd8EqJcl/xmfcJiZyUam6ZAzzFXCgnH5Y1sdtMTJZdLp5WeOjw</span></span>
<span class="line"><span>gCWG/ZLu4wzxOFFzDkiPv9RDw6e5MNLtJrSp4hS5o2apKdbO4Ex83O4mJYnav/rE</span></span>
<span class="line"><span>iDDCWU4T0lhv3hSKCpke6LcwsX+7liozp+aNmP0Ypwfi4hR3UUMP70+V1beFqW2J</span></span>
<span class="line"><span>bVLz3lLLouHRgpCzla+PzzbEKs16jq77vG9kqZTCIzXoWaLljuitRlfJkO3vQ9hO</span></span>
<span class="line"><span>v/8yAnkcAmowZrIBlyFg2KBzhunYmN2YvkUAEQEAAYkBJQQYAQIADwUCVLVl/QIb</span></span>
<span class="line"><span>DAUJAeEzgAAKCRAHfXJeICfMMOHYCACFhInZA9uAM3TC44l+MrgMUJ3rW9izrO48</span></span>
<span class="line"><span>WrdTsxR8WkSNbIxJoWnYxYuLyPb/shc9k65huw2SSDkj//0fRrI61FPHQNPSvz62</span></span>
<span class="line"><span>WH+N2lasoUaoJjb2kQGhLOnFbJuevkyBylRz+hI/+8rJKcZOjQkmmK8Hkk8qb5x/</span></span>
<span class="line"><span>HMUc55H0g2qQAY0BpnJHgOOQ45Q6pk3G2/7Dbek5WJ6K1wUrFy51sNlGWE8pvgEx</span></span>
<span class="line"><span>/UUZB+dYqCwtvX0nnBu1KNCmk2AkEcFK3YoliCxomdOxhFOv9AKjjojDyC65KJci</span></span>
<span class="line"><span>Pv2MikPS2fKOAg1R3LpMa8zDEtl4w3vckPQNrQNnYuUtfj6ZoCxv</span></span>
<span class="line"><span>=XZ8J</span></span>
<span class="line"><span>-----END PGP PUBLIC KEY BLOCK-----&#39; AS pubkey) AS keys;</span></span></code></pre></div></li><li><p>Verify that the <code>ssn</code> column is encrypted.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>test_db=# select * from userssn;</span></span>
<span class="line"><span>ssn_id   | 1</span></span>
<span class="line"><span>username | Alice</span></span>
<span class="line"><span>ssn      | \\301\\300L\\003\\235M%_O\\322\\357\\273\\001\\010\\000\\272\\227\\010\\341\\216\\360\\217C\\020\\261)_\\367</span></span>
<span class="line"><span>[\\227\\034\\313:C\\354d&lt;\\337\\006Q\\351(&#39;\\2330\\031lX\\263Qf\\341\\262\\200\\3015\\235\\036AK\\242fL+\\315g\\322</span></span>
<span class="line"><span>7u\\270*\\304\\361\\355\\220\\021\\330&quot;\\200%\\264\\274}R\\213\\377\\363\\235\\366\\030\\023)\\364!\\331\\303\\237t\\277=</span></span>
<span class="line"><span>f \\015\\004\\242\\231\\263\\225%\\032\\271a\\001\\035\\277\\021\\375X\\232\\304\\305/\\340\\334\\0131\\325\\344[~\\362\\0</span></span>
<span class="line"><span>37-\\251\\336\\303\\340\\377_\\011\\275\\301/MY\\334\\343\\245\\244\\372y\\257S\\374\\230\\346\\277\\373W\\346\\230\\276\\</span></span>
<span class="line"><span>017fi\\226Q\\307\\012\\326\\3646\\000\\326\\005:E\\364W\\252=zz\\010(:\\343Y\\237\\257iqU\\0326\\350=v0\\362\\327\\350\\</span></span>
<span class="line"><span>315G^\\027:K_9\\254\\362\\354\\215&lt;\\001\\304\\357\\331\\355\\323,\\302\\213Fe\\265\\315\\232\\367\\254\\245%(\\\\\\373</span></span>
<span class="line"><span>4\\254\\230\\331\\356\\006B\\257\\333\\326H\\022\\013\\353\\216F?\\023\\220\\370\\035vH5/\\227\\344b\\322\\227\\026\\362=\\</span></span>
<span class="line"><span>42\\033\\322&lt;\\001}\\243\\224;)\\030zqX\\214\\340\\221\\035\\275U\\345\\327\\214\\032\\351\\223c\\2442\\345\\304K\\016\\</span></span>
<span class="line"><span>011\\214\\307\\227\\237\\270\\026&#39;R\\205\\205a~1\\263\\236[\\037C\\260\\031\\205\\374\\245\\317\\033k|\\366\\253\\037</span></span>
<span class="line"><span>---------+--------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>------------------------------------------------------------------------------------------------------</span></span>
<span class="line"><span>------------------------------------------------------------------------------</span></span>
<span class="line"><span>ssn_id   | 2</span></span>
<span class="line"><span>username | Bob</span></span>
<span class="line"><span>ssn      | \\301\\300L\\003\\235M%_O\\322\\357\\273\\001\\007\\377t&gt;\\345\\343,\\200\\256\\272\\300\\012\\033M4\\265\\032L</span></span>
<span class="line"><span>L[v\\262k\\244\\2435\\264\\232B\\357\\370d9\\375\\011\\002\\327\\235&lt;\\246\\210b\\030\\012\\337@\\226Z\\361\\246\\032\\00</span></span>
<span class="line"><span>7&#39;\\012c\\353]\\355d7\\360T\\335\\314\\367\\370;X\\371\\350*\\231\\212\\260B\\010#RQ0\\223\\253c7\\0132b\\355\\242\\233\\34</span></span>
<span class="line"><span>1\\000\\370\\370\\366\\013\\022\\357\\005i\\202~\\005\\\\z\\301o\\012\\230Z\\014\\362\\244\\324&amp;\\243g\\351\\362\\325\\375</span></span>
<span class="line"><span>\\213\\032\\226$\\2751\\256XR\\346k\\266\\030\\234\\267\\201vUh\\004\\250\\337A\\231\\223u\\247\\366/i\\022\\275\\276\\350\\2</span></span>
<span class="line"><span>20\\316\\306|\\203+\\010\\261;\\232\\254tp\\255\\243\\261\\373Rq;\\316w\\357\\006\\207\\374U\\333\\365\\365\\245hg\\031\\005</span></span>
<span class="line"><span>\\322\\347ea\\220\\015l\\212g\\337\\264\\336b\\263\\004\\311\\210.4\\340G+\\221\\274D\\035\\375\\2216\\241&#39;\\346a0\\273wE\\2</span></span>
<span class="line"><span>12\\342y^\\202\\262|A7\\202t\\240\\333p\\345G\\373\\253\\243oCO\\011\\360\\247\\211\\014\\024{\\272\\271\\322&lt;\\001\\267</span></span>
<span class="line"><span>\\347\\240\\005\\213\\0078\\036\\210\\307$\\317\\322\\311\\222\\035\\354\\006&lt;\\266\\264\\004\\376\\251q\\256\\220(+\\030\\</span></span>
<span class="line"><span>3270\\013c\\327\\272\\212%\\363\\033\\252\\322\\337\\354\\276\\225\\232\\201\\212^\\304\\210\\2269@\\3230\\370{</span></span></code></pre></div></li><li><p>Extract the public.key ID from the database:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT pgp_key_id(dearmor(&#39;-----BEGIN PGP PUBLIC KEY BLOCK-----</span></span>
<span class="line"><span>Version: GnuPG v2.0.14 (GNU/Linux)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>mQENBFS1Zf0BCADNw8Qvk1V1C36Kfcwd3Kpm/dijPfRyyEwB6PqKyA05jtWiXZTh</span></span>
<span class="line"><span>2His1ojSP6LI0cSkIqMU9LAlncecZhRIhBhuVgKlGSgd9texg2nnSL9Admqik/yX</span></span>
<span class="line"><span>R5syVKG+qcdWuvyZg9oOOmeyjhc3n+kkbRTEMuM3flbMs8shOwzMvstCUVmuHU/V</span></span>
<span class="line"><span>vG5rJAe8PuYDSJCJ74I6w7SOH3RiRIc7IfL6xYddV42l3ctd44bl8/i71hq2UyN2</span></span>
<span class="line"><span>/Hbsjii2ymg7ttw3jsWAx2gP9nssDgoy8QDy/o9nNqC8EGlig96ZFnFnE6Pwbhn+</span></span>
<span class="line"><span>ic8MD0lK5/GAlR6Hc0ZIHf8KEcavruQlikjnABEBAAG0HHRlc3Qga2V5IDx0ZXN0</span></span>
<span class="line"><span>a2V5QGVtYWlsLmNvbT6JAT4EEwECACgFAlS1Zf0CGwMFCQHhM4AGCwkIBwMCBhUI</span></span>
<span class="line"><span>AgkKCwQWAgMBAh4BAheAAAoJEAd9cl4gJ8wwbfwH/3VyVsPkQl1owRJNxvXGt1bY</span></span>
<span class="line"><span>7BfrvU52yk+PPZYoes9UpdL3CMRk8gAM9bx5Sk08q2UXSZLC6fFOpEW4uWgmGYf8</span></span>
<span class="line"><span>JRoC3ooezTkmCBW8I1bU0qGetzVxopdXLuPGCE7hVWQe9HcSntiTLxGov1mJAwO7</span></span>
<span class="line"><span>TAoccXLbyuZh9Rf5vLoQdKzcCyOHh5IqXaQOT100TeFeEpb9TIiwcntg3WCSU5P0</span></span>
<span class="line"><span>DGoUAOanjDZ3KE8Qp7V74fhG1EZVzHb8FajR62CXSHFKqpBgiNxnTOk45NbXADn4</span></span>
<span class="line"><span>eTUXPSnwPi46qoAp9UQogsfGyB1XDOTB2UOqhutAMECaM7VtpePv79i0Z/NfnBe5</span></span>
<span class="line"><span>AQ0EVLVl/QEIANabFdQ+8QMCADOipM1bF/JrQt3zUoc4BTqICaxdyzAfz0tUSf/7</span></span>
<span class="line"><span>Zro2us99GlARqLWd8EqJcl/xmfcJiZyUam6ZAzzFXCgnH5Y1sdtMTJZdLp5WeOjw</span></span>
<span class="line"><span>gCWG/ZLu4wzxOFFzDkiPv9RDw6e5MNLtJrSp4hS5o2apKdbO4Ex83O4mJYnav/rE</span></span>
<span class="line"><span>iDDCWU4T0lhv3hSKCpke6LcwsX+7liozp+aNmP0Ypwfi4hR3UUMP70+V1beFqW2J</span></span>
<span class="line"><span>bVLz3lLLouHRgpCzla+PzzbEKs16jq77vG9kqZTCIzXoWaLljuitRlfJkO3vQ9hO</span></span>
<span class="line"><span>v/8yAnkcAmowZrIBlyFg2KBzhunYmN2YvkUAEQEAAYkBJQQYAQIADwUCVLVl/QIb</span></span>
<span class="line"><span>DAUJAeEzgAAKCRAHfXJeICfMMOHYCACFhInZA9uAM3TC44l+MrgMUJ3rW9izrO48</span></span>
<span class="line"><span>WrdTsxR8WkSNbIxJoWnYxYuLyPb/shc9k65huw2SSDkj//0fRrI61FPHQNPSvz62</span></span>
<span class="line"><span>WH+N2lasoUaoJjb2kQGhLOnFbJuevkyBylRz+hI/+8rJKcZOjQkmmK8Hkk8qb5x/</span></span>
<span class="line"><span>HMUc55H0g2qQAY0BpnJHgOOQ45Q6pk3G2/7Dbek5WJ6K1wUrFy51sNlGWE8pvgEx</span></span>
<span class="line"><span>/UUZB+dYqCwtvX0nnBu1KNCmk2AkEcFK3YoliCxomdOxhFOv9AKjjojDyC65KJci</span></span>
<span class="line"><span>Pv2MikPS2fKOAg1R3LpMa8zDEtl4w3vckPQNrQNnYuUtfj6ZoCxv</span></span>
<span class="line"><span>=XZ8J</span></span>
<span class="line"><span>-----END PGP PUBLIC KEY BLOCK-----&#39;));</span></span>
<span class="line"><span></span></span>
<span class="line"><span>pgp_key_id | 9D4D255F4FD2EFBB</span></span></code></pre></div><p>This shows that the PGP key ID used to encrypt the <code>ssn</code> column is 9D4D255F4FD2EFBB. It is recommended to perform this step whenever a new key is created and then store the ID for tracking.</p><p>You can use this key to see which key pair was used to encrypt the data:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT username, pgp_key_id(ssn) As key_used</span></span>
<span class="line"><span>FROM userssn;</span></span>
<span class="line"><span>username | Bob</span></span>
<span class="line"><span>key_used | 9D4D255F4FD2EFBB</span></span>
<span class="line"><span>---------+-----------------</span></span>
<span class="line"><span>username | Alice</span></span>
<span class="line"><span>key_used | 9D4D255F4FD2EFBB</span></span></code></pre></div><blockquote><p><strong>Note</strong> Different keys may have the same ID. This is rare, but is a normal event. The client application should try to decrypt with each one to see which fits — like handling <code>ANYKEY</code>. See <a href="https://www.postgresql.org/docs/12/pgcrypto.html" target="_blank" rel="noreferrer">pgp_key_id()</a> in the pgcrypto documentation.</p></blockquote></li><li><p>Decrypt the data using the private key.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT username, pgp_pub_decrypt(ssn, keys.privkey) </span></span>
<span class="line"><span>                 AS decrypted_ssn FROM userssn</span></span>
<span class="line"><span>                 CROSS JOIN</span></span>
<span class="line"><span>                 (SELECT dearmor(&#39;-----BEGIN PGP PRIVATE KEY BLOCK-----</span></span>
<span class="line"><span>Version: GnuPG v2.0.14 (GNU/Linux)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>lQOYBFS1Zf0BCADNw8Qvk1V1C36Kfcwd3Kpm/dijPfRyyEwB6PqKyA05jtWiXZTh</span></span>
<span class="line"><span>2His1ojSP6LI0cSkIqMU9LAlncecZhRIhBhuVgKlGSgd9texg2nnSL9Admqik/yX</span></span>
<span class="line"><span>R5syVKG+qcdWuvyZg9oOOmeyjhc3n+kkbRTEMuM3flbMs8shOwzMvstCUVmuHU/V</span></span>
<span class="line"><span>vG5rJAe8PuYDSJCJ74I6w7SOH3RiRIc7IfL6xYddV42l3ctd44bl8/i71hq2UyN2</span></span>
<span class="line"><span>/Hbsjii2ymg7ttw3jsWAx2gP9nssDgoy8QDy/o9nNqC8EGlig96ZFnFnE6Pwbhn+</span></span>
<span class="line"><span>ic8MD0lK5/GAlR6Hc0ZIHf8KEcavruQlikjnABEBAAEAB/wNfjjvP1brRfjjIm/j</span></span>
<span class="line"><span>XwUNm+sI4v2Ur7qZC94VTukPGf67lvqcYZJuqXxvZrZ8bl6mvl65xEUiZYy7BNA8</span></span>
<span class="line"><span>fe0PaM4Wy+Xr94Cz2bPbWgawnRNN3GAQy4rlBTrvqQWy+kmpbd87iTjwZidZNNmx</span></span>
<span class="line"><span>02iSzraq41Rt0Zx21Jh4rkpF67ftmzOH0vlrS0bWOvHUeMY7tCwmdPe9HbQeDlPr</span></span>
<span class="line"><span>n9CllUqBn4/acTtCClWAjREZn0zXAsNixtTIPC1V+9nO9YmecMkVwNfIPkIhymAM</span></span>
<span class="line"><span>OPFnuZ/Dz1rCRHjNHb5j6ZyUM5zDqUVnnezktxqrOENSxm0gfMGcpxHQogUMzb7c</span></span>
<span class="line"><span>6UyBBADSCXHPfo/VPVtMm5p1yGrNOR2jR2rUj9+poZzD2gjkt5G/xIKRlkB4uoQl</span></span>
<span class="line"><span>emu27wr9dVEX7ms0nvDq58iutbQ4d0JIDlcHMeSRQZluErblB75Vj3HtImblPjpn</span></span>
<span class="line"><span>4Jx6SWRXPUJPGXGI87u0UoBH0Lwij7M2PW7l1ao+MLEA9jAjQwQA+sr9BKPL4Ya2</span></span>
<span class="line"><span>r5nE72gsbCCLowkC0rdldf1RGtobwYDMpmYZhOaRKjkOTMG6rCXJxrf6LqiN8w/L</span></span>
<span class="line"><span>/gNziTmch35MCq/MZzA/bN4VMPyeIlwzxVZkJLsQ7yyqX/A7ac7B7DH0KfXciEXW</span></span>
<span class="line"><span>MSOAJhMmklW1Q1RRNw3cnYi8w3q7X40EAL/w54FVvvPqp3+sCd86SAAapM4UO2R3</span></span>
<span class="line"><span>tIsuNVemMWdgNXwvK8AJsz7VreVU5yZ4B8hvCuQj1C7geaN/LXhiT8foRsJC5o71</span></span>
<span class="line"><span>Bf+iHC/VNEv4k4uDb4lOgnHJYYyifB1wC+nn/EnXCZYQINMia1a4M6Vqc/RIfTH4</span></span>
<span class="line"><span>nwkZt/89LsAiR/20HHRlc3Qga2V5IDx0ZXN0a2V5QGVtYWlsLmNvbT6JAT4EEwEC</span></span>
<span class="line"><span>ACgFAlS1Zf0CGwMFCQHhM4AGCwkIBwMCBhUIAgkKCwQWAgMBAh4BAheAAAoJEAd9</span></span>
<span class="line"><span>cl4gJ8wwbfwH/3VyVsPkQl1owRJNxvXGt1bY7BfrvU52yk+PPZYoes9UpdL3CMRk</span></span>
<span class="line"><span>8gAM9bx5Sk08q2UXSZLC6fFOpEW4uWgmGYf8JRoC3ooezTkmCBW8I1bU0qGetzVx</span></span>
<span class="line"><span>opdXLuPGCE7hVWQe9HcSntiTLxGov1mJAwO7TAoccXLbyuZh9Rf5vLoQdKzcCyOH</span></span>
<span class="line"><span>h5IqXaQOT100TeFeEpb9TIiwcntg3WCSU5P0DGoUAOanjDZ3KE8Qp7V74fhG1EZV</span></span>
<span class="line"><span>zHb8FajR62CXSHFKqpBgiNxnTOk45NbXADn4eTUXPSnwPi46qoAp9UQogsfGyB1X</span></span>
<span class="line"><span>DOTB2UOqhutAMECaM7VtpePv79i0Z/NfnBedA5gEVLVl/QEIANabFdQ+8QMCADOi</span></span>
<span class="line"><span>pM1bF/JrQt3zUoc4BTqICaxdyzAfz0tUSf/7Zro2us99GlARqLWd8EqJcl/xmfcJ</span></span>
<span class="line"><span>iZyUam6ZAzzFXCgnH5Y1sdtMTJZdLp5WeOjwgCWG/ZLu4wzxOFFzDkiPv9RDw6e5</span></span>
<span class="line"><span>MNLtJrSp4hS5o2apKdbO4Ex83O4mJYnav/rEiDDCWU4T0lhv3hSKCpke6LcwsX+7</span></span>
<span class="line"><span>liozp+aNmP0Ypwfi4hR3UUMP70+V1beFqW2JbVLz3lLLouHRgpCzla+PzzbEKs16</span></span>
<span class="line"><span>jq77vG9kqZTCIzXoWaLljuitRlfJkO3vQ9hOv/8yAnkcAmowZrIBlyFg2KBzhunY</span></span>
<span class="line"><span>mN2YvkUAEQEAAQAH/A7r4hDrnmzX3QU6FAzePlRB7niJtE2IEN8AufF05Q2PzKU/</span></span>
<span class="line"><span>c1S72WjtqMAIAgYasDkOhfhcxanTneGuFVYggKT3eSDm1RFKpRjX22m0zKdwy67B</span></span>
<span class="line"><span>Mu95V2Oklul6OCm8dO6+2fmkGxGqc4ZsKy+jQxtxK3HG9YxMC0dvA2v2C5N4TWi3</span></span>
<span class="line"><span>Utc7zh//k6IbmaLd7F1d7DXt7Hn2Qsmo8I1rtgPE8grDToomTnRUodToyejEqKyI</span></span>
<span class="line"><span>ORwsp8n8g2CSFaXSrEyU6HbFYXSxZealhQJGYLFOZdR0MzVtZQCn/7n+IHjupndC</span></span>
<span class="line"><span>Nd2a8DVx3yQS3dAmvLzhFacZdjXi31wvj0moFOkEAOCz1E63SKNNksniQ11lRMJp</span></span>
<span class="line"><span>gaov6Ux/zGLMstwTzNouI+Kr8/db0GlSAy1Z3UoAB4tFQXEApoX9A4AJ2KqQjqOX</span></span>
<span class="line"><span>cZVULenfDZaxrbb9Lid7ZnTDXKVyGTWDF7ZHavHJ4981mCW17lU11zHBB9xMlx6p</span></span>
<span class="line"><span>dhFvb0gdy0jSLaFMFr/JBAD0fz3RrhP7e6Xll2zdBqGthjC5S/IoKwwBgw6ri2yx</span></span>
<span class="line"><span>LoxqBr2pl9PotJJ/JUMPhD/LxuTcOZtYjy8PKgm5jhnBDq3Ss0kNKAY1f5EkZG9a</span></span>
<span class="line"><span>6I4iAX/NekqSyF+OgBfC9aCgS5RG8hYoOCbp8na5R3bgiuS8IzmVmm5OhZ4MDEwg</span></span>
<span class="line"><span>nQP7BzmR0p5BahpZ8r3Ada7FcK+0ZLLRdLmOYF/yUrZ53SoYCZRzU/GmtQ7LkXBh</span></span>
<span class="line"><span>Gjqied9Bs1MHdNUolq7GaexcjZmOWHEf6w9+9M4+vxtQq1nkIWqtaphewEmd5/nf</span></span>
<span class="line"><span>EP3sIY0EAE3mmiLmHLqBju+UJKMNwFNeyMTqgcg50ISH8J9FRIkBJQQYAQIADwUC</span></span>
<span class="line"><span>VLVl/QIbDAUJAeEzgAAKCRAHfXJeICfMMOHYCACFhInZA9uAM3TC44l+MrgMUJ3r</span></span>
<span class="line"><span>W9izrO48WrdTsxR8WkSNbIxJoWnYxYuLyPb/shc9k65huw2SSDkj//0fRrI61FPH</span></span>
<span class="line"><span>QNPSvz62WH+N2lasoUaoJjb2kQGhLOnFbJuevkyBylRz+hI/+8rJKcZOjQkmmK8H</span></span>
<span class="line"><span>kk8qb5x/HMUc55H0g2qQAY0BpnJHgOOQ45Q6pk3G2/7Dbek5WJ6K1wUrFy51sNlG</span></span>
<span class="line"><span>WE8pvgEx/UUZB+dYqCwtvX0nnBu1KNCmk2AkEcFK3YoliCxomdOxhFOv9AKjjojD</span></span>
<span class="line"><span>yC65KJciPv2MikPS2fKOAg1R3LpMa8zDEtl4w3vckPQNrQNnYuUtfj6ZoCxv</span></span>
<span class="line"><span>=fa+6</span></span>
<span class="line"><span>-----END PGP PRIVATE KEY BLOCK-----&#39;) AS privkey) AS keys;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>username | decrypted_ssn </span></span>
<span class="line"><span>----------+---------------</span></span>
<span class="line"><span> Alice    | 123-45-6788</span></span>
<span class="line"><span> Bob      | 123-45-6799</span></span>
<span class="line"><span>(2 rows)</span></span></code></pre></div><p>If you created a key with passphrase, you may have to enter it here. However for the purpose of this example, the passphrase is blank.</p></li></ol><h3 id="key-management" tabindex="-1"><a id="keymgmt"></a>Key Management <a class="header-anchor" href="#key-management" aria-label="Permalink to &quot;&lt;a id=&quot;keymgmt&quot;&gt;&lt;/a&gt;Key Management&quot;">​</a></h3><p>Whether you are using symmetric (single private key) or asymmetric (public and private key) cryptography, it is important to store the coordinator or private key securely. There are many options for storing encryption keys, for example, on a file system, key vault, encrypted USB, trusted platform module (TPM), or hardware security module (HSM).</p><p>Consider the following questions when planning for key management:</p><ul><li>Where will the keys be stored?</li><li>When should keys expire?</li><li>How are keys protected?</li><li>How are keys accessed?</li><li>How can keys be recovered and revoked?</li></ul><p>The Open Web Application Security Project (OWASP) provides a very comprehensive <a href="https://www.owasp.org/index.php/Cryptographic_Storage_Cheat_Sheet" target="_blank" rel="noreferrer">guide to securing encryption keys</a>.</p><p><a id="fnsrc"></a><sup><a href="#fnsrc_1">1</a></sup> SHA2 algorithms were added to OpenSSL in version 0.9.8. For older versions, pgcrypto will use built-in code.<br><sup><a href="#fnsrc_2">2</a></sup> Any digest algorithm OpenSSL supports is automatically picked up. This is not possible with ciphers, which need to be supported explicitly.<br><sup><a href="#fnsrc_3">3</a></sup> AES is included in OpenSSL since version 0.9.7. For older versions, pgcrypto will use built-in code.</p>`,44)]))}const u=n(t,[["render",i]]);export{g as __pageData,u as default};
