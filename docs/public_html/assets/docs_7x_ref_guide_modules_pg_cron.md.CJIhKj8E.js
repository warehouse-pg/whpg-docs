import{_ as a,c as s,o as n,ag as t}from"./chunks/framework.Ds6Eueu6.js";const h=JSON.parse('{"title":"pg_cron","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/modules/pg_cron.md","filePath":"docs/7x/ref_guide/modules/pg_cron.md"}'),o={name:"docs/7x/ref_guide/modules/pg_cron.md"};function i(p,e,l,d,c,r){return n(),s("div",null,e[0]||(e[0]=[t(`<h1 id="pg-cron" tabindex="-1">pg_cron <a class="header-anchor" href="#pg-cron" aria-label="Permalink to &quot;pg_cron&quot;">​</a></h1><hr><p>The <code>pg_cron</code> module is a cron-based job scheduler that runs inside the database.</p><h2 id="installing-and-registering-the-module" tabindex="-1"><a id="topic_reg"></a>Installing and Registering the Module <a class="header-anchor" href="#installing-and-registering-the-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_reg&quot;&gt;&lt;/a&gt;Installing and Registering the Module&quot;">​</a></h2><p>The <code>pg_cron</code> module is installed when you install WarehousePG. Before you can use it, you must perform the following steps:</p><p>You can only install the <code>pg_cron</code> module in one database per WarehousePG cluster. First, set the database where you want <code>pg_cron</code> to create its metadata tables, by default it uses the <code>postgres</code> database. In order to change it, run the following command and restart WarehousePG:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpconfig -c cron.database_name -v &#39;db_name&#39; --skipvalidation</span></span></code></pre></div><p>Enable the extension as a preloaded library. First, check if there are any preloaded shared libraries by running the <code>gpconfig</code> command. The following example shows that the <code>auto_explain</code> libraries are already enabled for the cluster:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpconfig -s shared_preload_libraries</span></span>
<span class="line"><span>Values on all segments are consistent</span></span>
<span class="line"><span>GUC              : shared_preload_libraries</span></span>
<span class="line"><span>Coordinator value: auto_explain</span></span>
<span class="line"><span>Segment     value: auto_explain</span></span></code></pre></div><p>Use the output of the above command to enable the <code>pg_cron</code> module, along any other shared libraries, and restart WarehousePG:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpconfig -c shared_preload_libraries -v &#39;auto_explain,pg_cron&#39;</span></span>
<span class="line"><span>gpstop -ar</span></span></code></pre></div><p>Register the <code>pg_cron</code> extension in the desired database. You can only install <code>pg_cron</code> in one database per cluster.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE EXTENSION pg_cron;</span></span></code></pre></div><p>Optionally, grant usage to specific users:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>GRANT USAGE ON SCHEMA cron TO user1;</span></span></code></pre></div><p>Refer to <a href="./../../install_guide/install_extensions.html">Installing Extensions</a> for more information.</p><h2 id="upgrading-the-module" tabindex="-1"><a id="topic_upgrading"></a>Upgrading the Module <a class="header-anchor" href="#upgrading-the-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_upgrading&quot;&gt;&lt;/a&gt;Upgrading the Module&quot;">​</a></h2><p>The <code>pg_cron</code> module is installed when you install or upgrade WarehousePG. A previous version of the extension will continue to work in existing databases after you upgrade WarehousePG. To upgrade to the most recent version of the extension, you must:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER EXTENSION pg_cron UPDATE TO &#39;1.6.2&#39;;</span></span></code></pre></div><h2 id="using-the-pg-cron-module" tabindex="-1"><a id="topic_using"></a>Using the pg_cron Module <a class="header-anchor" href="#using-the-pg-cron-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_using&quot;&gt;&lt;/a&gt;Using the pg_cron Module&quot;">​</a></h2><p>Use the user-defined functions (UDFs) under the <code>cron</code> schema to schedule cron jobs in your default database. For example, configure a job that deletes old database data every Saturday at 3:30am (GMT):</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT cron.schedule(&#39;30 3 * * 6&#39;, $$DELETE FROM events WHERE event_time &lt; now() - interval &#39;1 week&#39;$$);</span></span>
<span class="line"><span> schedule</span></span>
<span class="line"><span>----------</span></span>
<span class="line"><span>       42</span></span></code></pre></div><p>Optionally, you may update the database column for the job that you just created so that it runs in another database within your WarehousePG cluster. Run the following command as a user with the superuser role:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>UPDATE cron.job SET database = &#39;database1&#39; WHERE jobid = 106;</span></span>
<span class="line"><span>SELECT cron.reload_job();</span></span></code></pre></div><p>You may use the UDF <code>cron.schedule_in_database()</code> to schedule jobs in multiple databases. Below are the function arguments:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cron.schedule_in_database(job_name text,</span></span>
<span class="line"><span>schedule text,</span></span>
<span class="line"><span>command text,</span></span>
<span class="line"><span>database text,</span></span>
<span class="line"><span>username text default null,</span></span>
<span class="line"><span>active boolean default &#39;true&#39;)</span></span></code></pre></div><p>For example, run <code>VACUUM</code> every Sunday at 4:00am (GMT) in a database other than the one <code>pg_cron</code> is installed on:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT cron.schedule_in_database(&#39;weekly-vacuum&#39;, &#39;0 4 * * 0&#39;, &#39;VACUUM&#39;, &#39;some_other_database&#39;);</span></span>
<span class="line"><span> schedule</span></span>
<span class="line"><span>----------</span></span>
<span class="line"><span>       44</span></span></code></pre></div><blockquote><p><strong>Important</strong> Since the <code>TRIGGER</code> statement is not supported in WarehousePG, if a user runs an <code>UPDATE</code> or <code>INSERT</code> statement, or manually deletes any of the cron jobs instead of using the UDFs in the <code>cron</code> schema, you must run the following UDF to update the <code>pg_cron</code> cache:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT cron.reload_job();</span></span></code></pre></div></blockquote><blockquote><p><strong>Note</strong> The server configuration parameter <code>cron.use_background_workers</code> is not supported on WarehousePG 6.</p></blockquote><h2 id="module-documentation" tabindex="-1"><a id="topic_docs"></a>Module Documentation <a class="header-anchor" href="#module-documentation" aria-label="Permalink to &quot;&lt;a id=&quot;topic_docs&quot;&gt;&lt;/a&gt;Module Documentation&quot;">​</a></h2><p>Refer to the <a href="https://github.com/citusdata/pg_cron/tree/main" target="_blank" rel="noreferrer">pg_cron github documentation</a> for more information about using the module.</p>`,32)]))}const g=a(o,[["render",i]]);export{h as __pageData,g as default};
