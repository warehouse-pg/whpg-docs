import{_ as a,c as i,o as t,ag as s}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"Creating and Managing Materialized Views","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/ddl/ddl-mat-view.md","filePath":"docs/7x/admin_guide/ddl/ddl-mat-view.md"}'),n={name:"docs/7x/admin_guide/ddl/ddl-mat-view.md"};function d(o,e,r,l,c,p){return t(),i("div",null,e[0]||(e[0]=[s(`<h1 id="creating-and-managing-materialized-views" tabindex="-1">Creating and Managing Materialized Views <a class="header-anchor" href="#creating-and-managing-materialized-views" aria-label="Permalink to &quot;Creating and Managing Materialized Views&quot;">​</a></h1><hr><p>Materialized views are similar to views. A materialized view enables you to save a frequently used or complex query, then access the query results in a <code>SELECT</code> statement as if they were a table. Materialized views persist the query results in a table-like form. While access to the data stored in a materialized view can be much faster than accessing the underlying tables directly or through a view, the data is not always current.</p><p>The materialized view data cannot be directly updated. To refresh the materialized view data, use the <code>REFRESH MATERIALIZED VIEW</code> command. The query used to create the materialized view is stored in exactly the same way that a view&#39;s query is stored. For example, you can create a materialized view that quickly displays a summary of historical sales data for situations where having incomplete data for the current date would be acceptable.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE MATERIALIZED VIEW sales_summary AS</span></span>
<span class="line"><span>  SELECT seller_no, invoice_date, sum(invoice_amt)::numeric(13,2) as sales_amt</span></span>
<span class="line"><span>    FROM invoice</span></span>
<span class="line"><span>    WHERE invoice_date &lt; CURRENT_DATE</span></span>
<span class="line"><span>    GROUP BY seller_no, invoice_date</span></span>
<span class="line"><span>    ORDER BY seller_no, invoice_date;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>CREATE UNIQUE INDEX sales_summary_seller</span></span>
<span class="line"><span>  ON sales_summary (seller_no, invoice_date);</span></span></code></pre></div><p>The materialized view might be useful for displaying a graph in the dashboard created for sales people. You could schedule a job to update the summary information each night using this command.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>REFRESH MATERIALIZED VIEW sales_summary;</span></span></code></pre></div><p>The information about a materialized view in the WarehousePG cluster catalogs is exactly the same as it is for a table or view. A materialized view is a relation, just like a table or a view. When a materialized view is referenced in a query, the data is returned directly from the materialized view, just like from a table. The query in the materialized view definition is only used for populating the materialized view.</p><p>If you can tolerate periodic updates of materialized view data, the performance benefit can be substantial.</p><p>One use of a materialized view is to allow faster access to data brought in from an external data source such as external table or a foreign data wrapper. Also, you can define indexes on a materialized view, whereas foreign data wrappers do not support indexes; this advantage might not apply for other types of external data access.</p><p>If a subquery is associated with a single query, consider using the <code>WITH</code> clause of the <code>SELECT</code> command instead of creating a seldom-used materialized view.</p><p><strong>Parent topic:</strong> <a href="./../ddl/ddl.html">DDL: Defining Database Objects</a></p><h2 id="creating-materialized-views" tabindex="-1"><a id="topic_hn3_xy5_kjb"></a>Creating Materialized Views <a class="header-anchor" href="#creating-materialized-views" aria-label="Permalink to &quot;&lt;a id=&quot;topic_hn3_xy5_kjb&quot;&gt;&lt;/a&gt;Creating Materialized Views&quot;">​</a></h2><p>The <code>CREATE MATERIALIZED VIEW</code>command defines a materialized view based on a query.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE MATERIALIZED VIEW us_users AS SELECT u.id, u.name, a.zone FROM users u, address a WHERE a.country = &#39;USA&#39;;</span></span></code></pre></div><p>If a materialized view query contains an <code>ORDER BY</code> or <code>SORT</code> clause, the clause is ignored when a <code>SELECT</code> is performed on the materialized query.</p><h2 id="refreshing-or-deactivating-materialized-views" tabindex="-1"><a id="topic_vwd_zy5_kjb"></a>Refreshing or Deactivating Materialized Views <a class="header-anchor" href="#refreshing-or-deactivating-materialized-views" aria-label="Permalink to &quot;&lt;a id=&quot;topic_vwd_zy5_kjb&quot;&gt;&lt;/a&gt;Refreshing or Deactivating Materialized Views&quot;">​</a></h2><p>The <code>REFRESH MATERIALIZED VIEW</code> command updates the materialized view data.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>REFRESH MATERIALIZED VIEW us_users;</span></span></code></pre></div><p>With the <code>WITH NO DATA</code> clause, the current data is removed, no new data is generated, and the materialized view is left in an unscannable state. An error is returned if a query attempts to access an unscannable materialized view.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>REFRESH MATERIALIZED VIEW us_users WITH NO DATA;</span></span></code></pre></div><h2 id="dropping-materialized-views" tabindex="-1"><a id="topic_in3_xy5_kjb"></a>Dropping Materialized Views <a class="header-anchor" href="#dropping-materialized-views" aria-label="Permalink to &quot;&lt;a id=&quot;topic_in3_xy5_kjb&quot;&gt;&lt;/a&gt;Dropping Materialized Views&quot;">​</a></h2><p>The <code>DROP MATERIALIZED VIEW</code> command removes a materialized view definition and data. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP MATERIALIZED VIEW us_users;</span></span></code></pre></div><p>The <code>DROP MATERIALIZED VIEW ... CASCADE</code> command also removes all dependent objects. For example, if another materialized view depends on the materialized view which is about to be dropped, the other materialized view will be dropped as well. Without the <code>CASCADE</code> option, the <code>DROP MATERIALIZED VIEW</code> command fails.</p>`,25)]))}const m=a(n,[["render",d]]);export{u as __pageData,m as default};
