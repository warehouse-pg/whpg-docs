import{_ as s,c as n,o as t,ag as a}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"Configuring Proxies for the WarehousePG Interconnect","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/managing/proxy-ic.md","filePath":"docs/7x/admin_guide/managing/proxy-ic.md"}'),o={name:"docs/7x/admin_guide/managing/proxy-ic.md"};function p(r,e,i,c,l,d){return t(),n("div",null,e[0]||(e[0]=[a(`<h1 id="configuring-proxies-for-the-warehousepg-interconnect" tabindex="-1">Configuring Proxies for the WarehousePG Interconnect <a class="header-anchor" href="#configuring-proxies-for-the-warehousepg-interconnect" aria-label="Permalink to &quot;Configuring Proxies for the WarehousePG Interconnect&quot;">​</a></h1><hr><p>You can configure a WarehousePG cluster to use proxies for interconnect communication to reduce the use of connections and ports during query processing.</p><p>The WarehousePG <em>interconnect</em> (the networking layer) refers to the inter-process communication between segments and the network infrastructure on which this communication relies. For information about the WarehousePG architecture and interconnect, see <a href="./../intro/arch_overview.html">About the WarehousePG Architecture</a>.</p><p>In general, when running a query, a QD (query dispatcher) on the WarehousePG coordinator creates connections to one or more QE (query executor) processes on segments, and a QE can create connections to other QEs. For a description of WarehousePG query processing and parallel query processing, see <a href="./../query/topics/parallel-proc.html">About WarehousePG Query Processing</a>.</p><p>By default, connections between the QD on the coordinator and QEs on segment instances and between QEs on different segment instances require a separate network port. You can configure a WarehousePG cluster to use proxies when WarehousePG communicates between the QD and QEs and between QEs on different segment instances. The interconnect proxies require only one network connection for WarehousePG internal communication between two segment instances, so it consumes fewer connections and ports than <code>TCP</code> mode, and has better performance than <code>UDPIFC</code> mode in a high-latency network.</p><p>To enable interconnect proxies for the WarehousePG cluster, set these system configuration parameters.</p><ul><li>List the proxy ports with the parameter <a href="./../../ref_guide/config_params/guc-list.html#gp_interconnect_proxy_addresses">gp_interconnect_proxy_addresses</a>. You must specify a proxy port for the coordinator, standby coordinator, and all segment instances.</li><li>Set the parameter <a href="./../../ref_guide/config_params/guc-list.html#gp_interconnect_type">gp_interconnect_type</a> to <code>proxy</code>.</li></ul><blockquote><p><strong>Note</strong> When expanding a WarehousePG cluster, you must deactivate interconnect proxies before adding new hosts and segment instances to the system, and you must update the <code>gp_interconnect_proxy_addresses</code> parameter with the newly-added segment instances before you re-enable interconnect proxies.</p></blockquote><p><strong>Parent topic:</strong> <a href="./../managing/managing.html">Managing a WarehousePG cluster</a></p><h2 id="example" tabindex="-1"><a id="topic_z4l_lcg_4mb"></a>Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;&lt;a id=&quot;topic_z4l_lcg_4mb&quot;&gt;&lt;/a&gt;Example&quot;">​</a></h2><p>This example sets up a WarehousePG cluster to use proxies for the WarehousePG interconnect when running queries. The example sets the <a href="./../../ref_guide/config_params/guc-list.html#gp_interconnect_proxy_addresses">gp_interconnect_proxy_addresses</a> parameter and tests the proxies before setting the <a href="./../../ref_guide/config_params/guc-list.html#gp_interconnect_type">gp_interconnect_type</a> parameter for the WarehousePG cluster.</p><ul><li><a href="#set_proxy_address">Setting the Interconnect Proxy Addresses</a></li><li><a href="#test_proxy">Testing the Interconnect Proxies</a></li><li><a href="#set_gpdb_proxy">Setting Interconnect Proxies for the System</a></li></ul><h3 id="setting-the-interconnect-proxy-addresses" tabindex="-1"><a id="set_proxy_address"></a>Setting the Interconnect Proxy Addresses <a class="header-anchor" href="#setting-the-interconnect-proxy-addresses" aria-label="Permalink to &quot;&lt;a id=&quot;set_proxy_address&quot;&gt;&lt;/a&gt;Setting the Interconnect Proxy Addresses&quot;">​</a></h3><p>Set the <code>gp_interconnect_proxy_addresses</code> parameter to specify the proxy ports for the coordinator and segment instances. The syntax for the value has the following format and you must specify the parameter value as a single-quoted string.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>&lt;db_id&gt;:&lt;cont_id&gt;:&lt;seg_address&gt;:&lt;port&gt;[, ... ]</span></span></code></pre></div><p>For the coordinator, standby coordinator, and segment instance, the first three fields, db_id, cont_id, and seg_address can be found in the <a href="./../../ref_guide/system_catalogs/gp_segment_configuration.html">gp_segment_configuration</a> catalog table. The fourth field, port, is the proxy port for the WarehousePG coordinator or a segment instance.</p><ul><li>db_id is the <code>dbid</code> column in the catalog table.</li><li>cont_id is the <code>content</code> column in the catalog table.</li><li>seg_address is the IP address or hostname corresponding to the <code>address</code> column in the catalog table.</li><li>port is the TCP/IP port for the segment instance proxy that you specify.</li></ul><blockquote><p><strong>Important</strong> If a segment instance hostname is bound to a different IP address at runtime, you must run <code>gpstop -u</code> to re-load the <code>gp_interconnect_proxy_addresses</code> value.</p></blockquote><p>This is an example PL/Python function that displays or sets the segment instance proxy port values for the <code>gp_interconnect_proxy_addresses</code> parameter. To create and run the function, you must enable PL/Python in the database with the <code>CREATE EXTENSION plpython3u</code> command.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>--</span></span>
<span class="line"><span>-- A PL/Python function to setup the interconnect proxy addresses.</span></span>
<span class="line"><span>-- Requires the Python modules os and socket.</span></span>
<span class="line"><span>--</span></span>
<span class="line"><span>-- Usage:</span></span>
<span class="line"><span>--   select my_setup_ic_proxy(-1000, &#39;&#39;);              -- display IC proxy values for segments</span></span>
<span class="line"><span>--   select my_setup_ic_proxy(-1000, &#39;update proxy&#39;);  -- update the gp_interconnect_proxy_addresses parameter</span></span>
<span class="line"><span>--</span></span>
<span class="line"><span>-- The first argument, &quot;delta&quot;, is used to calculate the proxy port with this formula:</span></span>
<span class="line"><span>--</span></span>
<span class="line"><span>--   proxy_port = postmaster_port + delta</span></span>
<span class="line"><span>--</span></span>
<span class="line"><span>-- The second argument, &quot;action&quot;, is used to update the gp_interconnect_proxy_addresses parameter.</span></span>
<span class="line"><span>-- The parameter is not updated unless &quot;action&quot; is &#39;update proxy&#39;.</span></span>
<span class="line"><span>-- Note that running  &quot;gpstop -u&quot; is required for the update to take effect. </span></span>
<span class="line"><span>-- A WarehousePG cluster restart will also work.</span></span>
<span class="line"><span>--</span></span>
<span class="line"><span>create or replace function my_setup_ic_proxy(delta int, action text)</span></span>
<span class="line"><span>returns table(dbid smallint, content smallint, address text, port int) as $$</span></span>
<span class="line"><span>    import os</span></span>
<span class="line"><span>    import socket</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    results = []</span></span>
<span class="line"><span>    value = &#39;&#39;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    segs = plpy.execute(&#39;&#39;&#39;SELECT dbid, content, port, address</span></span>
<span class="line"><span>                              FROM gp_segment_configuration</span></span>
<span class="line"><span>                            ORDER BY 1&#39;&#39;&#39;)</span></span>
<span class="line"><span>    for seg in segs:</span></span>
<span class="line"><span>        dbid = seg[&#39;dbid&#39;]</span></span>
<span class="line"><span>        content = seg[&#39;content&#39;]</span></span>
<span class="line"><span>        port = seg[&#39;port&#39;]</span></span>
<span class="line"><span>        address = seg[&#39;address&#39;]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        # decide the proxy port</span></span>
<span class="line"><span>        port = port + delta</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        # append to the result list</span></span>
<span class="line"><span>        results.append((dbid, content, address, port))</span></span>
<span class="line"><span></span></span>
<span class="line"><span>        # build the value for the GUC</span></span>
<span class="line"><span>        if value:</span></span>
<span class="line"><span>            value += &#39;,&#39;</span></span>
<span class="line"><span>        value += &#39;{}:{}:{}:{}&#39;.format(dbid, content, address, port)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    if action.lower() == &#39;update proxy&#39;:</span></span>
<span class="line"><span>        os.system(&#39;&#39;&#39;gpconfig --skipvalidation -c gp_interconnect_proxy_addresses -v &quot;&#39;{}&#39;&quot;&#39;&#39;&#39;.format(value))</span></span>
<span class="line"><span>        plpy.notice(&#39;&#39;&#39;the settings are applied, please reload with &#39;gpstop -u&#39; to take effect.&#39;&#39;&#39;)</span></span>
<span class="line"><span>    else:</span></span>
<span class="line"><span>        plpy.notice(&#39;&#39;&#39;if the settings are correct, re-run with &#39;update proxy&#39; to apply.&#39;&#39;&#39;)</span></span>
<span class="line"><span>    return results</span></span>
<span class="line"><span>$$ language plpython3u execute on coordinator;</span></span></code></pre></div><blockquote><p><strong>Note</strong> When you run the function, you should connect to the database using the WarehousePG interconnect type <code>UDPIFC</code> or <code>TCP</code>. This example uses <code>psql</code> to connect to the database <code>mytest</code> with the interconnect type <code>UDPIFC</code>.</p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>PGOPTIONS=&quot;-c gp_interconnect_type=udpifc&quot; psql -d mytest</span></span></code></pre></div><p>Running this command lists the segment instance values for the <code>gp_interconnect_proxy_addresses</code> parameter.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select my_setup_ic_proxy(-1000, &#39;&#39;);</span></span></code></pre></div><p>This command runs the function to set the parameter.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>select my_setup_ic_proxy(-1000, &#39;update proxy&#39;);</span></span></code></pre></div><p>As an alternative, you can run the s<a href="./../../utility_guide/ref/gpconfig.html">gpconfig</a> utility to set the <code>gp_interconnect_proxy_addresses</code> parameter. To set the value as a string, the value is a single-quoted string that is enclosed in double quotes. The example WarehousePG cluster consists of a coordinator and a single segment instance.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpconfig --skipvalidation -c gp_interconnect_proxy_addresses -v &quot;&#39;1:-1:192.168.180.50:35432,2:0:192.168.180.54:35000&#39;&quot;</span></span></code></pre></div><p>After setting the <code>gp_interconnect_proxy_addresses</code> parameter, reload the <code>postgresql.conf</code> file with the <code>gpstop -u</code> command. This command does not stop and restart the WarehousePG cluster.</p><h3 id="testing-the-interconnect-proxies" tabindex="-1"><a id="test_proxy"></a>Testing the Interconnect Proxies <a class="header-anchor" href="#testing-the-interconnect-proxies" aria-label="Permalink to &quot;&lt;a id=&quot;test_proxy&quot;&gt;&lt;/a&gt;Testing the Interconnect Proxies&quot;">​</a></h3><p>To test the proxy ports configured for the system, you can set the <code>PGOPTIONS</code> environment variable when you start a <code>psql</code> session in a command shell. This command sets the environment variable to enable interconnect proxies, starts <code>psql</code>, and logs into the database <code>mytest</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>PGOPTIONS=&quot;-c gp_interconnect_type=proxy&quot; psql -d mytest</span></span></code></pre></div><p>You can run queries in the shell to test the system. For example, you can run a query that accesses all the primary segment instances. This query displays the segment IDs and number of rows on the segment instance from the table <code>sales</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span># SELECT gp_segment_id, COUNT(*) FROM sales GROUP BY gp_segment_id ;</span></span></code></pre></div><h3 id="setting-interconnect-proxies-for-the-system" tabindex="-1"><a id="set_gpdb_proxy"></a>Setting Interconnect Proxies for the System <a class="header-anchor" href="#setting-interconnect-proxies-for-the-system" aria-label="Permalink to &quot;&lt;a id=&quot;set_gpdb_proxy&quot;&gt;&lt;/a&gt;Setting Interconnect Proxies for the System&quot;">​</a></h3><p>After you have tested the interconnect proxies for the system, set the server configuration parameter for the system with the <code>gpconfig</code> utility.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpconfig -c  gp_interconnect_type -v proxy</span></span></code></pre></div><p>Reload the <code>postgresql.conf</code> file with the <code>gpstop -u</code> command. This command does not stop and restart the WarehousePG cluster.</p>`,39)]))}const g=s(o,[["render",p]]);export{u as __pageData,g as default};
