import{_ as a,c as n,o as e,ag as p}from"./chunks/framework.Ds6Eueu6.js";const h=JSON.parse('{"title":"Example Ansible Playbook","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/install_guide/ansible-example.md","filePath":"docs/7x/install_guide/ansible-example.md"}'),l={name:"docs/7x/install_guide/ansible-example.md"};function t(o,s,i,r,c,d){return e(),n("div",null,s[0]||(s[0]=[p(`<h1 id="example-ansible-playbook" tabindex="-1">Example Ansible Playbook <a class="header-anchor" href="#example-ansible-playbook" aria-label="Permalink to &quot;Example Ansible Playbook&quot;">​</a></h1><hr><p>A sample Ansible playbook to install a WarehousePG software release onto the hosts that will comprise a WarehousePG cluster.</p><p>This Ansible playbook shows how tasks described in [Installing WarehousePG]() might be automated using <a href="https://docs.ansible.com" target="_blank" rel="noreferrer">Ansible</a>.</p><blockquote><p><strong>Important</strong> This playbook is provided as an <em>example only</em> to illustrate how WarehousePG cluster configuration and software installation tasks can be automated using provisioning tools such as Ansible, Chef, or Puppet. VMware does not provide support for Ansible or for the playbook presented in this example.</p></blockquote><p>The example playbook is designed for use with RedHat. It creates the <code>gpadmin</code> user, installs the WarehousePG software release, sets the owner and group of the installed software to <code>gpadmin</code>, and sets the Pam security limits for the <code>gpadmin</code> user.</p><p>You can revise the script to work with your operating system platform and to perform additional host configuration tasks.</p><p>Following are steps to use this Ansible playbook.</p><ol><li><p>Install Ansible on the control node using your package manager. See the <a href="https://docs.ansible.com" target="_blank" rel="noreferrer">Ansible documentation</a> for help with installation.</p></li><li><p>Set up passwordless SSH from the control node to all hosts that will be a part of the WarehousePG cluster. You can use the <code>ssh-copy-id</code> command to install your public SSH key on each host in the cluster. Alternatively, your provisioning software may provide more convenient ways to securely install public keys on multiple hosts.</p></li><li><p>Create an Ansible inventory by creating a file called <code>hosts</code> with a list of the hosts that will comprise your WarehousePG cluster. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>cdw</span></span>
<span class="line"><span>sdw1</span></span>
<span class="line"><span>sdw2</span></span>
<span class="line"><span>...</span></span></code></pre></div><p>This file can be edited and used with the WarehousePG <code>gpssh-exkeys</code> and <code>gpinitsystem</code> utilities later on.</p></li><li><p>Copy the playbook code below to a file <code>ansible-playbook.yml</code> on your Ansible control node.</p></li><li><p>Edit the playbook variables at the top of the playbook, such as the <code>gpadmin</code> administrative user and password to create, and the version of WarehousePG you are installing.</p></li><li><p>Run the playbook, passing the package to be installed to the <code>package_path</code> parameter.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ansible-playbook ansible-playbook.yml -i hosts -e package_path=./greenplum-db-7.0.0-rhel8-x86_64.rpm</span></span></code></pre></div></li></ol><h2 id="ansible-playbook-warehousepg-installation-for-redhat" tabindex="-1"><a id="fixme"></a>Ansible Playbook - WarehousePG Installation for RedHat <a class="header-anchor" href="#ansible-playbook-warehousepg-installation-for-redhat" aria-label="Permalink to &quot;&lt;a id=&quot;fixme&quot;&gt;&lt;/a&gt;Ansible Playbook - WarehousePG Installation for RedHat&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span>---</span></span>
<span class="line"><span></span></span>
<span class="line"><span>- hosts: all</span></span>
<span class="line"><span>  vars:</span></span>
<span class="line"><span>    - version: &quot;7.0.0&quot;</span></span>
<span class="line"><span>    - greenplum_admin_user: &quot;gpadmin&quot;</span></span>
<span class="line"><span>    - greenplum_admin_password: &quot;changeme&quot;</span></span>
<span class="line"><span>    # - package_path: passed via the command line with: -e package_path=./greenplum-db-7.0.0-rhel8-x86_64.rpm</span></span>
<span class="line"><span>  remote_user: root</span></span>
<span class="line"><span>  become: yes</span></span>
<span class="line"><span>  become_method: sudo</span></span>
<span class="line"><span>  connection: ssh</span></span>
<span class="line"><span>  gather_facts: yes</span></span>
<span class="line"><span>  tasks:</span></span>
<span class="line"><span>    - name: create greenplum admin user</span></span>
<span class="line"><span>      user:</span></span>
<span class="line"><span>        name: &quot;{{ greenplum_admin_user }}&quot;</span></span>
<span class="line"><span>        password: &quot;{{ greenplum_admin_password | password_hash(&#39;sha512&#39;, &#39;DvkPtCtNH+UdbePZfm9muQ9pU&#39;) }}&quot;</span></span>
<span class="line"><span>    - name: copy package to host</span></span>
<span class="line"><span>      copy:</span></span>
<span class="line"><span>        src: &quot;{{ package_path }}&quot;</span></span>
<span class="line"><span>        dest: /tmp</span></span>
<span class="line"><span>    - name: install package</span></span>
<span class="line"><span>      yum:</span></span>
<span class="line"><span>        name: &quot;/tmp/{{ package_path | basename }}&quot;</span></span>
<span class="line"><span>        state: present</span></span>
<span class="line"><span>    - name: cleanup package file from host</span></span>
<span class="line"><span>      file:</span></span>
<span class="line"><span>        path: &quot;/tmp/{{ package_path | basename }}&quot;</span></span>
<span class="line"><span>        state: absent</span></span>
<span class="line"><span>    - name: find install directory</span></span>
<span class="line"><span>      find:</span></span>
<span class="line"><span>        paths: /usr/local</span></span>
<span class="line"><span>        patterns: &#39;greenplum*&#39;</span></span>
<span class="line"><span>        file_type: directory</span></span>
<span class="line"><span>      register: installed_dir</span></span>
<span class="line"><span>    - name: change install directory ownership</span></span>
<span class="line"><span>      file:</span></span>
<span class="line"><span>        path: &#39;{{ item.path }}&#39;</span></span>
<span class="line"><span>        owner: &quot;{{ greenplum_admin_user }}&quot;</span></span>
<span class="line"><span>        group: &quot;{{ greenplum_admin_user }}&quot;</span></span>
<span class="line"><span>        recurse: yes</span></span>
<span class="line"><span>      with_items: &quot;{{ installed_dir.files }}&quot;</span></span>
<span class="line"><span>    - name: update pam_limits</span></span>
<span class="line"><span>      pam_limits:</span></span>
<span class="line"><span>        domain: &quot;{{ greenplum_admin_user }}&quot;</span></span>
<span class="line"><span>        limit_type: &#39;-&#39;</span></span>
<span class="line"><span>        limit_item: &quot;{{ item.key }}&quot;</span></span>
<span class="line"><span>        value: &quot;{{ item.value }}&quot;</span></span>
<span class="line"><span>      with_dict:</span></span>
<span class="line"><span>        nofile: 524288</span></span>
<span class="line"><span>        nproc: 131072</span></span>
<span class="line"><span>    - name: find installed greenplum version</span></span>
<span class="line"><span>      shell: . /usr/local/greenplum-db/greenplum_path.sh &amp;&amp; /usr/local/greenplum-db/bin/postgres --gp-version</span></span>
<span class="line"><span>      register: postgres_gp_version</span></span>
<span class="line"><span>    - name: fail if the correct greenplum version is not installed</span></span>
<span class="line"><span>      fail:</span></span>
<span class="line"><span>        msg: &quot;Expected greenplum version {{ version }}, but found &#39;{{ postgres_gp_version.stdout }}&#39;&quot;</span></span>
<span class="line"><span>      when: &quot;version is not defined or version not in postgres_gp_version.stdout&quot;</span></span></code></pre></div><p>When the playbook has run successfully, you can proceed with <a href="./create_data_dirs.html">Creating the Data Storage Areas</a> and <a href="./init_whpg.html">Initializing WarehousePG</a>.</p><p><strong>Parent topic:</strong> <a href="./install_guide/">Installing and Upgrading WarehousePG</a></p>`,13)]))}const m=a(l,[["render",t]]);export{h as __pageData,m as default};
