import{_ as t,c as s,o as n,ag as a}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"pgbouncer.ini","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/utility_guide/ref/pgbouncer-ini.md","filePath":"docs/7x/utility_guide/ref/pgbouncer-ini.md"}'),o={name:"docs/7x/utility_guide/ref/pgbouncer-ini.md"};function i(r,e,c,p,d,l){return n(),s("div",null,e[0]||(e[0]=[a(`<h1 id="pgbouncer-ini" tabindex="-1">pgbouncer.ini <a class="header-anchor" href="#pgbouncer-ini" aria-label="Permalink to &quot;pgbouncer.ini&quot;">​</a></h1><hr><p>PgBouncer configuration file.</p><h2 id="synopsis" tabindex="-1"><a id="syn"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;syn&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[databases]</span></span>
<span class="line"><span>db = ...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[pgbouncer]</span></span>
<span class="line"><span>...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[users]</span></span>
<span class="line"><span>...</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="desc"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;desc&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p>You specify PgBouncer configuration parameters and identify user-specific configuration parameters in a configuration file.</p><p>The PgBouncer configuration file (typically named <code>pgbouncer.ini</code>) is specified in <code>.ini</code> format. Files in <code>.ini</code> format are composed of sections, parameters, and values. Section names are enclosed in square brackets, for example, <code>[&lt;section_name&gt;]</code>. Parameters and values are specified in <code>key=value</code> format. Lines beginning with a semicolon (<code>;</code>) or pound sign (<code>#</code>) are considered comment lines and are ignored.</p><p>The PgBouncer configuration file can contain <code>%include</code> directives, which specify another file to read and process. This enables you to split the configuration file into separate parts. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>%include filename</span></span></code></pre></div><p>If the filename provided is not an absolute path, the file system location is taken as relative to the current working directory.</p><p>The PgBouncer configuration file includes the following sections, described in detail below:</p><ul><li><a href="#topic_fmd_ckd_gs">[databases] Section</a></li><li><a href="#topic_orc_gkd_gs">[pgbouncer] Section</a></li><li><a href="#topic_lzk_zjd_gs">[users] Section</a></li><li><a href="#topic_peers">[peers] Section</a></li></ul><h2 id="databases-section" tabindex="-1"><a id="topic_fmd_ckd_gs"></a>[databases] Section <a class="header-anchor" href="#databases-section" aria-label="Permalink to &quot;&lt;a id=&quot;topic_fmd_ckd_gs&quot;&gt;&lt;/a&gt;\\[databases\\] Section&quot;">​</a></h2><p>The <code>[databases]</code> section contains <code>key=value</code> pairs, where the <code>key</code> is a database name and the <code>value</code> is a <code>libpq</code> connect-string list of <code>key</code>=<code>value</code> pairs. Not all features known from <code>libpq</code> can be used (service=, .pgpass), since the actual <code>libpq</code> is not used.</p><p>A database name can contain characters <code>[0-9A-Za-z_.-]</code> without quoting. Names that contain other characters must be quoted with standard SQL identifier quoting:</p><ul><li>Enclose names in double quotes (<code>&quot; &quot;</code>).</li><li>Represent a double-quote within an identifier with two consecutive double quote characters.</li></ul><p>The database name <code>*</code> is the fallback database. PgBouncer uses the value for this key as a connect string for the requested database. Automatically-created database entries such as these are cleaned up if they remain idle longer than the time specified in <code>autodb_idle_timeout</code> parameter.</p><h3 id="database-connection-parameters" tabindex="-1"><a id="dbconn"></a>Database Connection Parameters <a class="header-anchor" href="#database-connection-parameters" aria-label="Permalink to &quot;&lt;a id=&quot;dbconn&quot;&gt;&lt;/a&gt;Database Connection Parameters&quot;">​</a></h3><p>The following parameters may be included in the <code>value</code> to specify the location of the database.</p><p>dbname : The destination database name.</p><pre><code>Default: the client-specified database name
</code></pre><p>host : The name or IP address of the WarehousePG coordinator host. Host names are resolved at connect time. If DNS returns several results, they are used in a round-robin manner. The DNS result is cached and the <code>dns_max_ttl</code> parameter determines when the cache entry expires.</p><p>: When a host name’s resolution changes, any existing server connections are automatically closed when they are released (according to the pooling mode).</p><p>: If the value begins with <code>/</code>, then a Unix socket in the file-system namespace is used. If the value begins with <code>@</code>, then a Unix socket in the abstract namespace is used.</p><p>: You may specify a comma-separated list of host names or addresses. In that case, connections are made in a round-robin manner. If a host list contains host names that in turn resolve via DNS to multiple addresses, the round-robin systems operate independently. Note that in a list, all hosts must be available at all times: There are no mechanisms to skip unreachable hosts or to select only available hosts from a list. Also note that this only affects how the destinations of new connections are chosen. See also the setting <code>server_round_robin</code> in the <code>[pgbouncer]</code> section for how clients are assigned to already established server connections.</p><p>: Examples:</p><pre><code>\`\`\`
host=localhost
host=127.0.0.1
host=2001:0db8:85a3:0000:0000:8a2e:0370:7334
host=/var/run/postgresql
host=192.168.0.1,192.168.0.2,192.168.0.3
\`\`\`
</code></pre><p>: Default: not set; the connection is made through a Unix socket</p><p>port : The WarehousePG coordinator port.</p><p>: Default: 5432</p><p>user : If <code>user=</code> is set, all connections to the destination database are initiated as the specified user, resulting in a single connection pool for the database.</p><p>: If the <code>user=</code> parameter is not set, PgBouncer attempts to log in to the destination database with the user name passed by the client. In this situation, there will be one pool for each user who connects to the database.</p><p>password : If no password is specified here, the password from the <code>auth_file</code> or <code>auth_query</code> will be used.</p><p>auth_user : Override of the global <code>auth_user</code> setting, if specified.</p><p>client_encoding : Ask for specific <code>client_encoding</code> from server.</p><p>datestyle : Ask for specific <code>datestyle</code> from server.</p><p>timezone : Ask for specific <code>timezone</code> from server.</p><h3 id="pool-configuration" tabindex="-1"><a id="poolconfig"></a>Pool Configuration <a class="header-anchor" href="#pool-configuration" aria-label="Permalink to &quot;&lt;a id=&quot;poolconfig&quot;&gt;&lt;/a&gt;Pool Configuration&quot;">​</a></h3><p>You can use the following parameters for database-specific pool configuration.</p><p>pool_size : Set the maximum size of pools for this database. If not set, the <code>default_pool_size</code> is used.</p><p>min_pool_size : Set the minimum pool size for this database. If not set, the global <code>min_pool_size</code> is used.</p><p>: It is only enforced if at least one of the following is true: - This entry in the <code>[database]</code> section has a value set for the <code>user</code>. - There i at least one client connected to the pool.</p><p>reserve_pool : Set additional connections for this database. If not set, <code>reserve_pool_size</code> is used.</p><p>connect_query : Query to be run after a connection is established, but before allowing the connection to be used by any clients. If the query raises errors, they are logged but ignored otherwise.</p><p>pool_mode : Set the pool mode specific to this database. If not set, the default <code>pool_mode</code> is used.</p><p>max_db_connections : Set a database-wide maximum number of PgBouncer connections for this database. The total number of connections for all pools for this database will not exceed this value.</p><h2 id="pgbouncer-section" tabindex="-1"><a id="topic_orc_gkd_gs"></a>[pgbouncer] Section <a class="header-anchor" href="#pgbouncer-section" aria-label="Permalink to &quot;&lt;a id=&quot;topic_orc_gkd_gs&quot;&gt;&lt;/a&gt;\\[pgbouncer\\] Section&quot;">​</a></h2><h3 id="generic-settings" tabindex="-1"><a id="genset"></a>Generic Settings <a class="header-anchor" href="#generic-settings" aria-label="Permalink to &quot;&lt;a id=&quot;genset&quot;&gt;&lt;/a&gt;Generic Settings&quot;">​</a></h3><p>logfile : The location of the log file. For daemonization (<code>-d</code>), either this or <code>syslog</code> need to be set. The log file is kept open. After log rotation, run <code>kill -HUP pgbouncer</code> or run the <code>RELOAD</code> command in the PgBouncer Administration Console.</p><p>: Note that setting <code>logfile</code> does not by itself turn off logging to <code>stderr</code>. Use the command-line option <code>-q</code> or <code>-d</code> for that.</p><pre><code>Default: not set
</code></pre><p>pidfile : The name of the pid file. Without a <code>pidfile</code>, you cannot run PgBouncer as a background (daemon) process.</p><pre><code>Default: not set
</code></pre><p>listen_addr : Specifies a list of comma-separated interface addresses where PgBouncer listens for TCP connections. You may also use <code>*</code>, which means to listen on all interfaces. If not set, only Unix socket connections are accepted.</p><pre><code>Specify addresses numerically \\(IPv4/IPv6\\) or by name.

Default: not set
</code></pre><p>listen_port : The port PgBouncer listens on. Applies to both TCP and Unix sockets.</p><pre><code>Default: 6432
</code></pre><p>unix_socket_dir : Specifies the location for the Unix sockets. Applies to both listening socket and server connections. If set to an empty string, Unix sockets are deactivated. A value that starts with @ specifies that a Unix socket in the abstract namespace should be created.</p><p>: For online reboot (<code>-R</code>) to work, a Unix socket needs to be configured, and it needs to be in the file-system namespace.</p><pre><code>Default: \`/tmp\`
</code></pre><p>unix_socket_mode : Filesystem mode for the Unix socket. Ignored for sockets in the abstract namespace.</p><pre><code>Default: 0777
</code></pre><p>unix_socket_group : Group name to use for Unix socket. Ignored for sockets in the abstract namespace.</p><pre><code>Default: not set
</code></pre><p>user : If set, specifies the Unix user to change to after startup. This works only if PgBouncer is started as root or if it is already running as the given user.</p><pre><code>Default: not set
</code></pre><p>pool_mode : Specifies when a server connection can be reused by other clients.</p><pre><code>- \`session\`: Connection is returned to the pool when the client disconnects. Default.
- \`transaction\`: Connection is returned to the pool when the transaction finishes.
- \`statement\`: Connection is returned to the pool when the current query finishes. Transactions spanning multiple statements are disallowed in this mode.
</code></pre><p>max_client_conn : Maximum number of client connections allowed. When increased, you should also increase the file descriptor limits. The actual number of file descriptors used is more than <code>max_client_conn</code>. The theoretical maximum used, when each user connects with its own username to the server is:</p><pre><code>\`\`\`
max_client_conn + (max pool_size * total databases * total users)
\`\`\`
</code></pre><p>: If a database user is specified in the connect string, all users connect using the same username. Then the theoretical maximum connections is:</p><pre><code>\`\`\`
max_client_conn + (max pool_size * total databases)
\`\`\`

The theoretical maximum should be never reached, unless someone deliberately crafts a special load for it. Still, it means you should set the number of file descriptors to a safely high number. Search for \`ulimit\` in your operating system documentation.

Default: 100
</code></pre><p>default_pool_size : The number of server connections to allow per user/database pair. This can be overridden in the per-database configuration.</p><pre><code>Default: 20
</code></pre><p>min_pool_size : Add more server connections to the pool when it is lower than this number. This improves behavior when the usual load drops and then returns suddenly after a period of total inactivity. The value is effectively capped at the pool size.</p><pre><code>Default: 0 \\(deactivated\\)
</code></pre><p>reserve_pool_size : The number of additional connections to allow for a pool (see <code>reserve_pool_timeout</code>). <code>0</code> deactivates.</p><pre><code>Default: 0 \\(deactivated\\)
</code></pre><p>reserve_pool_timeout : If a client has not been serviced in this many seconds, PgBouncer enables use of additional connections from the reserve pool. <code>0</code> deactivates.</p><pre><code>Default: 5.0
</code></pre><p>max_db_connections : Do not allow more than this many server connections per database (regardless of user). This considers the PgBouncer database that the client has connected to, not the PostgreSQL database of the outgoing connection.</p><p>: This can also be set per database in the <code>[databases]</code> section.</p><p>: Note that when you hit the limit, closing a client connection to one pool will not immediately allow a server connection to be established for another pool, because the server connection for the first pool is still open. Once the server connection closes (due to idle timeout), a new server connection will immediately be opened for the waiting pool.</p><p>: Default: 0 (unlimited)</p><p>max_user_connections : Do not allow more than this many server connections per user (regardless of database). This considers the PgBouncer user that is associated with a pool, which is either the user specified for the server connection or in absence of that the user the client has connected as.</p><p>: This can also be set per user in the <code>[users]</code> section.</p><p>: Note that when you hit the limit, closing a client connection to one pool will not immediately allow a server connection to be established for another pool, because the server connection for the first pool is still open. Once the server connection closes (due to idle timeout), a new server connection will immediately be opened for the waiting pool.</p><p>: Default: 0 (unlimited)</p><p>server_round_robin : By default, PgBouncer reuses server connections in LIFO (last-in, first-out) order, so that a few connections get the most load. This provides the best performance when a single server serves a database. But if there is TCP round-robin behind a database IP, then it is better if PgBouncer also uses connections in that manner to achieve uniform load.</p><pre><code>Default: 0
</code></pre><p>track_extra_parameters : By default, PgBouncer tracks the <code>client_encoding</code>, <code>datestyle</code>, <code>timezone</code>, <code>standard_conforming_strings</code>, and <code>application_name</code> parameters per client. To allow other parameters to be tracked, you may specify them under this parameter, so that PgBouncer knows that they should be maintained in the client variable cache and restored in the server whenever the client becomes active.</p><p>: If you need to specify multiple values, use a comma-separated list.</p><p>: Note that most parameters cannot be tracked this way. The only parameters that can be tracked are ones that WarehousePG reports to the client. WarehousePG has <a href="https://www.postgresql.org/docs/15/protocol-flow.html#PROTOCOL-ASYNC" target="_blank" rel="noreferrer">an official list of parameters that it reports to the client</a>. WarehousePG extensions can change this list though, they can add parameters themselves that they also report, and they can start reporting already existing parameters that WarehousePG does not report.</p><p>: The WarehousePG protocol allows specifying parameters settings, both directly as a parameter in the startup packet, or inside the options startup packet. Parameters specified using both of these methods are supported by track_extra_parameters. However, it is not possible to include options itself in <code>track_extra_parameters</code>, only the parameters contained in <code>options</code>.</p><p>: Default: IntervalStyle</p><p>ignore_startup_parameters : By default, PgBouncer allows only parameters it can keep track of in startup packets: <code>client_encoding</code>, <code>datestyle</code>, <code>timezone</code>, and <code>standard_conforming_strings</code>. All others parameters raise an error. To allow other parameters, specify them here so that PgBouncer knows that they are handled by the admin and it can ignore them.</p><p>: If you need to specify multiple values, use a comma-separated list.</p><p>: The WarehousePG protocol allows specifying parameters settings, both directly as a parameter in the startup packet, or inside the <code>options</code> startup packet. Parameters specified using both of these methods are supported by <code>ignore_startup_parameters</code>. It is even possible to include <code>options</code> itself in <code>track_extra_parameters</code>, which results in any unknown parameters contained inside <code>options</code> to be ignored.</p><pre><code>Default: empty
</code></pre><p>peer_id : The peer id used to identify this PgBouncer process in a group of PgBouncer processes that are peered together. The <code>peer_id</code> value should be unique within a group of peered PgBouncer processes. When set to 0, PgBouncer peering is disabled. See the <code>[peers]</code> section for more information. The maximum value that can be used for the <code>peer_id</code> is 16383.</p><p>: Default: 0</p><p>disable_pqexec : Deactivates Simple Query protocol (PQexec). Unlike Extended Query protocol, Simple Query protocol allows multiple queries in one packet, which allows some classes of SQL-injection attacks. Deactivating it can improve security. This means that only clients that exclusively use Extended Query protocol will work.</p><pre><code>Default: 0
</code></pre><p>application_name_add_host : Add the client host address and port to the application name setting set on connection start. This helps in identifying the source of bad queries. This logic applies only on start of connection. If <code>application_name</code> is later changed with <code>SET</code>, PgBouncer does not change it again.</p><pre><code>Default: 0
</code></pre><p>conffile : Show location of the current configuration file. Changing this parameter will result in PgBouncer using another config file for next <code>RELOAD</code> / <code>SIGHUP</code>.</p><pre><code>Default: file from command line
</code></pre><p>service_name : Used during win32 service registration.</p><pre><code>Default: pgbouncer
</code></pre><p>job_name : Alias for <code>service_name</code>.</p><p>stats_period : Sets how often the averages shown in various <code>SHOW</code> commands are updated and how often aggregated statistics are written to the log (but see <code>log_stats</code>). [seconds]</p><pre><code>Default: 60
</code></pre><p>max_prepared_statements</p><p>: When set to a non-zero value, PgBouncer tracks protocol-level named prepared statements related commands sent by the client in transaction and statement pooling mode. PgBouncer makes sure that any statement prepared by a client is available on the backing server connection, even when the statement was originally prepared on another server connection.</p><p>: PgBouncer internally examines all the queries that are sent as a prepared statement by clients and gives each unique query string an internal name with the format <code>PGBOUNCER_{unique_id}</code>. Prepared statements are only prepared using this name on the corresponding WarehousePG cluster. PgBouncer keeps track of the name that the client gave to each prepared statement. It rewrites each command that uses a prepared statement to use the matching internal name (for example, <code>PGBOUNCER_123</code>) before forwarding that command to the server. More importantly, if the prepared statement that the client wants to use is not prepared on the server yet, it automatically prepares that statement before forwarding the command that the client sent.</p><p>: Note that this tracking and rewriting of prepared statement commands does not work for SQL-level prepared statement commands such as <code>PREPARE</code>, <code>EXECUTE</code>, <code>DEALLOCATE</code>, <code>DEALLOCATE ALL</code>, and <code>DISCARD ALL</code>. Running <code>DEALLOCATE ALL</code> and <code>DISCARD ALL</code> is especially problematic, since those commands appear to run successfully, but they interfere with the state of the server connection significantly without PgBouncer noticing, which in turn will very likely break the execution of any further prepared statements on that server connection.</p><p>: The actual value of this setting controls the number of prepared statements kept active on a single server connection. When the setting is set to 0, prepared statement support for transaction and statement pooling is disabled. To get the best performance, you should try to ensure that this setting is larger than the amount of commonly used prepared statements in your application. Keep in mind that the higher this value, the larger the memory footprint of each PgBouncer connection will have on your WarehousePG coordinator, because it will keep more queries prepared on those connections. It also increases the memory footprint of PgBouncer itself, because it now needs to keep track of query strings.</p><p>: The impact on PgBouncer memory usage is not that big: - Each unique query is stored once in a global query cache. - Each client connection keeps a buffer that it uses to rewrite packets. This is at most four times the size of <code>pkt_buf</code>. This limit is often not reached though, it only happens when the queries in your prepared statements are between two and four times the size of <code>pkt_buf</code>.</p><p>: Consider the following example scenario: - There are 1000 active clients. - The clients prepare 200 unique queries. - The average size of a query is 5 kB. - <code>pkt_buf</code> is set to the default of 4096 (4kB).</p><p>: In this scenario, PgBouncer needs at most the following amount of memory to handle these prepared statements:</p><pre><code>\`\`\`
200 x 5kB + 1000 x 4 x 4kB = ~17MB of memory.
\`\`\`
</code></pre><p>: Tracking prepared statements does not only come with a memory cost, but also with increased CPU usage, because PgBouncer needs to inspect and rewrite the queries. Multiple PgBouncer instances can listen on the same port to use more than one core for processing, see the <code>so_reuseport</code> option for details.</p><p>: There are also performance benefits to prepared statements. Just as when connecting to WarehousePG directly, by preparing a query that is executed many times, it reduces the total amount of parsing and planning that needs to be done. The way that PgBouncer tracks prepared statements is especially beneficial to performance when multiple clients prepare the same queries. Because client connections automatically reuse a prepared statement on a server connection even if it was prepared by another client. As an example, if you have a <code>pool_size</code> of 20 and you have 100 clients that all prepare the exact same query, then the query is prepared (and thus parsed) only 20 times on the WarehousePG coordinator.</p><p>: The reuse of prepared statements has one downside. If the return or argument types of a prepared statement changes across executions, WarehousePG throws an error such as:</p><pre><code>\`\`\`
ERROR:  cached plan must not change result type
\`\`\`
</code></pre><p>: You can avoid such errors by not having multiple clients that use the exact same query string in a prepared statement, but expecting different argument or result types. One of the most common ways of running into this issue is during a DDL migration where you add a new column or change a column type on an existing table. In those cases you can run <code>RECONNECT</code> on the PgBouncer admin console after doing the migration to force a re-prepare of the query and make the error goes away.</p><p>: Default: 0</p><h3 id="authentication-settings" tabindex="-1"><a id="authset"></a>Authentication Settings <a class="header-anchor" href="#authentication-settings" aria-label="Permalink to &quot;&lt;a id=&quot;authset&quot;&gt;&lt;/a&gt;Authentication Settings&quot;">​</a></h3><p>auth_file : The name of the file containing the user names and passwords to load. The file format is the same as the WarehousePG pg_auth file. Refer to the <a href="./../../admin_guide/access_db/topics/pgbouncer.html#pgb_auth">PgBouncer Authentication File Format</a> for more information.</p><pre><code>Default: not set
</code></pre><p>auth_hba_file : HBA configuration file to use when <code>auth_type</code> is <code>hba</code>. Refer to the <a href="./../../admin_guide/access_db/topics/pgbouncer.html#pgb_hba">Configuring HBA-based Authentication for PgBouncer</a> and <a href="./../../admin_guide/access_db/topics/pgbouncer.html#pgb_ldap">Configuring LDAP-based Authentication for PgBouncer</a> for more information.</p><pre><code>Default: not set
</code></pre><p>auth_type : How to authenticate users.</p><pre><code>- \`pam\`: Use PAM to authenticate users. \`auth_file\` is ignored. This method is not compatible with databases using the \`auth_user\` option. The service name reported to PAM is \`pgbouncer\`. PAM is not supported in the HBA configuration file.
- \`hba\`:  The actual authentication type is loaded from the \`auth_hba_file\`. This setting allows different authentication methods for different access paths, for example: connections over Unix socket use the \`peer\` auth method, connections over TCP must use TLS.
- \`cert\`:  Clients must connect with TLS using a valid client certificate. The client&#39;s username is taken from CommonName field in the certificate.
- \`md5\`: Use MD5-based password check. \`auth_file\` may contain both MD5-encrypted or plain-text passwords. If \`md5\` is configured and a user has a SCRAM secret, then SCRAM authentication is used automatically instead. This is the default authentication method.
- \`scram-sha-256\`: Use password check with SCRAM-SHA-256. \`auth_file\` has to contain SCRAM secrets or plain-text passwords.
- \`plain\`:  Clear-text password is sent over wire. *Deprecated*.
- \`trust\`: No authentication is performed. The username must still exist in the \`auth_file\`.
- \`any\`: Like the \`trust\` method, but the username supplied is ignored. Requires that all databases are configured to log in with a specific user. Additionally, the console database allows any user to log in as admin.
</code></pre><p>auth_key_file : If you are connecting to LDAP with an encrypted password, <code>auth_key_file</code> identifies the file system location of the encryption key. Refer to <a href="./../../admin_guide/access_db/topics/pgbouncer.html#pgb_ldap_encrypt_passwd">About Specifying an Encrypted LDAP Password</a> for more information.</p><pre><code>Default: not set
</code></pre><p>auth_cipher : If you are connecting to LDAP with an encrypted password, <code>auth_cipher</code> identifies the cipher algorithm for password authentication. PgBouncer accepts any cipher supported by OpenSSL on the system. When FIPS mode is enabled, specify only a cipher that is considered safe in FIPS mode. Refer to <a href="./../../admin_guide/access_db/topics/pgbouncer.html#pgb_ldap_encrypt_passwd">About Specifying an Encrypted LDAP Password</a> for more information.</p><pre><code>Default: \`aes-256-cbc\`
</code></pre><p>auth_query : Query to load a user&#39;s password from the database.</p><p>: Direct access to pg_shadow requires admin rights. It&#39;s preferable to use a non-superuser that calls a <code>SECURITY DEFINER</code> function instead.</p><p>: Note that the query is run inside target database, so if a function is used it needs to be installed into each database.</p><pre><code>Default: \`SELECT usename, passwd FROM pg_shadow WHERE usename=$1\`
</code></pre><p>auth_user : If <code>auth_user</code> is set, any user who is not specified in <code>auth_file</code> is authenticated through the <code>auth_query</code> query from the <code>pg_shadow</code> database view. PgBouncer performs this query as the <code>auth_user</code> WarehousePG user. <code>auth_user</code>&#39;s password must be set in the <code>auth_file</code>. (If the <code>auth_user</code> does not require a password then it does not need to be defined in <code>auth_file</code>.)</p><p>: Direct access to <code>pg_shadow</code> requires WarehousePG administrative privileges. It is preferable to use a non-admin user that calls <code>SECURITY DEFINER</code> function instead.</p><p>: Default: not set</p><p>auth_dbname : Database name in the <code>[database]</code> section to be used for authentication purposes. This option can be either global or overridden in the connection string if this parameter is specified.</p><h3 id="log-settings" tabindex="-1"><a id="logset"></a>Log Settings <a class="header-anchor" href="#log-settings" aria-label="Permalink to &quot;&lt;a id=&quot;logset&quot;&gt;&lt;/a&gt;Log Settings&quot;">​</a></h3><p>syslog : Toggles syslog on and off.</p><pre><code>Default: 0
</code></pre><p>syslog_ident : Under what name to send logs to syslog.</p><pre><code>Default: \`pgbouncer\` (program name)
</code></pre><p>syslog_facility : Under what facility to send logs to syslog. Some possibilities are: <code>auth</code>, <code>authpriv</code>, <code>daemon</code>, <code>user</code>, <code>local0-7</code>.</p><pre><code>Default: \`daemon\`
</code></pre><p>log_connections : Log successful logins.</p><pre><code>Default: 1
</code></pre><p>log_disconnections : Log disconnections, with reasons.</p><pre><code>Default: 1
</code></pre><p>log_pooler_errors : Log error messages that the pooler sends to clients.</p><pre><code>Default: 1
</code></pre><p>log_stats : Write aggregated statistics into the log, every <code>stats_period</code>. This can be deactivated if external monitoring tools are used to grab the same data from <code>SHOW</code> commands.</p><pre><code>Default: 1
</code></pre><p>verbose : Increase verbosity. Mirrors the <code>-v</code> switch on the command line. Using <code>-v -v</code> on the command line is the same as <code>verbose=2</code>.</p><pre><code>Default: 0
</code></pre><h3 id="console-access-control" tabindex="-1"><a id="consaccess"></a>Console Access Control <a class="header-anchor" href="#console-access-control" aria-label="Permalink to &quot;&lt;a id=&quot;consaccess&quot;&gt;&lt;/a&gt;Console Access Control&quot;">​</a></h3><p>admin_users : Comma-separated list of database users that are allowed to connect and run all commands on the PgBouncer Administration Console. Ignored when <code>auth_type=any</code>, in which case any username is allowed in as admin.</p><pre><code>Default: empty
</code></pre><p>stats_users : Comma-separated list of database users that are allowed to connect and run read-only queries on the console. This includes all <code>SHOW</code> commands except <code>SHOW FDS</code>.</p><pre><code>Default: empty
</code></pre><h3 id="connection-sanity-checks-timeouts" tabindex="-1"><a id="connsan"></a>Connection Sanity Checks, Timeouts <a class="header-anchor" href="#connection-sanity-checks-timeouts" aria-label="Permalink to &quot;&lt;a id=&quot;connsan&quot;&gt;&lt;/a&gt;Connection Sanity Checks, Timeouts&quot;">​</a></h3><p>server_reset_query : Query sent to server on connection release, before making it available to other clients. At that moment no transaction is in progress so it should not include <code>ABORT</code> or <code>ROLLBACK</code>.</p><pre><code>The query should clean any changes made to a database session so that the next client gets a connection in a well-defined state. Default is \`DISCARD ALL\` which cleans everything, but that leaves the next client no pre-cached state. It can be made lighter, e.g. \`DEALLOCATE ALL\` to just drop prepared statements, if the application does not break when some state is kept around.

&gt; **Note** WarehousePG does not support \`DISCARD ALL\`.

When transaction pooling is used, the \`server_reset_query\` is not used, as clients must not use any session-based features as each transaction ends up in a different connection and thus gets a different session state.

Default: \`DISCARD ALL;\` \\(Not supported by WarehousePG.\\)
</code></pre><p>server_reset_query_always : Whether <code>server_reset_query</code> should be run in all pooling modes. When this setting is off (default), the <code>server_reset_query</code> will be run only in pools that are in sessions-pooling mode. Connections in transaction-pooling mode should not have any need for reset query.</p><pre><code>This setting is for working around broken setups that run applications that use session features over a transaction-pooled PgBouncer. It changes non-deterministic breakage to deterministic breakage: Clients always lose their state after each transaction.

Default: 0
</code></pre><p>server_check_delay : How long to keep released connections available for immediate re-use, without running sanity-check queries on it. If <code>0</code>, then the query is run always.</p><pre><code>Default: 30.0
</code></pre><p>server_check_query : A simple do-nothing query to test the server connection.</p><pre><code>If an empty string, then sanity checking is deactivated.

Default: SELECT 1;
</code></pre><p>server_fast_close : Disconnect a server in session pooling mode immediately or after the end of the current transaction if it is in “close_needed” mode (set by <code>RECONNECT</code>, <code>RELOAD</code> that changes connection settings, or DNS change), rather than waiting for the session end. In statement or transaction pooling mode, this has no effect since that is the default behavior there.</p><pre><code>If because of this setting a server connection is closed before the end of the client session, the client connection is also closed. This ensures that the client notices that the session has been interrupted.

This setting makes connection configuration changes take effect sooner if session pooling and long-running sessions are used. The downside is that client sessions are liable to be interrupted by a configuration change, so client applications will need logic to reconnect and reestablish session state. But note that no transactions will be lost, because running transactions are not interrupted, only idle sessions.

Default: 0
</code></pre><p>server_lifetime : The pooler will close an unused server connections that has been connected longer than this number of seconds. Setting it to <code>0</code> means the connection is to be used only once, then closed. [seconds]</p><pre><code>Default: 3600.0
</code></pre><p>server_idle_timeout : If a server connection has been idle more than this many seconds it is dropped. If this parameter is set to <code>0</code>, timeout is deactivated. [seconds]</p><pre><code>Default: 600.0
</code></pre><p>server_connect_timeout : If connection and login will not finish in this amount of time, the connection will be closed. [seconds]</p><pre><code>Default: 15.0
</code></pre><p>server_login_retry : If a login fails due to failure from <code>connect()</code> or authentication, that pooler waits this much before retrying to connect. [seconds]</p><pre><code>Default: 15.0
</code></pre><p>client_login_timeout : If a client connects but does not manage to login in this amount of time, it is disconnected. This is needed to avoid dead connections stalling <code>SUSPEND</code> and thus online restart. [seconds]</p><pre><code>Default: 60.0
</code></pre><p>autodb_idle_timeout : If database pools created automatically (via <code>*</code>) have been unused this many seconds, they are freed. Their statistics are also forgotten. [seconds]</p><pre><code>Default: 3600.0
</code></pre><p>dns_max_ttl : How long to cache DNS lookups, in seconds. If a DNS lookup returns several answers, PgBouncer round-robins between them in the meantime. The actual DNS TTL is ignored. [seconds]</p><pre><code>Default: 15.0
</code></pre><p>dns_nxdomain_ttl : How long error and NXDOMAIN DNS lookups can be cached. [seconds]</p><pre><code>Default: 15.0
</code></pre><p>dns_zone_check_period : Period to check if zone serial numbers have changed.</p><pre><code>PgBouncer can collect DNS zones from hostnames \\(everything after first dot\\) and then periodically check if the zone serial numbers change. If changes are detected, all hostnames in that zone are looked up again. If any host IP changes, its connections are invalidated.

Works only with UDNS and c-ares backend \\(\`--with-udns\` or \`--with-cares\` to configure\\).

Default: 0.0 \\(deactivated\\)
</code></pre><p>resolv_conf : The location of a custom <code>resolv.conf</code> file. This is to allow specifying custom DNS servers and perhaps other name resolution options, independent of the global operating system configuration.</p><pre><code>Requires evdns (&gt;= 2.0.3) or c-ares (&gt;= 1.15.0) backend.

The parsing of the file is done by the DNS backend library, not PgBouncer, so see the library&#39;s documentation for details on allowed syntax and directives.

Default: empty (use operating system defaults)
</code></pre><h3 id="tls-settings" tabindex="-1"><a id="tlsset"></a>TLS settings <a class="header-anchor" href="#tls-settings" aria-label="Permalink to &quot;&lt;a id=&quot;tlsset&quot;&gt;&lt;/a&gt;TLS settings&quot;">​</a></h3><p>client_tls_sslmode : TLS mode to use for connections from clients. TLS connections are deactivated by default. When enabled, <code>client_tls_key_file</code> and <code>client_tls_cert_file</code> must be also configured to set up the key and certificate PgBouncer uses to accept client connections.</p><pre><code>-   \`disable\`: Plain TCP. If client requests TLS, it’s ignored. Default.
-   \`allow\`: If client requests TLS, it is used. If not, plain TCP is used. If client uses client-certificate, it is not validated.
-   \`prefer\`: Same as \`allow\`.
-   \`require\`: Client must use TLS. If not, client connection is rejected. If client presents a client-certificate, it is not validated.
-   \`verify-ca\`: Client must use TLS with valid client certificate.
-   \`verify-full\`: Same as \`verify-ca\`.
</code></pre><p>client_tls_key_file : Private key for PgBouncer to accept client connections.</p><p>: Default: not set</p><p>client_tls_cert_file : Certificate for private key. CLients can validate it.</p><p>: Default: unset</p><p>client_tls_ca_file : Root certificate to validate client certificates.</p><p>: Default: unset</p><p>client_tls_protocols : Which TLS protocol versions are allowed.</p><p>: Valid values: are <code>tlsv1.0</code>, <code>tlsv1.1</code>, <code>tlsv1.2</code>, <code>tlsv1.3</code>.</p><p>: Shortcuts: <code>all</code> (<code>tlsv1.0</code>, <code>tlsv1.1</code>, <code>tlsv1.2</code>, <code>tlsv1.3</code>), <code>secure</code> (<code>tlsv1.2</code>, <code>tlsv1.3</code>), <code>legacy</code> (<code>all</code>).</p><p>: Default: <code>secure</code></p><p>client_tls_ciphers : Allowed TLS ciphers, in OpenSSL syntax. Shortcuts: <code>default</code>/<code>secure</code>, <code>compat</code>/<code>legacy</code>, <code>insecure</code>/<code>all</code>, <code>normal</code>, <code>fast</code>.</p><pre><code>Only connections using TLS version 1.2 and lower are affected. There is currently no setting that controls the cipher choices used by TLS version 1.3 connections.

Default: \`fast\`
</code></pre><p>client_tls_ecdhcurve : Elliptic Curve name to use for ECDH key exchanges.</p><p>: Allowed values: <code>none</code> (DH is deactivated), <code>auto</code> (256-bit ECDH), curve name.</p><p>: Default: <code>auto</code></p><p>client_tls_dheparams : DHE key exchange type.</p><p>: Allowed values: <code>none</code> (DH is deactivated), <code>auto</code> (2048-bit DH), <code>legacy</code> (1024-bit DH).</p><p>: Default: <code>auto</code></p><p>server_tls_sslmode : TLS mode to use for connections to WarehousePG and PostgreSQL servers. TLS connections are deactivated by default.</p><pre><code>-   \`disable\`: Plain TCP. TLS is not requested from the server. Default.
-   \`allow\`: If server rejects plain, try TLS. \\(*PgBouncer Documentation is speculative on this.*\\)
-   \`prefer\`: TLS connection is always requested first. When connection is refused, plain TPC is used. Server certificate is not validated.
-   \`require\`: Connection must use TLS. If server rejects it, plain TCP is not attempted. Server certificate is not validated.
-   \`verify-ca\`: Connection must use TLS and server certificate must be valid according to \`server_tls_ca_file\`. The server hostname is not verfied against the certificate.
-   \`verify-full\`: Connection must use TLS and the server certificate must be valid according to \`server_tls_ca_file\`. The server hostname must match the hostname in the certificate.
</code></pre><p>server_tls_ca_file : Root certificate file used to validate WarehousePG and PostgreSQL server certificates.</p><p>: Default: unset</p><p>server_tls_key_file : Private key for PgBouncer to authenticate against WarehousePG or PostgreSQL server.</p><p>: Default: not set</p><p>server_tls_cert_file : Certificate for private key. WarehousePG or PostgreSQL servers can validate it.</p><p>: Default: not set</p><p>server_tls_protocols : Which TLS protocol versions are allowed. Allowed values: <code>tlsv1.0</code>, <code>tlsv1.1</code>, <code>tlsv1.2</code>, <code>tlsv1.3</code>. Shortcuts: <code>all</code> (<code>tlsv1.0</code>, <code>tlsv1.1</code>, <code>tlsv1.2</code>, <code>tlsv1.3</code>); <code>secure</code> (<code>tlsv1.2</code>, <code>tlsv1.3</code>); <code>legacy</code> (<code>all</code>).</p><p>: Default: <code>secure</code></p><p>server_tls_ciphers : Allowed TLS ciphers, in OpenSSL syntax. Shortcuts: <code>default</code>/<code>secure</code>, <code>compat</code>/<code>legacy</code>, <code>insecure</code>/<code>all</code>, <code>normal</code>, <code>fast</code>.</p><pre><code>Only connections using TLS version 1.2 and lower are affected. There is currently no setting that controls the cipher choices used by TLS version 1.3 connections.

Default: \`fast\`
</code></pre><h3 id="dangerous-timeouts" tabindex="-1"><a id="dangtimeouts"></a>Dangerous Timeouts <a class="header-anchor" href="#dangerous-timeouts" aria-label="Permalink to &quot;&lt;a id=&quot;dangtimeouts&quot;&gt;&lt;/a&gt;Dangerous Timeouts&quot;">​</a></h3><p>Setting the following timeouts can cause unexpected errors.</p><p>query_timeout : Queries running longer than this (seconds) are canceled. This parameter should be used only with a slightly smaller server-side <code>statement_timeout</code>, to apply only for network problems. [seconds]</p><pre><code>Default: 0.0 \\(deactivated\\)
</code></pre><p>query_wait_timeout : The maximum time, in seconds, queries are allowed to wait for execution. If the query is not assigned to a server during that time, the client is disconnected. This is used to prevent unresponsive servers from grabbing up connections. [seconds]</p><pre><code>Default: 120
</code></pre><p>cancel_wait_timeout : The maximum time, in seconds, cancellation requests are allowed to spend waiting for execution. If the cancel request is not assigned to a server during that time, the client is disconnected. A value of 0 disables the timeout. If it is disabled, cancel requests will be queued indefinitely.</p><p>: This setting is used to prevent a client locking up when a cancel cannot be forwarded due to the server being down.</p><p>: Default: 10.0</p><p>client_idle_timeout : Client connections idling longer than this many seconds are closed. This should be larger than the client-side connection lifetime settings, and only used for network problems. [seconds]</p><pre><code>Default: 0.0 \\(deactivated\\)
</code></pre><p>idle_transaction_timeout : If client has been in &quot;idle in transaction&quot; state longer than this (seconds), it is disconnected. [seconds]</p><pre><code>Default: 0.0 \\(deactivated\\)
</code></pre><p>suspend_timeout : How many seconds to wait for buffer flush during <code>SUSPEND</code> or reboot (<code>-R</code>). A connection is dropped if the flush does not succeed.</p><pre><code>Default: 10
</code></pre><h3 id="low-level-network-settings" tabindex="-1"><a id="llnet"></a>Low-level Network Settings <a class="header-anchor" href="#low-level-network-settings" aria-label="Permalink to &quot;&lt;a id=&quot;llnet&quot;&gt;&lt;/a&gt;Low-level Network Settings&quot;">​</a></h3><p>pkt_buf : Internal buffer size for packets. Affects the size of TCP packets sent and general memory usage. Actual <code>libpq</code> packets can be larger than this so there is no need to set it large.</p><pre><code>Default: 4096
</code></pre><p>max_packet_size : Maximum size for packets that PgBouncer accepts. One packet is either one query or one result set row. A full result set can be larger.</p><pre><code>Default: 2147483647
</code></pre><p>listen_backlog : Backlog argument for the <code>listen(2)</code> system call. It determines how many new unanswered connection attempts are kept in queue. When the queue is full, further new connection attempts are dropped.</p><pre><code>Default: 128
</code></pre><p>sbuf_loopcnt : How many times to process data on one connection, before proceeding. Without this limit, one connection with a big result set can stall PgBouncer for a long time. One loop processes one <code>pkt_buf</code> amount of data. 0 means no limit.</p><pre><code>Default: 5
</code></pre><p>so_reuseport : Specifies whether to set the socket option <code>SO_REUSEPORT</code> on TCP listening sockets. On some operating systems, this allows running multiple PgBouncer instances on the same host listening on the same port and having the kernel distribute the connections automatically. This option is a way to get PgBouncer to use more CPU cores. (PgBouncer is single-threaded and uses one CPU core per instance.)</p><pre><code>The behavior in detail depends on the operating system kernel. As of this writing, this setting has the desired effect on (sufficiently recent versions of) Linux, DragonFlyBSD, and FreeBSD. (On FreeBSD, it applies the socket option \`SO_REUSEPORT_LB\` instead.). Some other operating systems support the socket option but it won&#39;t have the desired effect: It will allow multiple processes to bind to the same port but only one of them will get the connections. See your operating system&#39;s \`setsockopt()\` documentation for details.

On systems that don’t support the socket option at all, turning this setting on will result in an error.

Each PgBouncer instance on the same host needs different settings for at least \`unix_socket_dir\` and \`pidfile\`, as well as \`logfile\` if that is used. Also note that if you make use of this option, you can no longer connect to a specific PgBouncer instance via TCP/IP, which might have implications for monitoring and metrics collection.

Default: 0
</code></pre><p>tcp_defer_accept : For details on this and other TCP options, please see the tcp(7) man page.</p><pre><code>Default: 45 on Linux, otherwise 0
</code></pre><p>tcp_socket_buffer : Default: not set</p><p>tcp_keepalive : Turns on basic keepalive with OS defaults.</p><pre><code>On Linux, the system defaults are \`tcp_keepidle=7200\`, \`tcp_keepintvl=75\`, \`tcp_keepcnt=9\`. They are probably similar on other operating systems.

Default: 1
</code></pre><p>tcp_keepcnt : Default: not set</p><p>tcp_keepidle : Default: not set</p><p>tcp_keepintvl : Default: not set</p><p>tcp_user_timeout : Sets the <code>TCP_USER_TIMEOUT</code> socket option. This specifies the maximum amount of time in milliseconds that transmitted data may remain unacknowledged before the TCP connection is forcibly closed. If set to <code>0</code>, then the operating system’s default is used.</p><p>: Default: 0</p><h2 id="users-section" tabindex="-1"><a id="topic_lzk_zjd_gs"></a>[users] Section <a class="header-anchor" href="#users-section" aria-label="Permalink to &quot;&lt;a id=&quot;topic_lzk_zjd_gs&quot;&gt;&lt;/a&gt;\\[users\\] Section&quot;">​</a></h2><p>This section contains <code>key</code>=<code>value</code> pairs, where the <code>key</code> is a user name and the <code>value</code> is a <code>libpq</code> connect-string list of <code>key</code>=<code>value</code> pairs of configuration settings specific for this user. Only a few settings are available here.</p><p>pool_mode : Set the pool mode for all connections from this user. If not set, the database or default <code>pool_mode</code> is used.</p><p>max_user_connection : Configure a maximum for the user (i.e. all pools with the user will not have more than this many server connections).</p><p>For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[users]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>user1 = pool_mode=transaction max_user_connections=10</span></span></code></pre></div><h2 id="peers-section" tabindex="-1"><a id="topic_peers"></a>[peers] Section <a class="header-anchor" href="#peers-section" aria-label="Permalink to &quot;&lt;a id=&quot;topic_peers&quot;&gt;&lt;/a&gt;\\[peers\\] Section&quot;">​</a></h2><p>This section defines the peers that PgBouncer can forward cancellation requests to and where those cancellation requests will be routed.</p><p>PgBouncer processes can be peered together in a group by defining a <code>peer_id</code> value and a <code>[peers]</code> section in the configurations of all the PgBouncer processes. These PgBouncer processes can then forward cancellations requests to the process that it originated from. This is needed to make cancellations work when multiple PgBouncer processes, possibly on different servers, are behind the same TCP load balancer. Cancellation requests are sent over different TCP connections than the query they are cancelling, so a TCP load balancer might send the cancellation request connection to a different process than the one that it was meant for. By peering them these cancellation requests eventually end up at the right process.</p><p>The section contains key=value lines like</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>peer_id = connection string</span></span></code></pre></div><p>Where the key will be taken as a <code>peer_id</code> and the value as a connection string, consisting of key=value pairs of connection parameters, described below (similar to <code>libpq</code>, but the actual <code>libpq</code> is not used and the set of available features is different). For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1 = host=host1.example.com</span></span>
<span class="line"><span>2 = host=/tmp/pgbouncer-2  port=5555</span></span></code></pre></div><p>Note that for peering to work, the <code>peer_id</code> of each PgBouncer process in the group must be unique within the peered group. And the <code>[peers]</code> section should contain entries for each of those peer ids. It is allowed, but not necessary, for the i<code>[peers]</code> section to contain the <code>peer_id</code> of the PgBouncer that the configuration is for. Such an entry will be ignored, but it is allowed to make configuration management easy, because it allows using the exact same <code>[peers]</code> section for multiple configurations.</p><p>Note that cross-version peering is supported as long as all peers are on running 1.21.0 version or higher. In 1.21.0 some breaking changes were made in how we encode the cancellation tokens that made them incompatible with the ones created by earlier versions.</p><p>host : Host name or IP address to connect to. Host names are resolved at connection time, the result is cached per the <code>dns_max_ttl</code> parameter. If DNS returns several results, they are used in a round-robin manner. But in general it is not recommended to use a hostname that resolves to multiple IPs, because then the cancel request might still be forwarded to the wrong node and it would need to be forwarded again (which is only allowed up to three times).</p><p>: If the value begins with <code>/</code>, a Unix socket in the file-system namespace is used. If the value begins with <code>@</code>, a Unix socket in the abstract namespace is used.</p><p>: Examples:</p><pre><code>\`\`\`
host=localhost
host=127.0.0.1
host=2001:0db8:85a3:0000:0000:8a2e:0370:7334
host=/var/run/pgbouncer-1
\`\`\`
</code></pre><p>port : The port to connect to. : Default: 6432</p><p>pool_size : Set the maximum number of cancel requests that can be in flight to the peer at the same time. It is quite normal for cancel requests to arrive in bursts, for example, when the backing Postgres server slows down. So it is important for <code>pool_size</code> to not be so low that it cannot handle these bursts.</p><p>: If not set, the <code>default_pool_size</code> is used.</p><h2 id="example-configuration-files" tabindex="-1"><a id="topic_xw4_dtc_gs"></a>Example Configuration Files <a class="header-anchor" href="#example-configuration-files" aria-label="Permalink to &quot;&lt;a id=&quot;topic_xw4_dtc_gs&quot;&gt;&lt;/a&gt;Example Configuration Files&quot;">​</a></h2><p><strong>Minimal Configuration</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[databases]</span></span>
<span class="line"><span>postgres = host=127.0.0.1 dbname=postgres auth_user=gpadmin</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[pgbouncer]</span></span>
<span class="line"><span>pool_mode = session</span></span>
<span class="line"><span>listen_port = 6543</span></span>
<span class="line"><span>listen_addr = 127.0.0.1</span></span>
<span class="line"><span>auth_type = md5</span></span>
<span class="line"><span>auth_file = users.txt</span></span>
<span class="line"><span>logfile = pgbouncer.log</span></span>
<span class="line"><span>pidfile = pgbouncer.pid</span></span>
<span class="line"><span>admin_users = someuser</span></span>
<span class="line"><span>stats_users = stat_collector</span></span></code></pre></div><p>Use connection parameters passed by the client:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[databases]</span></span>
<span class="line"><span>* =</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[pgbouncer]</span></span>
<span class="line"><span>listen_port = 6543</span></span>
<span class="line"><span>listen_addr = 0.0.0.0</span></span>
<span class="line"><span>auth_type = trust</span></span>
<span class="line"><span>auth_file = bouncer/users.txt</span></span>
<span class="line"><span>logfile = pgbouncer.log</span></span>
<span class="line"><span>pidfile = pgbouncer.pid</span></span>
<span class="line"><span>ignore_startup_parameters=options</span></span></code></pre></div><p><strong>Database Defaults</strong></p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[databases]</span></span>
<span class="line"><span></span></span>
<span class="line"><span>; foodb over unix socket</span></span>
<span class="line"><span>foodb =</span></span>
<span class="line"><span></span></span>
<span class="line"><span>; redirect bardb to bazdb on localhost</span></span>
<span class="line"><span>bardb = host=127.0.0.1 dbname=bazdb</span></span>
<span class="line"><span></span></span>
<span class="line"><span>; access to destination database will go with single user</span></span>
<span class="line"><span>forcedb = host=127.0.0.1 port=300 user=baz password=foo client_encoding=UNICODE datestyle=ISO</span></span></code></pre></div><p>Example of a secure function for <code>auth_query</code>:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CREATE OR REPLACE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FUNCTION</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> pgbouncer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.user_lookup(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i_username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">out</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> phash </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">RETURNS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> record </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">AS</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> $$</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BEGIN</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> usename, passwd </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pg_catalog</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">pg_shadow</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> usename </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> i_username </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">INTO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> uname, phash;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    RETURN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">END</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$$ </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">LANGUAGE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> plpgsql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SECURITY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> DEFINER;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">REVOKE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> ALL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FUNCTION</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pgbouncer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user_lookup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> public, pgbouncer;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">GRANT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> EXECUTE</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ON</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FUNCTION</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> pgbouncer</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">user_lookup</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">TO</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pgbouncer;</span></span></code></pre></div><p>Example configuration for two peered PgBouncer processes to create a multi-core PgBouncer setup using <code>so_reuseport</code>. The configuration for the first process is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[databases]</span></span>
<span class="line"><span>postgres = host=localhost dbname=postgres</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[peers]</span></span>
<span class="line"><span>1 = host=/tmp/pgbouncer1</span></span>
<span class="line"><span>2 = host=/tmp/pgbouncer2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[pgbouncer]</span></span>
<span class="line"><span>listen_addr=127.0.0.1</span></span>
<span class="line"><span>auth_file=auth_file.conf</span></span>
<span class="line"><span>so_reuseport=1</span></span>
<span class="line"><span>unix_socket_dir=/tmp/pgbouncer1</span></span>
<span class="line"><span>peer_id=1</span></span></code></pre></div><p>The configuration for the second process is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>[databases]</span></span>
<span class="line"><span>postgres = host=localhost dbname=postgres</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[peers]</span></span>
<span class="line"><span>1 = host=/tmp/pgbouncer1</span></span>
<span class="line"><span>2 = host=/tmp/pgbouncer2</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[pgbouncer]</span></span>
<span class="line"><span>listen_addr=127.0.0.1</span></span>
<span class="line"><span>auth_file=auth_file.conf</span></span>
<span class="line"><span>so_reuseport=1</span></span>
<span class="line"><span>; only unix_socket_dir and peer_id are different</span></span>
<span class="line"><span>unix_socket_dir=/tmp/pgbouncer2</span></span>
<span class="line"><span>peer_id=2</span></span></code></pre></div><h2 id="see-also" tabindex="-1"><a id="seealso"></a>See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;&lt;a id=&quot;seealso&quot;&gt;&lt;/a&gt;See Also&quot;">​</a></h2><p><a href="./pgbouncer.html">pgbouncer</a>, <a href="./pgbouncer-admin.html">pgbouncer-admin</a>, <a href="https://pgbouncer.github.io/config.html" target="_blank" rel="noreferrer">PgBouncer Configuration Page</a></p>`,306)]))}const f=t(o,[["render",i]]);export{u as __pageData,f as default};
