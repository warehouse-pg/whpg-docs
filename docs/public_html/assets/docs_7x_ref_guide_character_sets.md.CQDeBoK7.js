import{_ as d,c as e,o as r,ag as a}from"./chunks/framework.Ds6Eueu6.js";const p=JSON.parse('{"title":"Character Set Support","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/character_sets.md","filePath":"docs/7x/ref_guide/character_sets.md"}'),n={name:"docs/7x/ref_guide/character_sets.md"};function s(o,t,i,c,l,h){return r(),e("div",null,t[0]||(t[0]=[a('<h1 id="character-set-support" tabindex="-1">Character Set Support <a class="header-anchor" href="#character-set-support" aria-label="Permalink to &quot;Character Set Support&quot;">​</a></h1><p>The character set support in WarehousePG allows you to store text in a variety of character sets, including single-byte character sets such as the ISO 8859 series and multiple-byte character sets such as EUC (Extended Unix Code), UTF-8, and Mule internal code. All supported character sets can be used transparently by clients, but a few are not supported for use within the server (that is, as a server-side encoding). The default character set is selected while initializing your WarehousePG cluster using <code>gpinitsystem</code>. It can be overridden when you create a database, so you can have multiple databases each with a different character set.</p><table tabindex="0"><thead><tr><th>Name</th><th>Description</th><th>Language</th><th>Server?</th><th>Bytes/Char</th><th>Aliases</th></tr></thead><tbody><tr><td>BIG5</td><td>Big Five</td><td>Traditional Chinese</td><td>No</td><td>1-2</td><td>WIN950, Windows950</td></tr><tr><td>EUC_CN</td><td>Extended UNIX Code-CN</td><td>Simplified Chinese</td><td>Yes</td><td>1-3</td><td></td></tr><tr><td>EUC_JP</td><td>Extended UNIX Code-JP</td><td>Japanese</td><td>Yes</td><td>1-3</td><td></td></tr><tr><td>EUC_KR</td><td>Extended UNIX Code-KR</td><td>Korean</td><td>Yes</td><td>1-3</td><td></td></tr><tr><td>EUC_TW</td><td>Extended UNIX Code-TW</td><td>Traditional Chinese, Taiwanese</td><td>Yes</td><td>1-3</td><td></td></tr><tr><td>GB18030</td><td>National Standard</td><td>Chinese</td><td>No</td><td>1-2</td><td></td></tr><tr><td>GBK</td><td>Extended National Standard</td><td>Simplified Chinese</td><td>No</td><td>1-2</td><td>WIN936, Windows936</td></tr><tr><td>ISO_8859_5</td><td>ISO 8859-5, ECMA 113</td><td>Latin/Cyrillic</td><td>Yes</td><td>1</td><td></td></tr><tr><td>ISO_8859_6</td><td>ISO 8859-6, ECMA 114</td><td>Latin/Arabic</td><td>Yes</td><td>1</td><td></td></tr><tr><td>ISO_8859_7</td><td>ISO 8859-7, ECMA 118</td><td>Latin/Greek</td><td>Yes</td><td>1</td><td></td></tr><tr><td>ISO_8859_8</td><td>ISO 8859-8, ECMA 121</td><td>Latin/Hebrew</td><td>Yes</td><td>1</td><td></td></tr><tr><td>JOHAB</td><td>JOHA</td><td>Korean (Hangul)</td><td>Yes</td><td>1-3</td><td></td></tr><tr><td>KOI8</td><td>KOI8-R(U)</td><td>Cyrillic</td><td>Yes</td><td>1</td><td>KOI8R</td></tr><tr><td>LATIN1</td><td>ISO 8859-1, ECMA 94</td><td>Western European</td><td>Yes</td><td>1</td><td>ISO88591</td></tr><tr><td>LATIN2</td><td>ISO 8859-2, ECMA 94</td><td>Central European</td><td>Yes</td><td>1</td><td>ISO88592</td></tr><tr><td>LATIN3</td><td>ISO 8859-3, ECMA 94</td><td>South European</td><td>Yes</td><td>1</td><td>ISO88593</td></tr><tr><td>LATIN4</td><td>ISO 8859-4, ECMA 94</td><td>North European</td><td>Yes</td><td>1</td><td>ISO88594</td></tr><tr><td>LATIN5</td><td>ISO 8859-9, ECMA 128</td><td>Turkish</td><td>Yes</td><td>1</td><td>ISO88599</td></tr><tr><td>LATIN6</td><td>ISO 8859-10, ECMA 144</td><td>Nordic</td><td>Yes</td><td>1</td><td>ISO885910</td></tr><tr><td>LATIN7</td><td>ISO 8859-13</td><td>Baltic</td><td>Yes</td><td>1</td><td>ISO885913</td></tr><tr><td>LATIN8</td><td>ISO 8859-14</td><td>Celtic</td><td>Yes</td><td>1</td><td>ISO885914</td></tr><tr><td>LATIN9</td><td>ISO 8859-15</td><td>LATIN1 with Euro and accents</td><td>Yes</td><td>1</td><td>ISO885915</td></tr><tr><td>LATIN10</td><td>ISO 8859-16, ASRO SR 14111</td><td>Romanian</td><td>Yes</td><td>1</td><td>ISO885916</td></tr><tr><td>MULE_INTERNAL</td><td>Mule internal code</td><td>Multilingual Emacs</td><td>Yes</td><td>1-4</td><td></td></tr><tr><td>SJIS</td><td>Shift JIS</td><td>Japanese</td><td>No</td><td>1-2</td><td>Mskanji, ShiftJIS, WIN932, Windows932</td></tr><tr><td>SQL_ASCII</td><td>unspecified <a href="#fntarg_2">2</a></td><td>any</td><td>No</td><td>1</td><td></td></tr><tr><td>UHC</td><td>Unified Hangul Code</td><td>Korean</td><td>No</td><td>1-2</td><td>WIN949, Windows949</td></tr><tr><td>UTF8</td><td>Unicode, 8-bit</td><td>all</td><td>Yes</td><td>1-4</td><td>Unicode</td></tr><tr><td>WIN866</td><td>Windows CP866</td><td>Cyrillic</td><td>Yes</td><td>1</td><td>ALT</td></tr><tr><td>WIN874</td><td>Windows CP874</td><td>Thai</td><td>Yes</td><td>1</td><td></td></tr><tr><td>WIN1250</td><td>Windows CP1250</td><td>Central European</td><td>Yes</td><td>1</td><td></td></tr><tr><td>WIN1251</td><td>Windows CP1251</td><td>Cyrillic</td><td>Yes</td><td>1</td><td>WIN</td></tr><tr><td>WIN1252</td><td>Windows CP1252</td><td>Western European</td><td>Yes</td><td>1</td><td></td></tr><tr><td>WIN1253</td><td>Windows CP1253</td><td>Greek</td><td>Yes</td><td>1</td><td></td></tr><tr><td>WIN1254</td><td>Windows CP1254</td><td>Turkish</td><td>Yes</td><td>1</td><td></td></tr><tr><td>WIN1255</td><td>Windows CP1255</td><td>Hebrew</td><td>Yes</td><td>1</td><td></td></tr><tr><td>WIN1256</td><td>Windows CP1256</td><td>Arabic</td><td>Yes</td><td>1</td><td></td></tr><tr><td>WIN1257</td><td>Windows CP1257</td><td>Baltic</td><td>Yes</td><td>1</td><td></td></tr><tr><td>WIN1258</td><td>Windows CP1258</td><td>Vietnamese</td><td>Yes</td><td>1</td><td>ABC, TCVN, TCVN5712, VSCII</td></tr></tbody></table><p><strong>Parent topic:</strong> <a href="./ref_guide.html">WarehousePG Reference Guide</a></p><h2 id="setting-the-character-set" tabindex="-1"><a id="topic2"></a>Setting the Character Set <a class="header-anchor" href="#setting-the-character-set" aria-label="Permalink to &quot;&lt;a id=&quot;topic2&quot;&gt;&lt;/a&gt;Setting the Character Set&quot;">​</a></h2><p><code>gpinitsystem</code> defines the default character set for a WarehousePG cluster by reading the setting of the <code>ENCODING</code> parameter in the <code>gp_init_config</code> file at initialization time. The default character set is <code>UNICODE</code> or <code>UTF8</code>.</p><p>You can create a database with a different character set besides what is used as the system-wide default. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; CREATE DATABASE korean WITH ENCODING &#39;EUC_KR&#39;;</span></span></code></pre></div><blockquote><p><strong>Important</strong> Although you can specify any encoding you want for a database, it is unwise to choose an encoding that is not what is expected by the locale you have selected. The <code>LC_COLLATE</code> and <code>LC_CTYPE</code> settings imply a particular encoding, and locale-dependent operations (such as sorting) are likely to misinterpret data that is in an incompatible encoding.</p></blockquote><p>Since these locale settings are frozen by <code>gpinitsystem</code>, the apparent flexibility to use different encodings in different databases is more theoretical than real.</p><p>One way to use multiple encodings safely is to set the locale to <code>C</code> or <code>POSIX</code> during initialization time, thus deactivating any real locale awareness.</p><h2 id="character-set-conversion-between-server-and-client" tabindex="-1"><a id="topic3"></a>Character Set Conversion Between Server and Client <a class="header-anchor" href="#character-set-conversion-between-server-and-client" aria-label="Permalink to &quot;&lt;a id=&quot;topic3&quot;&gt;&lt;/a&gt;Character Set Conversion Between Server and Client&quot;">​</a></h2><p>WarehousePG supports automatic character set conversion between server and client for certain character set combinations. The conversion information is stored in the coordinator <em>pg_conversion</em> system catalog table. WarehousePG comes with some predefined conversions or you can create a new conversion using the SQL command <code>CREATE CONVERSION</code>.</p><table tabindex="0"><thead><tr><th>Server Character Set</th><th>Available Client Character Sets</th></tr></thead><tbody><tr><td>BIG5</td><td>not supported as a server encoding</td></tr><tr><td>EUC_CN</td><td>EUC_CN, MULE_INTERNAL, UTF8</td></tr><tr><td>EUC_JP</td><td>EUC_JP, MULE_INTERNAL, SJIS, UTF8</td></tr><tr><td>EUC_KR</td><td>EUC_KR, MULE_INTERNAL, UTF8</td></tr><tr><td>EUC_TW</td><td>EUC_TW, BIG5, MULE_INTERNAL, UTF8</td></tr><tr><td>GB18030</td><td>not supported as a server encoding</td></tr><tr><td>GBK</td><td>not supported as a server encoding</td></tr><tr><td>ISO_8859_5</td><td>ISO_8859_5, KOI8, MULE_INTERNAL, UTF8, WIN866, WIN1251</td></tr><tr><td>ISO_8859_6</td><td>ISO_8859_6, UTF8</td></tr><tr><td>ISO_8859_7</td><td>ISO_8859_7, UTF8</td></tr><tr><td>ISO_8859_8</td><td>ISO_8859_8, UTF8</td></tr><tr><td>JOHAB</td><td>JOHAB, UTF8</td></tr><tr><td>KOI8</td><td>KOI8, ISO_8859_5, MULE_INTERNAL, UTF8, WIN866, WIN1251</td></tr><tr><td>LATIN1</td><td>LATIN1, MULE_INTERNAL, UTF8</td></tr><tr><td>LATIN2</td><td>LATIN2, MULE_INTERNAL, UTF8, WIN1250</td></tr><tr><td>LATIN3</td><td>LATIN3, MULE_INTERNAL, UTF8</td></tr><tr><td>LATIN4</td><td>LATIN4, MULE_INTERNAL, UTF8</td></tr><tr><td>LATIN5</td><td>LATIN5, UTF8</td></tr><tr><td>LATIN6</td><td>LATIN6, UTF8</td></tr><tr><td>LATIN7</td><td>LATIN7, UTF8</td></tr><tr><td>LATIN8</td><td>LATIN8, UTF8</td></tr><tr><td>LATIN9</td><td>LATIN9, UTF8</td></tr><tr><td>LATIN10</td><td>LATIN10, UTF8</td></tr><tr><td>MULE_INTERNAL</td><td>MULE_INTERNAL, BIG5, EUC_CN, EUC_JP, EUC_KR, EUC_TW, ISO_8859_5, KOI8, LATIN1 to LATIN4, SJIS, WIN866, WIN1250, WIN1251</td></tr><tr><td>SJIS</td><td>not supported as a server encoding</td></tr><tr><td>SQL_ASCII</td><td>not supported as a server encoding</td></tr><tr><td>UHC</td><td>not supported as a server encoding</td></tr><tr><td>UTF8</td><td>all supported encodings</td></tr><tr><td>WIN866</td><td>WIN866</td></tr><tr><td>ISO_8859_5</td><td>KOI8, MULE_INTERNAL, UTF8, WIN1251</td></tr><tr><td>WIN874</td><td>WIN874, UTF8</td></tr><tr><td>WIN1250</td><td>WIN1250, LATIN2, MULE_INTERNAL, UTF8</td></tr><tr><td>WIN1251</td><td>WIN1251, ISO_8859_5, KOI8, MULE_INTERNAL, UTF8, WIN866</td></tr><tr><td>WIN1252</td><td>WIN1252, UTF8</td></tr><tr><td>WIN1253</td><td>WIN1253, UTF8</td></tr><tr><td>WIN1254</td><td>WIN1254, UTF8</td></tr><tr><td>WIN1255</td><td>WIN1255, UTF8</td></tr><tr><td>WIN1256</td><td>WIN1256, UTF8</td></tr><tr><td>WIN1257</td><td>WIN1257, UTF8</td></tr><tr><td>WIN1258</td><td>WIN1258, UTF8</td></tr></tbody></table><p>To enable automatic character set conversion, you have to tell WarehousePG the character set (encoding) you would like to use in the client. There are several ways to accomplish this:</p><ul><li><p>Using the <code>\\encoding</code> command in <code>psql</code>, which allows you to change client encoding on the fly.</p></li><li><p>Using <code>SET client_encoding TO</code>.</p><p>To set the client encoding, use the following SQL command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; SET CLIENT_ENCODING TO &#39;*value*&#39;;</span></span></code></pre></div><p>To query the current client encoding:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; SHOW client_encoding;</span></span></code></pre></div><p>To return to the default encoding:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>=&gt; RESET client_encoding;</span></span></code></pre></div></li><li><p>Using the <code>PGCLIENTENCODING</code> environment variable. When <code>PGCLIENTENCODING</code> is defined in the client&#39;s environment, that client encoding is automatically selected when a connection to the server is made. (This can subsequently be overridden using any of the other methods mentioned above.)</p></li><li><p>Setting the configuration parameter <code>client_encoding</code>. If <code>client_encoding</code> is set in the coordinator <code>postgresql.conf</code>file, that client encoding is automatically selected when a connection to WarehousePG is made. (This can subsequently be overridden using any of the other methods mentioned above.)</p></li></ul><p>If the conversion of a particular character is not possible (suppose you chose <code>EUC_JP</code> for the server and <code>LATIN1</code> for the client, then some Japanese characters do not have a representation in <code>LATIN1</code>) then an error is reported.</p><p>If the client character set is defined as <code>SQL_ASCII</code>, encoding conversion is deactivated, regardless of the server&#39;s character set. The use of <code>SQL_ASCII</code> is unwise unless you are working with all-ASCII data. <code>SQL_ASCII</code> is not supported as a server encoding.</p><p><a id="fnsrc_1"></a><sup>1</sup> Not all APIs support all the listed character sets. For example, the JDBC driver does not support MULE_INTERNAL, LATIN6, LATIN8, and LATIN10.</p><p><a id="fnsrc_2"></a><sup>2</sup> The SQL_ASCII setting behaves considerably differently from the other settings. Byte values 0-127 are interpreted according to the ASCII standard, while byte values 128-255 are taken as uninterpreted characters. If you are working with any non-ASCII data, it is unwise to use the SQL_ASCII setting as a client encoding. SQL_ASCII is not supported as a server encoding.</p>',20)]))}const u=d(n,[["render",s]]);export{p as __pageData,u as default};
