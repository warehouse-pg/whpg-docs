import{_ as a,c as t,o as s,ag as o}from"./chunks/framework.Ds6Eueu6.js";const E=JSON.parse('{"title":"CREATE TABLE AS","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/sql_commands/CREATE_TABLE_AS.md","filePath":"docs/7x/ref_guide/sql_commands/CREATE_TABLE_AS.md"}'),n={name:"docs/7x/ref_guide/sql_commands/CREATE_TABLE_AS.md"};function l(i,e,r,c,p,d){return s(),t("div",null,e[0]||(e[0]=[o(`<h1 id="create-table-as" tabindex="-1">CREATE TABLE AS <a class="header-anchor" href="#create-table-as" aria-label="Permalink to &quot;CREATE TABLE AS&quot;">​</a></h1><p>Defines a new table from the results of a query.</p><h2 id="synopsis" tabindex="-1"><a id="section2"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;section2&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE [ [ GLOBAL | LOCAL ] { TEMPORARY | TEMP } | UNLOGGED ] TABLE [ IF NOT EXISTS ] &lt;table_name&gt;</span></span>
<span class="line"><span>        [ (&lt;column_name&gt; [, ...] ) ]</span></span>
<span class="line"><span>        [ USING &lt;access_method&gt; ]</span></span>
<span class="line"><span>        [ WITH ( &lt;storage_parameter&gt; [= &lt;value&gt;] [, ... ] ) | WITHOUT OIDS ]</span></span>
<span class="line"><span>        [ ON COMMIT { PRESERVE ROWS | DELETE ROWS | DROP } ]</span></span>
<span class="line"><span>        [ TABLESPACE &lt;tablespace_name&gt; ]</span></span>
<span class="line"><span>        AS &lt;query&gt;</span></span>
<span class="line"><span>        [ WITH [ NO ] DATA ]</span></span>
<span class="line"><span>        [ DISTRIBUTED BY ( &lt;column&gt; [&lt;opclass&gt;] [, ... ] ) </span></span>
<span class="line"><span>           | DISTRIBUTED RANDOMLY</span></span>
<span class="line"><span>           | DISTRIBUTED REPLICATED ]</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="section3"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;section3&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p><code>CREATE TABLE AS</code> creates a table and fills it with data computed by a <a href="./SELECT.html">SELECT</a> command. The table columns have the names and data types associated with the output columns of the <code>SELECT</code>, however you can override the column names by giving an explicit list of new column names.</p><p><code>CREATE TABLE AS</code> creates a new table and evaluates the query just once to fill the new table initially. The new table will not track subsequent changes to the source tables of the query.</p><h2 id="parameters" tabindex="-1"><a id="section4"></a>Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;&lt;a id=&quot;section4&quot;&gt;&lt;/a&gt;Parameters&quot;">​</a></h2><p>GLOBAL | LOCAL : Ignored for compatibility. These keywords are deprecated; refer to <a href="./CREATE_TABLE.html">CREATE TABLE</a> for details.</p><p>TEMPORARY | TEMP : If specified, the new table is created as a temporary table. Refer to <a href="./CREATE_TABLE.html">CREATE TABLE</a> for details.</p><p>UNLOGGED : If specified, the table is created as an unlogged table. Refer to <a href="./CREATE_TABLE.html">CREATE TABLE</a> for details.</p><p>IF NOT EXISTS : Do not throw an error if a relation with the same name already exists; simply issue a notice and leave the table unmodified.</p><p>table_name : The name (optionally schema-qualified) of the new table to be created.</p><p>column_name : The name of a column in the new table. If column names are not provided, they are taken from the output column names of the query.</p><p>USING access_method : The optional <code>USING</code> clause specifies the table access method to use to store the contents for the new table you are creating; the method must be an access method of type <a href="./SELECT.html#table-command">TABLE</a>. Set to <code>heap</code> to access the table as a heap-storage table, <code>ao_row</code> to access the table as an append-optimized table with row-oriented storage (AO), or <code>ao_column</code> to access the table as an append-optimized table with column-oriented storage (AO/CO). The default access method is determined by the value of the <a href="./../config_params/guc-list.html#default_table_access_method">default_table_access_method</a> server configuration parameter.</p><p>: <p class="note"><strong>Note:</strong> Although you can specify the table&#39;s access method using <code>WITH (appendoptimized=true|false, orientation=row|column)</code> VMware recommends that you use <code>USING &lt;access_method&gt;</code> instead.</p></p><p>WITH ( storage_parameter=value ) : The <code>WITH</code> clause specifies optional storage parameters for the new table. Refer to the <a href="./CREATE_TABLE.html#storage_parameters">Storage Parameters</a> section on the <code>CREATE TABLE</code> reference page for more information.</p><p>ON COMMIT : The behavior of temporary tables at the end of a transaction block can be controlled using <code>ON COMMIT</code>. The three options are:</p><p>: PRESERVE ROWS — WarehousePG takes no special action at the ends of transactions for temporary tables. This is the default behavior.</p><p>: DELETE ROWS — WarehousePG deletes all rows in the temporary table at the end of each transaction block. Essentially, an automatic <a href="./TRUNCATE.html">TRUNCATE</a> is done at each commit.</p><p>: DROP — WarehousePG drops the temporary table at the end of the current transaction block.</p><p>TABLESPACE tablespace_name : The tablespace_name parameter is the name of the tablespace in which the new table is to be created. If not specified, the database&#39;s <a href="./../config_params/guc-list.html#default_tablespace">default_tablespace</a> is used, or <a href="./../config_params/guc-list.html#temp_tablespaces">temp_tablespaces</a> if the table is temporary.</p><p>AS query : A <a href="./SELECT.html">SELECT</a>, <a href="./SELECT.html#table-command">TABLE</a>, or <a href="./VALUES.html">VALUES</a> command, or an <a href="./EXECUTE.html">EXECUTE</a> command that runs a prepared <code>SELECT</code>, <code>TABLE</code>, or <code>VALUES</code> query.</p><p>DISTRIBUTED BY ( column [opclass] [, ... ] ) DISTRIBUTED RANDOMLY DISTRIBUTED REPLICATED : Used to declare the WarehousePG distribution policy for the table. Refer to <a href="./CREATE_TABLE.html">CREATE TABLE</a> for details.</p><h2 id="notes" tabindex="-1"><a id="section5"></a>Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;&lt;a id=&quot;section5&quot;&gt;&lt;/a&gt;Notes&quot;">​</a></h2><p>This command is functionally similar to <a href="./SELECT_INTO.html">SELECT INTO</a>, but it is preferred since it is less likely to be confused with other uses of the <code>SELECT INTO</code> syntax. Furthermore, <code>CREATE TABLE AS</code> offers a superset of the functionality offered by <code>SELECT INTO</code>.</p><p><code>CREATE TABLE AS</code> can be used for fast data loading from external table data sources. See <a href="./CREATE_EXTERNAL_TABLE.html">CREATE EXTERNAL TABLE</a>.</p><h2 id="examples" tabindex="-1"><a id="section6"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;section6&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>Create a new table <code>films_recent</code> consisting of only recent entries from the table <code>films</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE films_recent AS</span></span>
<span class="line"><span>  SELECT * FROM films WHERE date_prod &gt;= &#39;2020-01-01&#39;;</span></span></code></pre></div><p>To copy a table completely, you can also use the short form by specifying the <code>TABLE</code> command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE TABLE films2 AS</span></span>
<span class="line"><span>  TABLE films;</span></span></code></pre></div><p>Create a new temporary table <code>films_recent</code>, consisting only of recent entries from the table <code>films</code>, using a prepared statement. The new table will be dropped at commit:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>PREPARE recentfilms(date) AS</span></span>
<span class="line"><span>  SELECT * FROM films WHERE date_prod &gt; $1;</span></span>
<span class="line"><span>CREATE TEMP TABLE films_recent ON COMMIT DROP AS </span></span>
<span class="line"><span>  EXECUTE recentfilms(&#39;2020-01-01&#39;);</span></span></code></pre></div><h2 id="compatibility" tabindex="-1"><a id="section7"></a>Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;&lt;a id=&quot;section7&quot;&gt;&lt;/a&gt;Compatibility&quot;">​</a></h2><p><code>CREATE TABLE AS</code> conforms to the SQL standard, with the following exceptions:</p><ul><li>The standard requires parentheses around the subquery clause; in WarehousePG, these parentheses are optional.</li><li>In the standard, the <code>WITH [NO] DATA</code> clause is required, in WarehousePG it is optional.</li><li>WarehousePG handles temporary tables differently from the standard; see <a href="./CREATE_TABLE.html">CREATE TABLE</a> for details.</li><li>The <code>WITH</code> clause is a WarehousePG extension; storage parameters are not part of the standard.</li><li>The WarehousePG concept of tablespaces is not part of the standard. The <code>TABLESPACE</code> clause is an extension.</li></ul><h2 id="see-also" tabindex="-1"><a id="section8"></a>See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;&lt;a id=&quot;section8&quot;&gt;&lt;/a&gt;See Also&quot;">​</a></h2><p><a href="./CREATE_EXTERNAL_TABLE.html">CREATE EXTERNAL TABLE</a>, <a href="./CREATE_MATERIALIZED_VIEW.html">CREATE MATERIALIZED VIEW</a>, <a href="./CREATE_TABLE.html">CREATE TABLE</a>, <a href="./EXECUTE.html">EXECUTE</a>, <a href="./SELECT.html">SELECT</a>, <a href="./SELECT_INTO.html">SELECT INTO</a>, <a href="./VALUES.html">VALUES</a></p><p><strong>Parent topic:</strong> <a href="./../sql_commands/sql_ref.html">SQL Commands</a></p>`,40)]))}const m=a(n,[["render",l]]);export{E as __pageData,m as default};
