import{_ as s,c as e,o as n,ag as t}from"./chunks/framework.Ds6Eueu6.js";const i="/assets/gp_greenplum_diagram.CtREgO2H.png",g=JSON.parse('{"title":"Machine Learning and Deep Learning using MADlib","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/analytics/madlib.md","filePath":"docs/7x/analytics/madlib.md"}'),p={name:"docs/7x/analytics/madlib.md"};function l(o,a,r,c,d,h){return n(),e("div",null,a[0]||(a[0]=[t('<h1 id="machine-learning-and-deep-learning-using-madlib" tabindex="-1">Machine Learning and Deep Learning using MADlib <a class="header-anchor" href="#machine-learning-and-deep-learning-using-madlib" aria-label="Permalink to &quot;Machine Learning and Deep Learning using MADlib&quot;">​</a></h1><hr><p>Apache MADlib is an open-source library for scalable in-database analytics. The WarehousePG MADlib extension provides the ability to run machine learning and deep learning workloads in a WarehousePG.</p><p>You can install it as an extension in a WarehousePG cluster you can run data-parallel implementations of mathematical, statistical, graph, machine learning, and deep learning methods on structured and unstructured data. For WarehousePG and MADlib version compatibility, refer to <a href="https://cwiki.apache.org/confluence/display/MADLIB/FAQ#FAQ-Q1-2WhatdatabaseplatformsdoesMADlibsupportandwhatistheupgradematrix?" target="_blank" rel="noreferrer">MADlib FAQ</a>.</p><p>MADlib’s suite of SQL-based algorithms run at scale within a single WarehousePG engine without needing to transfer data between the database and other tools.</p><p>MADlib is part of the database fabric with no changes to the WarehousePG architecture. This makes it easy for database administrators to deploy and manage since it is not a separate daemon or separate software running outside the database.</p><p><img src="'+i+`" alt="WarehousePG with MADlib" title="WarehousePG MADlib Analytics Architecture"></p><h2 id="machine-learning" tabindex="-1"><a id="section_lmf_pv1_rqb"></a>Machine Learning <a class="header-anchor" href="#machine-learning" aria-label="Permalink to &quot;&lt;a id=&quot;section_lmf_pv1_rqb&quot;&gt;&lt;/a&gt;Machine Learning&quot;">​</a></h2><p>Apache MADlib consists of methods to support the full spectrum of data science activities. This includes data transformation and feature engineering, using methods in descriptive and inferential statistics, pivoting, sessionization and encoding categorical variables. There is also a comprehensive library of graph, supervised learning and unsupervised learning methods.</p><p>In the area of model selection, MADlib supports cross validation and the most common prediction metrics for evaluating the quality of predictions of a model. Please refer to the <a href="http://madlib.apache.org/docs/latest/index.html" target="_blank" rel="noreferrer">MADlib user guide</a> for more information on these methods.</p><h2 id="deep-learning" tabindex="-1"><a id="section_hrn_pv1_rqb"></a>Deep Learning <a class="header-anchor" href="#deep-learning" aria-label="Permalink to &quot;&lt;a id=&quot;section_hrn_pv1_rqb&quot;&gt;&lt;/a&gt;Deep Learning&quot;">​</a></h2><p>WarehousePG supports using Keras and TensorFlow for deep learning. You can review the <a href="https://cwiki.apache.org/confluence/display/MADLIB/Deep+Learning" target="_blank" rel="noreferrer">supported libraries and configuration instructions</a> on the Apache MADlib pages as well as user documentation for <a href="http://madlib.apache.org/docs/latest/group__grp__dl.html" target="_blank" rel="noreferrer">Keras API</a> using the Tensorflow backend.</p><p>MADlib supports Keras with a TensorFlow backend, with or without Graphics Processing Units (GPUs). GPUs can significantly accelerate the training of deep neural networks so they are typically used for enterprise level workloads. For further GPU information, visit the MADlib wiki, <a href="https://cwiki.apache.org/confluence/display/MADLIB/Deep+Learning" target="_blank" rel="noreferrer">https://cwiki.apache.org/confluence/display/MADLIB/Deep+Learning</a>.</p><h2 id="pivotalr" tabindex="-1"><a id="section_wp5_pv1_rqb"></a>PivotalR <a class="header-anchor" href="#pivotalr" aria-label="Permalink to &quot;&lt;a id=&quot;section_wp5_pv1_rqb&quot;&gt;&lt;/a&gt;PivotalR&quot;">​</a></h2><p>MADlib can be used with PivotalR, an R client package that enables users to interact with data resident in the WarehousePG. PivotalR can be considered as a wrapper around MADlib that translates R code into SQL to run on MPP databases and is designed for users familiar with R but with data sets that are too large for R.</p><p>The R language is an open-source language that is used for statistical computing. PivotalR is an R package that enables users to interact with data resident in WarehousePG using the R client. Using PivotalR requires that MADlib is installed on the WarehousePG.</p><p>PivotalR allows R users to leverage the scalability and performance of in-database analytics without leaving the R command line. The computational work is run in-database, while the end user benefits from the familiar R interface. Compared with respective native R functions, there is an increase in scalability and a decrease in running time. Furthermore, data movement, which can take hours for very large data sets, is eliminated with PivotalR.</p><p>Key features of the PivotalR package:</p><ul><li>Explore and manipulate data in the database with R syntax. SQL translation is performed by PivotalR.</li><li>Use the familiar R syntax for predictive analytics algorithms, for example linear and logistic regression. PivotalR accesses the MADlib in-database analytics function calls.</li><li>Comprehensive documentation package with examples in standard R format accessible from an R client.</li><li>The PivotalR package also supports access to the MADlib functionality.</li></ul><p>For information about PivotalR, including supported MADlib functionality, see <a href="https://cwiki.apache.org/confluence/display/MADLIB/PivotalR" target="_blank" rel="noreferrer">https://cwiki.apache.org/confluence/display/MADLIB/PivotalR</a>.</p><p>The R package for PivotalR can be found at <a href="https://cran.r-project.org/web/packages/PivotalR/index.html" target="_blank" rel="noreferrer">https://cran.r-project.org/web/packages/PivotalR/index.html</a>.</p><h2 id="prerequisites" tabindex="-1"><a id="prereq"></a>Prerequisites <a class="header-anchor" href="#prerequisites" aria-label="Permalink to &quot;&lt;a id=&quot;prereq&quot;&gt;&lt;/a&gt;Prerequisites&quot;">​</a></h2><p>MADlib requires the <code>m4</code> macro processor version 1.4.13 or later. Ensure that you have access to, or superuser permissions to install, this package on each WarehousePG host.</p><p>MADlib 2.1.0 requires Python 3, which should already be installed as a dependency when you install the WarehousePG software on each WarehousePG host.</p><h2 id="installing-madlib" tabindex="-1"><a id="topic3"></a>Installing MADlib <a class="header-anchor" href="#installing-madlib" aria-label="Permalink to &quot;&lt;a id=&quot;topic3&quot;&gt;&lt;/a&gt;Installing MADlib&quot;">​</a></h2><p>To install MADlib on WarehousePG, you first install a compatible WarehousePG MADlib package and then install the MADlib function libraries on all databases that will use MADlib.</p><p>The <a href="./../utility_guide/ref/gppkg.html">gppkg</a> utility installs WarehousePG extensions, along with any dependencies, on all hosts across a cluster. It also automatically installs extensions on new hosts in the case of system expansion segment recovery.</p><p>If you have GPUs installed on some or across all hosts in the cluster, then the segments residing on those hosts can benefit from GPU acceleration. GPUs and deep learning libraries such as Keras, TensorFlow, cudNN, and CUDA are managed separately from MADlib. For more information see the <a href="https://cwiki.apache.org/confluence/display/MADLIB/Deep+Learning" target="_blank" rel="noreferrer">MADlib wiki instructions for deep learning</a> and the <a href="http://madlib.apache.org/docs/latest/group__grp__dl.html" target="_blank" rel="noreferrer">MADlib user documentation for deep learning</a> .</p><h3 id="installing-the-warehousepg-madlib-package" tabindex="-1"><a id="topic4"></a>Installing the WarehousePG MADlib Package <a class="header-anchor" href="#installing-the-warehousepg-madlib-package" aria-label="Permalink to &quot;&lt;a id=&quot;topic4&quot;&gt;&lt;/a&gt;Installing the WarehousePG MADlib Package&quot;">​</a></h3><p>Before you install the MADlib package, make sure that your WarehousePG is running, you have sourced <code>greenplum_path.sh</code>, and that the<code>$COORDINATOR_DATA_DIRECTORY</code> and <code>$GPHOME</code> variables are set.</p><ol><li><p>Download the MADlib extension package.</p></li><li><p>Copy the MADlib package to the WarehousePG coordinator host.</p></li><li><p>Follow the instructions in <a href="./../install_guide/verify_sw.html">Verifying the WarehousePG Software Download</a> to verify the integrity of the <strong>WarehousePG Advanced Analytics MADlib</strong> software.</p></li><li><p>Unpack the MADlib distribution package. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ tar xzvf madlib-2.1.0-gp7-rhel8-x86_64.tar.gz</span></span></code></pre></div></li><li><p>Install the software package by running the <code>gppkg</code> command. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gppkg install ./madlib-2.1.0-gp7-rhel8-x86_64/madlib-2.1.0-gp7-rhel8-x86_64.gppkg.tar.gz</span></span></code></pre></div></li></ol><h3 id="adding-madlib-functions-to-a-database" tabindex="-1"><a id="topic5"></a>Adding MADlib Functions to a Database <a class="header-anchor" href="#adding-madlib-functions-to-a-database" aria-label="Permalink to &quot;&lt;a id=&quot;topic5&quot;&gt;&lt;/a&gt;Adding MADlib Functions to a Database&quot;">​</a></h3><p>After installing the MADlib package, run the <code>madpack</code> command to add MADlib functions to WarehousePG. <code>madpack</code> is in <code>$GPHOME/madlib/bin</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ madpack [-s &lt;schema_name&gt;] -p greenplum -c &lt;user&gt;@&lt;host&gt;:&lt;port&gt;/&lt;database&gt; install</span></span></code></pre></div><p>For example, this command creates MADlib functions in the WarehousePG <code>testdb</code> running on server <code>cdw</code> on port <code>5432</code>. The <code>madpack</code> command logs in as the user <code>gpadmin</code> and prompts for password. The target schema is <code>madlib</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ madpack -s madlib -p greenplum -c gpadmin@cdw:5432/testdb install</span></span></code></pre></div><p>After installing the functions, The WarehousePG <code>gpadmin</code> superuser role should grant all privileges on the target schema (in the example <code>madlib</code>) to users who will be accessing MADlib functions. Users without access to the functions will get the error <code>ERROR: permission denied for schema MADlib</code>.</p><p>The madpack <code>install-check</code> option runs test using Madlib modules to check the MADlib installation:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ madpack -s madlib -p greenplum -c gpadmin@cdw:5432/testdb install-check</span></span></code></pre></div><blockquote><p><strong>Note</strong> The command <code>madpack -h</code> displays information for the utility.</p></blockquote><h2 id="uninstalling-madlib" tabindex="-1"><a id="topic6"></a>Uninstalling MADlib <a class="header-anchor" href="#uninstalling-madlib" aria-label="Permalink to &quot;&lt;a id=&quot;topic6&quot;&gt;&lt;/a&gt;Uninstalling MADlib&quot;">​</a></h2><ul><li><a href="#topic7">Remove MADlib objects from the database</a></li><li><a href="#topic8">Uninstall the WarehousePG MADlib Package</a></li></ul><p>When you remove MADlib support from a database, routines that you created in the database that use MADlib functionality will no longer work.</p><h3 id="remove-madlib-objects-from-the-database" tabindex="-1"><a id="topic7"></a>Remove MADlib objects from the database <a class="header-anchor" href="#remove-madlib-objects-from-the-database" aria-label="Permalink to &quot;&lt;a id=&quot;topic7&quot;&gt;&lt;/a&gt;Remove MADlib objects from the database&quot;">​</a></h3><p>Use the <code>madpack uninstall</code> command to remove MADlib objects from a WarehousePG. For example, this command removes MADlib objects from the database <code>testdb</code>.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ madpack  -s madlib -p greenplum -c gpadmin@cdw:5432/testdb uninstall</span></span></code></pre></div><h3 id="uninstall-the-warehousepg-madlib-package" tabindex="-1"><a id="topic8"></a>Uninstall the WarehousePG MADlib Package <a class="header-anchor" href="#uninstall-the-warehousepg-madlib-package" aria-label="Permalink to &quot;&lt;a id=&quot;topic8&quot;&gt;&lt;/a&gt;Uninstall the WarehousePG MADlib Package&quot;">​</a></h3><p>If no databases use the MADlib functions, use the WarehousePG <code>gppkg</code> utility with the <code>remove</code> option to uninstall the MADlib package. When removing the package you must specify the package and version. This example uninstalls MADlib package version 1.18.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gppkg remove madlib-2.1.0-gp7-rhel8-x86_64</span></span></code></pre></div><p>You can run the <code>gppkg</code> utility with the <code>query</code> option to list the installed extensions and their versions.</p><p>After you uninstall the package, restart the database.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ gpstop -r</span></span></code></pre></div><h2 id="examples" tabindex="-1"><a id="topic9"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;topic9&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>Following are examples using the WarehousePG MADlib extension:</p><ul><li><a href="#mlogr">Linear Regression</a></li><li><a href="#assoc_rules">Association Rules</a></li><li><a href="#naive_bayes">Naive Bayes Classification</a></li></ul><p>See the MADlib documentation for additional examples.</p><h3 id="linear-regression" tabindex="-1"><a id="mlogr"></a>Linear Regression <a class="header-anchor" href="#linear-regression" aria-label="Permalink to &quot;&lt;a id=&quot;mlogr&quot;&gt;&lt;/a&gt;Linear Regression&quot;">​</a></h3><p>This example runs a linear regression on the table <code>regr_example</code>. The dependent variable data are in the <code>y</code> column and the independent variable data are in the <code>x1</code> and <code>x2</code> columns.</p><p>The following statements create the <code>regr_example</code> table and load some sample data:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP TABLE IF EXISTS regr_example;</span></span>
<span class="line"><span>CREATE TABLE regr_example (</span></span>
<span class="line"><span>   id int,</span></span>
<span class="line"><span>   y int,</span></span>
<span class="line"><span>   x1 int,</span></span>
<span class="line"><span>   x2 int</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>INSERT INTO regr_example VALUES</span></span>
<span class="line"><span>   (1,  5, 2, 3),</span></span>
<span class="line"><span>   (2, 10, 7, 2),</span></span>
<span class="line"><span>   (3,  6, 4, 1),</span></span>
<span class="line"><span>   (4,  8, 3, 4);</span></span></code></pre></div><p>The MADlib <code>linregr_train()</code> function produces a regression model from an input table containing training data. The following <code>SELECT</code> statement runs a simple multivariate regression on the <code>regr_example</code> table and saves the model in the <code>reg_example_model</code> table.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT madlib.linregr_train (</span></span>
<span class="line"><span>   &#39;regr_example&#39;,         -- source table</span></span>
<span class="line"><span>   &#39;regr_example_model&#39;,   -- output model table</span></span>
<span class="line"><span>   &#39;y&#39;,                    -- dependent variable</span></span>
<span class="line"><span>   &#39;ARRAY[1, x1, x2]&#39;      -- independent variables</span></span>
<span class="line"><span>);</span></span></code></pre></div><p>The <code>madlib.linregr_train()</code> function can have additional arguments to set grouping columns and to calculate the heteroskedasticity of the model.</p><blockquote><p><strong>Note</strong> The intercept is computed by setting one of the independent variables to a constant <code>1</code>, as shown in the preceding example.</p></blockquote><p>Running this query against the <code>regr_example</code> table creates the <code>regr_example_model</code> table with one row of data:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM regr_example_model;</span></span>
<span class="line"><span>-[ RECORD 1 ]------------+------------------------</span></span>
<span class="line"><span>coef                     | {0.111111111111127,1.14814814814815,1.01851851851852}</span></span>
<span class="line"><span>r2                       | 0.968612680477111</span></span>
<span class="line"><span>std_err                  | {1.49587911309236,0.207043331249903,0.346449758034495}</span></span>
<span class="line"><span>t_stats                  | {0.0742781352708591,5.54544858420156,2.93987366103776}</span></span>
<span class="line"><span>p_values                 | {0.952799748147436,0.113579771006374,0.208730790695278}</span></span>
<span class="line"><span>condition_no             | 22.650203241881</span></span>
<span class="line"><span>num_rows_processed       | 4</span></span>
<span class="line"><span>num_missing_rows_skipped | 0</span></span>
<span class="line"><span>variance_covariance      | {{2.23765432098598,-0.257201646090342,-0.437242798353582},</span></span>
<span class="line"><span>                            {-0.257201646090342,0.042866941015057,0.0342935528120456},</span></span>
<span class="line"><span>                            {-0.437242798353582,0.0342935528120457,0.12002743484216}}</span></span></code></pre></div><p>The model saved in the <code>regr_example_model</code> table can be used with the MADlib linear regression prediction function, <code>madlib.linregr_predict()</code>, to view the residuals:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT regr_example.*,</span></span>
<span class="line"><span>        madlib.linregr_predict ( ARRAY[1, x1, x2], m.coef ) as predict,</span></span>
<span class="line"><span>        y - madlib.linregr_predict ( ARRAY[1, x1, x2], m.coef ) as residual</span></span>
<span class="line"><span>FROM regr_example, regr_example_model m;</span></span>
<span class="line"><span> id | y  | x1 | x2 |     predict      |      residual</span></span>
<span class="line"><span>----+----+----+----+------------------+--------------------</span></span>
<span class="line"><span>  1 |  5 |  2 |  3 | 5.46296296296297 | -0.462962962962971</span></span>
<span class="line"><span>  3 |  6 |  4 |  1 | 5.72222222222224 |  0.277777777777762</span></span>
<span class="line"><span>  2 | 10 |  7 |  2 | 10.1851851851852 | -0.185185185185201</span></span>
<span class="line"><span>  4 |  8 |  3 |  4 | 7.62962962962964 |  0.370370370370364</span></span>
<span class="line"><span>(4 rows)</span></span></code></pre></div><h3 id="association-rules" tabindex="-1"><a id="assoc_rules"></a>Association Rules <a class="header-anchor" href="#association-rules" aria-label="Permalink to &quot;&lt;a id=&quot;assoc_rules&quot;&gt;&lt;/a&gt;Association Rules&quot;">​</a></h3><p>This example demonstrates the association rules data mining technique on a transactional data set. Association rule mining is a technique for discovering relationships between variables in a large data set. This example considers items in a store that are commonly purchased together. In addition to market basket analysis, association rules are also used in bioinformatics, web analytics, and other fields.</p><p>The example analyzes purchase information for seven transactions that are stored in a table with the MADlib function <code>MADlib.assoc_rules</code>. The function assumes that the data is stored in two columns with a single item and transaction ID per row. Transactions with multiple items consist of multiple rows with one row per item.</p><p>These commands create the table.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP TABLE IF EXISTS test_data;</span></span>
<span class="line"><span>CREATE TABLE test_data (</span></span>
<span class="line"><span>   trans_id INT,</span></span>
<span class="line"><span>   product text</span></span>
<span class="line"><span>);</span></span></code></pre></div><p>This <code>INSERT</code> command adds the data to the table.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>INSERT INTO test_data VALUES</span></span>
<span class="line"><span>   (1, &#39;beer&#39;),</span></span>
<span class="line"><span>   (1, &#39;diapers&#39;),</span></span>
<span class="line"><span>   (1, &#39;chips&#39;),</span></span>
<span class="line"><span>   (2, &#39;beer&#39;),</span></span>
<span class="line"><span>   (2, &#39;diapers&#39;),</span></span>
<span class="line"><span>   (3, &#39;beer&#39;),</span></span>
<span class="line"><span>   (3, &#39;diapers&#39;),</span></span>
<span class="line"><span>   (4, &#39;beer&#39;),</span></span>
<span class="line"><span>   (4, &#39;chips&#39;),</span></span>
<span class="line"><span>   (5, &#39;beer&#39;),</span></span>
<span class="line"><span>   (6, &#39;beer&#39;),</span></span>
<span class="line"><span>   (6, &#39;diapers&#39;),</span></span>
<span class="line"><span>   (6, &#39;chips&#39;),</span></span>
<span class="line"><span>   (7, &#39;beer&#39;),</span></span>
<span class="line"><span>   (7, &#39;diapers&#39;);</span></span></code></pre></div><p>The MADlib function <code>madlib.assoc_rules()</code> analyzes the data and determines association rules with the following characteristics.</p><ul><li>A support value of at least .40. Support is the ratio of transactions that contain X to all transactions.</li><li>A confidence value of at least .75. Confidence is the ratio of transactions that contain X to transactions that contain Y. One could view this metric as the conditional probability of X given Y.</li></ul><p>This <code>SELECT</code> command determines association rules, creates the table <code>assoc_rules</code>, and adds the statistics to the table.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM madlib.assoc_rules (</span></span>
<span class="line"><span>   .40,          -- support</span></span>
<span class="line"><span>   .75,          -- confidence</span></span>
<span class="line"><span>   &#39;trans_id&#39;,   -- transaction column</span></span>
<span class="line"><span>   &#39;product&#39;,    -- product purchased column</span></span>
<span class="line"><span>   &#39;test_data&#39;,  -- table name</span></span>
<span class="line"><span>   &#39;public&#39;,     -- schema name</span></span>
<span class="line"><span>   false);       -- display processing details</span></span></code></pre></div><p>This is the output of the <code>SELECT</code> command. There are two rules that fit the characteristics.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span></span></span>
<span class="line"><span> output_schema | output_table | total_rules | total_time</span></span>
<span class="line"><span>--------------+--------------+-------------+-----------------  </span></span>
<span class="line"><span>public        | assoc_rules  |           2 | 00:00:01.153283</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><p>To view the association rules, you can run this <code>SELECT</code> command.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT pre, post, support FROM assoc_rules</span></span>
<span class="line"><span>   ORDER BY support DESC;</span></span></code></pre></div><p>This is the output. The <code>pre</code> and <code>post</code> columns are the itemsets of left and right hand sides of the association rule respectively.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>    pre    |  post  |      support</span></span>
<span class="line"><span>-----------+--------+-------------------</span></span>
<span class="line"><span> {diapers} | {beer} | 0.714285714285714</span></span>
<span class="line"><span> {chips}   | {beer} | 0.428571428571429</span></span>
<span class="line"><span>(2 rows)</span></span></code></pre></div><p>Based on the data, beer and diapers are often purchased together. To increase sales, you might consider placing beer and diapers closer together on the shelves.</p><h3 id="naive-bayes-classification" tabindex="-1"><a id="naive_bayes"></a>Naive Bayes Classification <a class="header-anchor" href="#naive-bayes-classification" aria-label="Permalink to &quot;&lt;a id=&quot;naive_bayes&quot;&gt;&lt;/a&gt;Naive Bayes Classification&quot;">​</a></h3><p>Naive Bayes analysis predicts the likelihood of an outcome of a class variable, or category, based on one or more independent variables, or attributes. The class variable is a non-numeric categorial variable, a variable that can have one of a limited number of values or categories. The class variable is represented with integers, each integer representing a category. For example, if the category can be one of &quot;true&quot;, &quot;false&quot;, or &quot;unknown,&quot; the values can be represented with the integers 1, 2, or 3.</p><p>The attributes can be of numeric types and non-numeric, categorical, types. The training function has two signatures – one for the case where all attributes are numeric and another for mixed numeric and categorical types. Additional arguments for the latter identify the attributes that should be handled as numeric values. The attributes are submitted to the training function in an array.</p><p>The MADlib Naive Bayes training functions produce a features probabilities table and a class priors table, which can be used with the prediction function to provide the probability of a class for the set of attributes.</p><p><strong>Naive Bayes Example 1 - Simple All-numeric Attributes</strong></p><p>In the first example, the <code>class</code> variable is either 1 or 2 and there are three integer attributes.</p><ol><li><p>The following commands create the input table and load sample data.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP TABLE IF EXISTS class_example CASCADE;</span></span>
<span class="line"><span>CREATE TABLE class_example (</span></span>
<span class="line"><span>   id int, class int, attributes int[]);</span></span>
<span class="line"><span>INSERT INTO class_example VALUES</span></span>
<span class="line"><span>   (1, 1, &#39;{1, 2, 3}&#39;),</span></span>
<span class="line"><span>   (2, 1, &#39;{1, 4, 3}&#39;),</span></span>
<span class="line"><span>   (3, 2, &#39;{0, 2, 2}&#39;),</span></span>
<span class="line"><span>   (4, 1, &#39;{1, 2, 1}&#39;),</span></span>
<span class="line"><span>   (5, 2, &#39;{1, 2, 2}&#39;),</span></span>
<span class="line"><span>   (6, 2, &#39;{0, 1, 3}&#39;);</span></span></code></pre></div><p>Actual data in production scenarios is more extensive than this example data and yields better results. Accuracy of classification improves significantly with larger training data sets.</p></li><li><p>Train the model with the <code>create_nb_prepared_data_tables()</code> function.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM madlib.create_nb_prepared_data_tables (</span></span>
<span class="line"><span>   &#39;class_example&#39;,         -- name of the training table</span></span>
<span class="line"><span>   &#39;class&#39;,                 -- name of the class (dependent) column</span></span>
<span class="line"><span>   &#39;attributes&#39;,            -- name of the attributes column</span></span>
<span class="line"><span>   3,                       -- the number of attributes</span></span>
<span class="line"><span>   &#39;example_feature_probs&#39;, -- name for the feature probabilities output table</span></span>
<span class="line"><span>   &#39;example_priors&#39;         -- name for the class priors output table</span></span>
<span class="line"><span>    );</span></span></code></pre></div></li><li><p>Create a table with data to classify using the model.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP TABLE IF EXISTS class_example_topredict;</span></span>
<span class="line"><span>CREATE TABLE class_example_topredict (</span></span>
<span class="line"><span>   id int, attributes int[]);</span></span>
<span class="line"><span>INSERT INTO class_example_topredict VALUES</span></span>
<span class="line"><span>   (1, &#39;{1, 3, 2}&#39;),</span></span>
<span class="line"><span>   (2, &#39;{4, 2, 2}&#39;),</span></span>
<span class="line"><span>   (3, &#39;{2, 1, 1}&#39;);</span></span></code></pre></div></li><li><p>Create a classification view using the feature probabilities, class priors, and <code>class_example_topredict</code> tables.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT madlib.create_nb_probs_view (</span></span>
<span class="line"><span>   &#39;example_feature_probs&#39;,    -- feature probabilities output table</span></span>
<span class="line"><span>   &#39;example_priors&#39;,           -- class priors output table</span></span>
<span class="line"><span>   &#39;class_example_topredict&#39;,  -- table with data to classify</span></span>
<span class="line"><span>   &#39;id&#39;,                       -- name of the key column</span></span>
<span class="line"><span>   &#39;attributes&#39;,               -- name of the attributes column</span></span>
<span class="line"><span>    3,                         -- number of attributes</span></span>
<span class="line"><span>    &#39;example_classified&#39;       -- name of the view to create</span></span>
<span class="line"><span>    );</span></span></code></pre></div></li><li><p>Display the classification results.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM example_classified;</span></span>
<span class="line"><span> key | class | nb_prob</span></span>
<span class="line"><span>-----+-------+---------</span></span>
<span class="line"><span>   1 |     1 |     0.4</span></span>
<span class="line"><span>   1 |     2 |     0.6</span></span>
<span class="line"><span>   3 |     1 |     0.5</span></span>
<span class="line"><span>   3 |     2 |     0.5</span></span>
<span class="line"><span>   2 |     1 |    0.25</span></span>
<span class="line"><span>   2 |     2 |    0.75</span></span>
<span class="line"><span>(6 rows)</span></span></code></pre></div></li></ol><p><strong>Naive Bayes Example 2 – Weather and Outdoor Sports</strong></p><p>This example calculates the probability that the user will play an outdoor sport, such as golf or tennis, based on weather conditions.</p><p>The table <code>weather_example</code> contains the example values.</p><p>The identification column for the table is <code>day</code>, an integer type.</p><p>The <code>play</code> column holds the dependent variable and has two classifications:</p><ul><li>0 - No</li><li>1 - Yes</li></ul><p>There are four attributes: outlook, temperature, humidity, and wind. These are categorical variables. The MADlib <code>create_nb_classify_view()</code> function expects the attributes to be provided as an array of <code>INTEGER</code>, <code>NUMERIC</code>, or <code>FLOAT8</code> values, so the attributes for this example are encoded with integers as follows:</p><ul><li><em>outlook</em> may be sunny (1), overcast (2), or rain (3).</li><li><em>temperature</em> may be hot (1), mild (2), or cool (3).</li><li><em>humidity</em> may be high (1) or normal (2).</li><li><em>wind</em> may be strong (1) or weak (2).</li></ul><p>The following table shows the training data, before encoding the variables.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>  day | play | outlook  | temperature | humidity | wind</span></span>
<span class="line"><span>-----+------+----------+-------------+----------+--------</span></span>
<span class="line"><span> 2   | No   | Sunny    | Hot         | High     | Strong</span></span>
<span class="line"><span> 4   | Yes  | Rain     | Mild        | High     | Weak</span></span>
<span class="line"><span> 6   | No   | Rain     | Cool        | Normal   | Strong</span></span>
<span class="line"><span> 8   | No   | Sunny    | Mild        | High     | Weak</span></span>
<span class="line"><span>10   | Yes  | Rain     | Mild        | Normal   | Weak</span></span>
<span class="line"><span>12   | Yes  | Overcast | Mild        | High     | Strong</span></span>
<span class="line"><span>14   | No   | Rain     | Mild        | High     | Strong</span></span>
<span class="line"><span> 1   | No   | Sunny    | Hot         | High     | Weak</span></span>
<span class="line"><span> 3   | Yes  | Overcast | Hot         | High     | Weak</span></span>
<span class="line"><span> 5   | Yes  | Rain     | Cool        | Normal   | Weak</span></span>
<span class="line"><span> 7   | Yes  | Overcast | Cool        | Normal   | Strong</span></span>
<span class="line"><span> 9   | Yes  | Sunny    | Cool        | Normal   | Weak</span></span>
<span class="line"><span>11   | Yes  | Sunny    | Mild        | Normal   | Strong</span></span>
<span class="line"><span>13   | Yes  | Overcast | Hot         | Normal   | Weak</span></span>
<span class="line"><span>(14 rows)</span></span></code></pre></div><ol><li><p>Create the training table.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP TABLE IF EXISTS weather_example;</span></span>
<span class="line"><span>CREATE TABLE weather_example (</span></span>
<span class="line"><span>   day int,</span></span>
<span class="line"><span>   play int,</span></span>
<span class="line"><span>   attrs int[]</span></span>
<span class="line"><span>);</span></span>
<span class="line"><span>INSERT INTO weather_example VALUES</span></span>
<span class="line"><span>   ( 2, 0, &#39;{1,1,1,1}&#39;), -- sunny, hot, high, strong</span></span>
<span class="line"><span>   ( 4, 1, &#39;{3,2,1,2}&#39;), -- rain, mild, high, weak</span></span>
<span class="line"><span>   ( 6, 0, &#39;{3,3,2,1}&#39;), -- rain, cool, normal, strong</span></span>
<span class="line"><span>   ( 8, 0, &#39;{1,2,1,2}&#39;), -- sunny, mild, high, weak</span></span>
<span class="line"><span>   (10, 1, &#39;{3,2,2,2}&#39;), -- rain, mild, normal, weak</span></span>
<span class="line"><span>   (12, 1, &#39;{2,2,1,1}&#39;), -- etc.</span></span>
<span class="line"><span>   (14, 0, &#39;{3,2,1,1}&#39;),</span></span>
<span class="line"><span>   ( 1, 0, &#39;{1,1,1,2}&#39;),</span></span>
<span class="line"><span>   ( 3, 1, &#39;{2,1,1,2}&#39;),</span></span>
<span class="line"><span>   ( 5, 1, &#39;{3,3,2,2}&#39;),</span></span>
<span class="line"><span>   ( 7, 1, &#39;{2,3,2,1}&#39;),</span></span>
<span class="line"><span>   ( 9, 1, &#39;{1,3,2,2}&#39;),</span></span>
<span class="line"><span>   (11, 1, &#39;{1,2,2,1}&#39;),</span></span>
<span class="line"><span>   (13, 1, &#39;{2,1,2,2}&#39;);</span></span></code></pre></div></li><li><p>Create the model from the training table.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT madlib.create_nb_prepared_data_tables (</span></span>
<span class="line"><span>   &#39;weather_example&#39;,  -- training source table</span></span>
<span class="line"><span>   &#39;play&#39;,             -- dependent class column</span></span>
<span class="line"><span>   &#39;attrs&#39;,            -- attributes column</span></span>
<span class="line"><span>   4,                  -- number of attributes</span></span>
<span class="line"><span>   &#39;weather_probs&#39;,    -- feature probabilities output table</span></span>
<span class="line"><span>   &#39;weather_priors&#39;    -- class priors</span></span>
<span class="line"><span>   );</span></span></code></pre></div></li><li><p>View the feature probabilities:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM weather_probs;</span></span>
<span class="line"><span> class | attr | value | cnt | attr_cnt</span></span>
<span class="line"><span>-------+------+-------+-----+----------</span></span>
<span class="line"><span>     1 |    3 |     2 |   6 |        2</span></span>
<span class="line"><span>     1 |    1 |     2 |   4 |        3</span></span>
<span class="line"><span>     0 |    1 |     1 |   3 |        3</span></span>
<span class="line"><span>     0 |    1 |     3 |   2 |        3</span></span>
<span class="line"><span>     0 |    3 |     1 |   4 |        2</span></span>
<span class="line"><span>     1 |    4 |     1 |   3 |        2</span></span>
<span class="line"><span>     1 |    2 |     3 |   3 |        3</span></span>
<span class="line"><span>     1 |    2 |     1 |   2 |        3</span></span>
<span class="line"><span>     0 |    2 |     2 |   2 |        3</span></span>
<span class="line"><span>     0 |    4 |     2 |   2 |        2</span></span>
<span class="line"><span>     0 |    3 |     2 |   1 |        2</span></span>
<span class="line"><span>     0 |    1 |     2 |   0 |        3</span></span>
<span class="line"><span>     1 |    1 |     1 |   2 |        3</span></span>
<span class="line"><span>     1 |    1 |     3 |   3 |        3</span></span>
<span class="line"><span>     1 |    3 |     1 |   3 |        2</span></span>
<span class="line"><span>     0 |    4 |     1 |   3 |        2</span></span>
<span class="line"><span>     0 |    2 |     3 |   1 |        3</span></span>
<span class="line"><span>     0 |    2 |     1 |   2 |        3</span></span>
<span class="line"><span>     1 |    2 |     2 |   4 |        3</span></span>
<span class="line"><span>     1 |    4 |     2 |   6 |        2</span></span>
<span class="line"><span>(20 rows)</span></span></code></pre></div></li><li><p>To classify a group of records with a model, first load the data into a table. In this example, the table <code>t1</code> has four rows to classify.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>DROP TABLE IF EXISTS t1;</span></span>
<span class="line"><span>CREATE TABLE t1 (</span></span>
<span class="line"><span>   id integer,</span></span>
<span class="line"><span>   attributes integer[]);</span></span>
<span class="line"><span>insert into t1 values</span></span>
<span class="line"><span>   (1, &#39;{1, 2, 1, 1}&#39;),</span></span>
<span class="line"><span>   (2, &#39;{3, 3, 2, 1}&#39;),</span></span>
<span class="line"><span>   (3, &#39;{2, 1, 2, 2}&#39;),</span></span>
<span class="line"><span>   (4, &#39;{3, 1, 1, 2}&#39;);</span></span></code></pre></div></li><li><p>Use the MADlib <code>create_nb_classify_view()</code> function to classify the rows in the table.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT madlib.create_nb_classify_view (</span></span>
<span class="line"><span>   &#39;weather_probs&#39;,      -- feature probabilities table</span></span>
<span class="line"><span>   &#39;weather_priors&#39;,     -- classPriorsName</span></span>
<span class="line"><span>   &#39;t1&#39;,                 -- table containing values to classify</span></span>
<span class="line"><span>   &#39;id&#39;,                 -- key column</span></span>
<span class="line"><span>   &#39;attributes&#39;,         -- attributes column</span></span>
<span class="line"><span>   4,                    -- number of attributes</span></span>
<span class="line"><span>   &#39;t1_out&#39;              -- output table name</span></span>
<span class="line"><span>);</span></span></code></pre></div><p>The result is four rows, one for each record in the <code>t1</code> table.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM t1_out ORDER BY key;</span></span>
<span class="line"><span> key | nb_classification</span></span>
<span class="line"><span>-----+-------------------</span></span>
<span class="line"><span> 1 | {0}</span></span>
<span class="line"><span> 2 | {1}</span></span>
<span class="line"><span> 3 | {1}</span></span>
<span class="line"><span> 4 | {0}</span></span>
<span class="line"><span> (4 rows)</span></span></code></pre></div></li></ol><h2 id="references" tabindex="-1"><a id="topic10"></a>References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;&lt;a id=&quot;topic10&quot;&gt;&lt;/a&gt;References&quot;">​</a></h2><p>MADlib web site is at <a href="http://madlib.apache.org/" target="_blank" rel="noreferrer">http://madlib.apache.org/</a>.</p><p>MADlib documentation is at <a href="http://madlib.apache.org/documentation.html" target="_blank" rel="noreferrer">http://madlib.apache.org/documentation.html</a>.</p><p>PivotalR is a first class R package that enables users to interact with data resident in WarehousePG and MADLib using an R client.</p>`,108)]))}const b=s(p,[["render",l]]);export{g as __pageData,b as default};
