import{_ as e,c as s,o as n,ag as t}from"./chunks/framework.Ds6Eueu6.js";const p="/assets/graph_example.Cj0fw8J_.png",i="/assets/vertex_edge_table.DUY3kcbl.png",_=JSON.parse('{"title":"Graph Analytics","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/analytics/graph.md","filePath":"docs/7x/analytics/graph.md"}'),r={name:"docs/7x/analytics/graph.md"};function l(o,a,h,c,d,g){return n(),s("div",null,a[0]||(a[0]=[t('<h1 id="graph-analytics" tabindex="-1">Graph Analytics <a class="header-anchor" href="#graph-analytics" aria-label="Permalink to &quot;Graph Analytics&quot;">​</a></h1><hr><p>Many modern business problems involve connections and relationships between entities, and are not solely based on discrete data. Graphs are powerful at representing complex interconnections, and graph data modeling is very effective and flexible when the number and depth of relationships increase exponentially.</p><p>The use cases for graph analytics are diverse: social networks, transportation routes, autonomous vehicles, cyber security, criminal networks, fraud detection, health research, epidemiology, and so forth.</p><p>This chapter contains the following information:</p><ul><li><a href="#topic_graph">What is a Graph?</a></li><li><a href="#graph_on_greenplum">Graph Analytics on WarehousePG</a></li><li><a href="#topic_using_graph">Using Graph</a></li><li><a href="#topic_graph_modules">Graph Modules</a></li><li><a href="#topic_graph_references">References</a></li></ul><h2 id="what-is-a-graph" tabindex="-1"><a id="topic_graph"></a>What is a Graph? <a class="header-anchor" href="#what-is-a-graph" aria-label="Permalink to &quot;&lt;a id=&quot;topic_graph&quot;&gt;&lt;/a&gt;What is a Graph?&quot;">​</a></h2><p>Graphs represent the interconnections between objects (vertices) and their relationships (edges). Example objects could be people, locations, cities, computers, or components on a circuit board. Example connections could be roads, circuits, cables, or interpersonal relationships. Edges can have directions and weights, for example the distance between towns.</p><p><img src="'+p+`" alt="Graph connection example"></p><p>Graphs can be small and easily traversed - as with a small group of friends - or extremely large and complex, similar to contacts in a modern-day social network.</p><h2 id="graph-analytics-on-warehousepg" tabindex="-1"><a id="graph_on_greenplum"></a>Graph Analytics on WarehousePG <a class="header-anchor" href="#graph-analytics-on-warehousepg" aria-label="Permalink to &quot;&lt;a id=&quot;graph_on_greenplum&quot;&gt;&lt;/a&gt;Graph Analytics on WarehousePG&quot;">​</a></h2><p>Efficient processing of very large graphs can be challenging. WarehousePG offers a suitable environment for this work for these key reasons:</p><ol><li><p>Using MADlib graph functions in WarehousePG brings the graph computation close to where the data lives. Otherwise, large data sets need to be moved to a specialized graph database, requiring additional time and resources.</p></li><li><p>Specialized graph databases frequently use purpose-built languages. With WarehousePG, you can invoke graph functions using the familiar SQL interface. For example, for the <a href="http://madlib.apache.org/docs/latest/group__grp__pagerank.html" target="_blank" rel="noreferrer">PageRank</a> graph algorithm:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT madlib.pagerank(&#39;vertex&#39;,     -- Vertex table</span></span>
<span class="line"><span>               &#39;id&#39;,                 -- Vertex id column</span></span>
<span class="line"><span>               &#39;edge&#39;,               -- Edge table</span></span>
<span class="line"><span>               &#39;src=src, dest=dest&#39;, -- Comma delimited string of edge arguments</span></span>
<span class="line"><span>               &#39;pagerank_out&#39;,       -- Output table of PageRank</span></span>
<span class="line"><span>                0.5);                -- Damping factor</span></span>
<span class="line"><span>SELECT * FROM pagerank_out ORDER BY pagerank DESC;</span></span></code></pre></div></li><li><p>A lot of data science problems are solved using a combination of models, with graphs being just one. Regression, clustering, and other methods available in WarehousePG, make for a powerful combination.</p></li><li><p>WarehousePG offers great benefits of scale, taking advantage of years of query execution and optimization research focused on large data sets.</p></li></ol><h2 id="using-graph" tabindex="-1"><a id="topic_using_graph"></a>Using Graph <a class="header-anchor" href="#using-graph" aria-label="Permalink to &quot;&lt;a id=&quot;topic_using_graph&quot;&gt;&lt;/a&gt;Using Graph&quot;">​</a></h2><p><strong>Installing Graph Modules</strong></p><p>To use the MADlib graph modules, install the version of MADlib corresponding to your WarehousePG version.</p><p>Graph modules on MADlib support many algorithms.</p><p><strong>Creating a Graph in WarehousePG</strong></p><p>To represent a graph in WarehousePG, create tables that represent the vertices, edges, and their properties.</p><p><img src="`+i+`" alt="Vertex edge table"></p><p>Using SQL, create the relevant tables in the database you want to use. This example uses <code>testdb</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpadmin@cdw ~]$ psql</span></span>
<span class="line"><span>dev=# \\c testdb</span></span></code></pre></div><p>Create a table for vertices, called <code>vertex</code>, and a table for edges and their weights, called <code>edge</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=# DROP TABLE IF EXISTS vertex, edge; </span></span>
<span class="line"><span>testdb=# CREATE TABLE vertex(id INTEGER); </span></span>
<span class="line"><span>testdb=# CREATE TABLE edge(         </span></span>
<span class="line"><span>         src INTEGER,        </span></span>
<span class="line"><span>         dest INTEGER,           </span></span>
<span class="line"><span>         weight FLOAT8        </span></span>
<span class="line"><span>         );</span></span></code></pre></div><p>Insert values related to your specific use case. For example :</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb#=&gt; INSERT INTO vertex VALUES</span></span>
<span class="line"><span>(0),</span></span>
<span class="line"><span>(1),</span></span>
<span class="line"><span>(2),</span></span>
<span class="line"><span>(3),</span></span>
<span class="line"><span>(4),</span></span>
<span class="line"><span>(5),</span></span>
<span class="line"><span>(6),</span></span>
<span class="line"><span>(7); </span></span>
<span class="line"><span></span></span>
<span class="line"><span>testdb#=&gt; INSERT INTO edge VALUES</span></span>
<span class="line"><span>(0, 1, 1.0),</span></span>
<span class="line"><span>(0, 2, 1.0),</span></span>
<span class="line"><span>(0, 4, 10.0),</span></span>
<span class="line"><span>(1, 2, 2.0),</span></span>
<span class="line"><span>(1, 3, 10.0),</span></span>
<span class="line"><span>(2, 3, 1.0),</span></span>
<span class="line"><span>(2, 5, 1.0),</span></span>
<span class="line"><span>(2, 6, 3.0),</span></span>
<span class="line"><span>(3, 0, 1.0),</span></span>
<span class="line"><span>(4, 0, -2.0),</span></span>
<span class="line"><span>(5, 6, 1.0),</span></span>
<span class="line"><span>(6, 7, 1.0);</span></span></code></pre></div><p>Now select the <a href="#topic_graph_modules">Graph Module</a> that suits your analysis.</p><h2 id="graph-modules" tabindex="-1"><a id="topic_graph_modules"></a>Graph Modules <a class="header-anchor" href="#graph-modules" aria-label="Permalink to &quot;&lt;a id=&quot;topic_graph_modules&quot;&gt;&lt;/a&gt;Graph Modules&quot;">​</a></h2><p>This section lists the graph functions supported in MADlib. They include: <a href="#section_m2x_rkr_xlb">All Pairs Shortest Path (APSP)</a>, <a href="#section_ykg_53s_xlb">Breadth-First Search</a>, <a href="#section_evh_t3s_xlb">Hyperlink-Induced Topic Search (HITS)</a>, <a href="#section_e3f_s3s_xlb">PageRank and Personalized PageRank</a>, <a href="#section_rxc_r3s_xlb">Single Source Shortest Path (SSSP)</a>, <a href="#section_zmd_q3s_xlb">Weakly Connected Components</a>, and <a href="#section_wcn_w3s_xlb">Measures</a>. Explore each algorithm using the example <code>edge</code> and <code>vertex</code> tables already created.</p><h3 id="all-pairs-shortest-path-apsp" tabindex="-1"><a id="section_m2x_rkr_xlb"></a>All Pairs Shortest Path (APSP) <a class="header-anchor" href="#all-pairs-shortest-path-apsp" aria-label="Permalink to &quot;&lt;a id=&quot;section_m2x_rkr_xlb&quot;&gt;&lt;/a&gt;All Pairs Shortest Path \\(APSP\\)&quot;">​</a></h3><p>The all pairs shortest paths (APSP) algorithm finds the length (summed weights) of the shortest paths between all pairs of vertices, such that the sum of the weights of the path edges is minimized.</p><p>The function is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>graph_apsp( vertex_table,</span></span>
<span class="line"><span>vertex_id,</span></span>
<span class="line"><span>edge_table,            </span></span>
<span class="line"><span>edge_args,            </span></span>
<span class="line"><span>out_table,            </span></span>
<span class="line"><span>grouping_cols          </span></span>
<span class="line"><span>)</span></span></code></pre></div><p>For details on the parameters, with examples, see the <a href="http://madlib.apache.org/docs/latest/group__grp__apsp.html" target="_blank" rel="noreferrer">All Pairs Shortest Path</a> in the Apache MADlib documentation.</p><h3 id="breadth-first-search" tabindex="-1"><a id="section_ykg_53s_xlb"></a>Breadth-First Search <a class="header-anchor" href="#breadth-first-search" aria-label="Permalink to &quot;&lt;a id=&quot;section_ykg_53s_xlb&quot;&gt;&lt;/a&gt;Breadth-First Search&quot;">​</a></h3><p>Given a graph and a source vertex, the breadth-first search (BFS) algorithm finds all nodes reachable from the source vertex by searching / traversing the graph in a breadth-first manner.</p><p>The function is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>graph_bfs( vertex_table,</span></span>
<span class="line"><span>          vertex_id,           </span></span>
<span class="line"><span>          edge_table,           </span></span>
<span class="line"><span>          edge_args,           </span></span>
<span class="line"><span>          source_vertex,           </span></span>
<span class="line"><span>          out_table,           </span></span>
<span class="line"><span>          max_distance,           </span></span>
<span class="line"><span>          directed,</span></span>
<span class="line"><span>          grouping_cols</span></span>
<span class="line"><span>          )</span></span></code></pre></div><p>For details on the parameters, with examples, see the <a href="http://madlib.apache.org/docs/latest/group__grp__bfs.html" target="_blank" rel="noreferrer">Breadth-First Search</a> in the Apache MADlib documentation.</p><h3 id="hyperlink-induced-topic-search-hits" tabindex="-1"><a id="section_evh_t3s_xlb"></a>Hyperlink-Induced Topic Search (HITS) <a class="header-anchor" href="#hyperlink-induced-topic-search-hits" aria-label="Permalink to &quot;&lt;a id=&quot;section_evh_t3s_xlb&quot;&gt;&lt;/a&gt;Hyperlink-Induced Topic Search \\(HITS\\)&quot;">​</a></h3><p>The all pairs shortest paths (APSP) algorithm finds the length (summed weights) of the shortest paths between all pairs of vertices, such that the sum of the weights of the path edges is minimized.</p><p>The function is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>graph_apsp( vertex_table,</span></span>
<span class="line"><span>           vertex_id,</span></span>
<span class="line"><span>           edge_table,            </span></span>
<span class="line"><span>           edge_args,            </span></span>
<span class="line"><span>           out_table,            </span></span>
<span class="line"><span>           grouping_cols          </span></span>
<span class="line"><span>           )</span></span></code></pre></div><p>For details on the parameters, with examples, see the <a href="http://madlib.apache.org/docs/latest/group__grp__hits.html" target="_blank" rel="noreferrer">Hyperlink-Induced Topic Search</a> in the Apache MADlib documentation.</p><h3 id="pagerank-and-personalized-pagerank" tabindex="-1"><a id="section_e3f_s3s_xlb"></a>PageRank and Personalized PageRank <a class="header-anchor" href="#pagerank-and-personalized-pagerank" aria-label="Permalink to &quot;&lt;a id=&quot;section_e3f_s3s_xlb&quot;&gt;&lt;/a&gt;PageRank and Personalized PageRank&quot;">​</a></h3><p>Given a graph, the PageRank algorithm outputs a probability distribution representing a person’s likelihood to arrive at any particular vertex while randomly traversing the graph.</p><p>MADlib graph also includes a personalized PageRank, where a notion of importance provides personalization to a query. For example, importance scores can be biased according to a specified set of graph vertices that are of interest or special in some way.</p><p>The function is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>pagerank( vertex_table,</span></span>
<span class="line"><span>          vertex_id,          </span></span>
<span class="line"><span>          edge_table,          </span></span>
<span class="line"><span>          edge_args,          </span></span>
<span class="line"><span>          out_table,          </span></span>
<span class="line"><span>          damping_factor,          </span></span>
<span class="line"><span>          max_iter,          </span></span>
<span class="line"><span>          threshold,          </span></span>
<span class="line"><span>          grouping_cols,          </span></span>
<span class="line"><span>          personalization_vertices         </span></span>
<span class="line"><span>          )</span></span></code></pre></div><p>For details on the parameters, with examples, see the <a href="http://madlib.apache.org/docs/latest/group__grp__pagerank.html" target="_blank" rel="noreferrer">PageRank</a> in the Apache MADlib documentation.</p><h3 id="single-source-shortest-path-sssp" tabindex="-1"><a id="section_rxc_r3s_xlb"></a>Single Source Shortest Path (SSSP) <a class="header-anchor" href="#single-source-shortest-path-sssp" aria-label="Permalink to &quot;&lt;a id=&quot;section_rxc_r3s_xlb&quot;&gt;&lt;/a&gt;Single Source Shortest Path \\(SSSP\\)&quot;">​</a></h3><p>Given a graph and a source vertex, the single source shortest path (SSSP) algorithm finds a path from the source vertex to every other vertex in the graph, such that the sum of the weights of the path edges is minimized.</p><p>The function is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>graph_sssp ( vertex_table, </span></span>
<span class="line"><span>vertex_id, </span></span>
<span class="line"><span>edge_table, </span></span>
<span class="line"><span>edge_args, </span></span>
<span class="line"><span>source_vertex, </span></span>
<span class="line"><span>out_table, </span></span>
<span class="line"><span>grouping_cols </span></span>
<span class="line"><span>)</span></span></code></pre></div><p>For details on the parameters, with examples, see the <a href="http://madlib.apache.org/docs/latest/group__grp__sssp.html" target="_blank" rel="noreferrer">Single Source Shortest Path</a> in the Apache MADlib documentation.</p><h3 id="weakly-connected-components" tabindex="-1"><a id="section_zmd_q3s_xlb"></a>Weakly Connected Components <a class="header-anchor" href="#weakly-connected-components" aria-label="Permalink to &quot;&lt;a id=&quot;section_zmd_q3s_xlb&quot;&gt;&lt;/a&gt;Weakly Connected Components&quot;">​</a></h3><p>Given a directed graph, a weakly connected component (WCC) is a subgraph of the original graph where all vertices are connected to each other by some path, ignoring the direction of edges.</p><p>The function is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>weakly_connected_components( </span></span>
<span class="line"><span>vertex_table, </span></span>
<span class="line"><span>vertex_id, </span></span>
<span class="line"><span>edge_table, </span></span>
<span class="line"><span>edge_args, </span></span>
<span class="line"><span>out_table, </span></span>
<span class="line"><span>grouping_cols </span></span>
<span class="line"><span>)</span></span></code></pre></div><p>For details on the parameters, with examples, see the <a href="http://madlib.apache.org/docs/latest/group__grp__wcc.html" target="_blank" rel="noreferrer">Weakly Connected Components</a> in the Apache MADlib documentation.</p><h3 id="measures" tabindex="-1"><a id="section_wcn_w3s_xlb"></a><em>Measures</em> <a class="header-anchor" href="#measures" aria-label="Permalink to &quot;&lt;a id=&quot;section_wcn_w3s_xlb&quot;&gt;&lt;/a&gt;*Measures*&quot;">​</a></h3><p>These algorithms relate to metrics computed on a graph and include: <a href="#section_k4q_x3s_xlb">Average Path Length</a>, <a href="#section_a2q_y3s_xlb">Closeness Centrality</a> , <a href="#section_pft_k4s_xlb">Graph Diameter</a>, and <a href="#section_srk_j4s_xlb">In-Out Degree</a>.</p><h3 id="average-path-length" tabindex="-1"><a id="section_k4q_x3s_xlb"></a>Average Path Length <a class="header-anchor" href="#average-path-length" aria-label="Permalink to &quot;&lt;a id=&quot;section_k4q_x3s_xlb&quot;&gt;&lt;/a&gt;Average Path Length&quot;">​</a></h3><p>This function computes the shortest path average between pairs of vertices. Average path length is based on &quot;reachable target vertices&quot;, so it averages the path lengths in each connected component and ignores infinite-length paths between unconnected vertices. If the user requires the average path length of a particular component, the weakly connected components function may be used to isolate the relevant vertices.</p><p>The function is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>graph_avg_path_length( apsp_table,</span></span>
<span class="line"><span>                       output_table </span></span>
<span class="line"><span>                       )</span></span></code></pre></div><p>This function uses a previously run APSP (All Pairs Shortest Path) output. For details on the parameters, with examples, see the <a href="http://madlib.apache.org/docs/latest/group__grp__graph__avg__path__length.html" target="_blank" rel="noreferrer">Average Path Length</a> in the Apache MADlib documentation.</p><h3 id="closeness-centrality" tabindex="-1"><a id="section_a2q_y3s_xlb"></a>Closeness Centrality <a class="header-anchor" href="#closeness-centrality" aria-label="Permalink to &quot;&lt;a id=&quot;section_a2q_y3s_xlb&quot;&gt;&lt;/a&gt;Closeness Centrality&quot;">​</a></h3><p>The closeness centrality algorithm helps quantify how much information passes through a given vertex. The function returns various closeness centrality measures and the k-degree for a given subset of vertices.</p><p>The function is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>graph_closeness( apsp_table,</span></span>
<span class="line"><span>output_table, </span></span>
<span class="line"><span>vertex_filter_expr </span></span>
<span class="line"><span>)</span></span></code></pre></div><p>This function uses a previously run APSP (All Pairs Shortest Path) output. For details on the parameters, with examples, see the <a href="http://madlib.apache.org/docs/latest/group__grp__graph__closeness.html" target="_blank" rel="noreferrer">Closeness</a> in the Apache MADlib documentation.</p><h3 id="graph-diameter" tabindex="-1"><a id="section_pft_k4s_xlb"></a>Graph Diameter <a class="header-anchor" href="#graph-diameter" aria-label="Permalink to &quot;&lt;a id=&quot;section_pft_k4s_xlb&quot;&gt;&lt;/a&gt;Graph Diameter&quot;">​</a></h3><p>Graph diameter is defined as the longest of all shortest paths in a graph. The function is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>graph_diameter( apsp_table, </span></span>
<span class="line"><span>output_table </span></span>
<span class="line"><span>)</span></span></code></pre></div><p>This function uses a previously run APSP (All Pairs Shortest Path) output. For details on the parameters, with examples, see the <a href="http://madlib.apache.org/docs/latest/group__grp__graph__diameter.html" target="_blank" rel="noreferrer">Graph Diameter</a> in the Apache MADlib documentation.</p><h3 id="in-out-degree" tabindex="-1"><a id="section_srk_j4s_xlb"></a>In-Out Degree <a class="header-anchor" href="#in-out-degree" aria-label="Permalink to &quot;&lt;a id=&quot;section_srk_j4s_xlb&quot;&gt;&lt;/a&gt;In-Out Degree&quot;">​</a></h3><p>This function computes the degree of each node. The node degree is the number of edges adjacent to that node. The node in-degree is the number of edges pointing in to the node and node out-degree is the number of edges pointing out of the node.</p><p>The function is:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>graph_vertex_degrees( vertex_table,</span></span>
<span class="line"><span>vertex_id,    </span></span>
<span class="line"><span>edge_table,</span></span>
<span class="line"><span>edge_args,    </span></span>
<span class="line"><span>out_table,</span></span>
<span class="line"><span>grouping_cols</span></span>
<span class="line"><span>)</span></span></code></pre></div><p>For details on the parameters, with examples, see the <a href="http://madlib.apache.org/docs/latest/group__grp__graph__vertex__degrees.html" target="_blank" rel="noreferrer">In-out Degree</a> page in the Apache MADlib documentation.</p><h2 id="references" tabindex="-1"><a id="topic_graph_references"></a>References <a class="header-anchor" href="#references" aria-label="Permalink to &quot;&lt;a id=&quot;topic_graph_references&quot;&gt;&lt;/a&gt;References&quot;">​</a></h2><p>MADlib on WarehousePG is at <a href="./madlib.html">Machine Learning and Deep Learning using MADlib</a>.</p><p>MADlib Apache web site and MADlib release notes are at <a href="http://madlib.apache.org/" target="_blank" rel="noreferrer">http://madlib.apache.org/</a>.</p><p>MADlib user documentation is at <a href="http://madlib.apache.org/documentation.html" target="_blank" rel="noreferrer">http://madlib.apache.org/documentation.html</a>.</p>`,85)]))}const b=e(r,[["render",l]]);export{_ as __pageData,b as default};
