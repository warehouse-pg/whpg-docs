import{_ as t,c as s,o,ag as a}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"tsm_system_rows","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/modules/tsm_system_rows.md","filePath":"docs/7x/ref_guide/modules/tsm_system_rows.md"}'),l={name:"docs/7x/ref_guide/modules/tsm_system_rows.md"};function i(n,e,d,r,m,c){return o(),s("div",null,e[0]||(e[0]=[a('<h1 id="tsm-system-rows" tabindex="-1">tsm_system_rows <a class="header-anchor" href="#tsm-system-rows" aria-label="Permalink to &quot;tsm_system_rows&quot;">​</a></h1><p>The <code>tsm_system_rows</code> module implements the <code>SYSTEM_ROWS</code> table sampling method. This method is used in the <code>TABLESAMPLE</code> clause of a <code>SELECT</code> command.</p><p>The <code>tsm_system_rows</code> module is a WarehousePG extension.</p><h2 id="installing-and-registering-the-module" tabindex="-1"><a id="topic_reg"></a>Installing and Registering the Module <a class="header-anchor" href="#installing-and-registering-the-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_reg&quot;&gt;&lt;/a&gt;Installing and Registering the Module&quot;">​</a></h2><p>The <code>tsm_system_rows</code> module is installed when you install WarehousePG. Before you can use any of the functions defined in the module, you must register the <code>tsm_system_rows</code> extension in each database where you want to use the functions. Refer to <a href="./../../install_guide/install_extensions.html">Installing Extensions</a> for more information.</p><h2 id="using-the-tsm-system-rows-module" tabindex="-1"><a id="topic_doc"></a>Using the tsm_system_rows Module <a class="header-anchor" href="#using-the-tsm-system-rows-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_doc&quot;&gt;&lt;/a&gt;Using the tsm_system_rows Module&quot;">​</a></h2><p>The <code>SYSTEM ROWS</code> table sampling method accepts a single integer argument that is the maximum number of rows to read. The resulting sample will always contain exactly that many rows, unless the table does not contain enough rows, in which case the whole table is selected.</p><p>Like the built-in <code>SYSTEM</code> sampling method, <code>SYSTEM_ROWS</code> performs block-level sampling, so that the sample is not completely random but may be subject to clustering effects, especially if only a small number of rows are requested.</p><h2 id="example" tabindex="-1"><a id="topic_examples"></a>Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;&lt;a id=&quot;topic_examples&quot;&gt;&lt;/a&gt;Example&quot;">​</a></h2><p>The following command returns a sample of 75 rows from the table <code>tableA</code>, unless the table does not have 75 visible rows; in this case, the command returns all table rows:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>SELECT * FROM tableA TABLESAMPLE SYSTEM_ROWS(75);</span></span></code></pre></div>',11)]))}const _=t(l,[["render",i]]);export{u as __pageData,_ as default};
