import{_ as a,c as t,o as s,ag as n}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"CREATE VIEW","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/sql_commands/CREATE_VIEW.md","filePath":"docs/7x/ref_guide/sql_commands/CREATE_VIEW.md"}'),i={name:"docs/7x/ref_guide/sql_commands/CREATE_VIEW.md"};function o(c,e,l,d,r,p){return s(),t("div",null,e[0]||(e[0]=[n(`<h1 id="create-view" tabindex="-1">CREATE VIEW <a class="header-anchor" href="#create-view" aria-label="Permalink to &quot;CREATE VIEW&quot;">​</a></h1><p>Defines a new view.</p><h2 id="synopsis" tabindex="-1"><a id="section2"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;section2&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE [OR REPLACE] [TEMP | TEMPORARY] [RECURSIVE] VIEW &lt;name&gt; [ ( &lt;column_name&gt; [, ...] ) ]</span></span>
<span class="line"><span>    [ WITH ( view_option_name [= view_option_value] [, ... ] ) ]</span></span>
<span class="line"><span>    AS &lt;query&gt;</span></span>
<span class="line"><span>    [ WITH [ CASCADED | LOCAL ] CHECK OPTION ]</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="section3"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;section3&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p><code>CREATE VIEW</code> defines a view of a query. The view is not physically materialized. Instead, WarehousePG runs the query every time the view is referenced in a query.</p><p><code>CREATE OR REPLACE VIEW</code> is similar, but if a view of the same name already exists, it is replaced. The new query must generate the same columns that were generated by the existing view query (that is, the same column names in the same order, and with the same data types), but it may add additional columns to the end of the list. The calculations giving rise to the output columns may be completely different.</p><p>If a schema name is given (for example, <code>CREATE VIEW myschema.myview ...</code>) then the view is created in the specified schema. Otherwise it is created in the current schema. Temporary views exist in a special schema, so you may not provide a schema name when creating a temporary view. The name of the view must be distinct from the name of any other view, table, sequence, index, or foreign table in the same schema.</p><h2 id="parameters" tabindex="-1"><a id="section4"></a>Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;&lt;a id=&quot;section4&quot;&gt;&lt;/a&gt;Parameters&quot;">​</a></h2><p>TEMPORARY | TEMP : If specified, the view is created as a temporary view. Temporary views are automatically dropped at the end of the current session. Existing permanent relations with the same name are not visible to the current session while the temporary view exists, unless they are referenced with schema-qualified names. : If any of the tables referenced by the view are temporary, the view is created as a temporary view (whether <code>TEMPORARY</code> is specified or not).</p><p>RECURSIVE : Creates a recursive view. The syntax</p><pre><code>\`\`\`
CREATE RECURSIVE VIEW [ &lt;schema&gt; . ] &lt;view_name&gt; (&lt;column_names&gt;) AS SELECT &lt;...&gt;;
\`\`\`

is equivalent to

\`\`\`
CREATE VIEW [ &lt;schema&gt; . ] &lt;view_name&gt; AS WITH RECURSIVE &lt;view_name&gt; (&lt;column_names&gt;) AS (SELECT &lt;...&gt;) SELECT &lt;column_names&gt; FROM &lt;view_name&gt;;
\`\`\`

A view column name list must be specified for a recursive view.
</code></pre><p>name : The name (optionally schema-qualified) of a view to be created.</p><p>column_name : An optional list of names to be used for columns of the view. If not given, the column names are deduced from the query.</p><p>WITH ( view_option_name [= view_option_value] [, ... ] ) : This clause specifies optional parameters for a view; the following parameters are supported:</p><pre><code>check\\_option \\(string\\)
:   This parameter may be either \`local\` or \`cascaded\`, and is equivalent to specifying \`WITH [ CASCADED | LOCAL ] CHECK OPTION\` \\(see below\\). This option can be changed on existing views using [ALTER VIEW](ALTER_VIEW.html).

security\\_barrier \\(boolean\\)
:   This should be used if the view is intended to provide row-level security. Refer to [Rules and Privileges](https://www.postgresql.org/docs/12/rules-privileges.html) in the PostgreSQL documentation for more information.
</code></pre><p>query : A <a href="./SELECT.html">SELECT</a> or <a href="./VALUES.html">VALUES</a> command which will provide the columns and rows of the view.</p><p>WITH [ CASCADED | LOCAL ] CHECK OPTION : This option controls the behavior of automatically updatable views. When this option is specified, <code>INSERT</code> and <code>UPDATE</code> commands on the view will be checked to ensure that new rows satisfy the view-defining condition (that is, the new rows are checked to ensure that they are visible through the view). If they are not, WarehousePG Databvase rejects the update. If the <code>CHECK OPTION</code> is not specified, <code>INSERT</code> and <code>UPDATE</code> commands on the view are allowed to create rows that are not visible through the view. The following check options are supported:</p><pre><code>LOCAL
:   New rows are only checked against the conditions defined directly in the view itself. Any conditions defined on underlying base views are not checked \\(unless they also specify the \`CHECK OPTION\`\\).

CASCADED
:   New rows are checked against the conditions of the view and all underlying base views. If the \`CHECK OPTION\` is specified, and neither \`LOCAL\` nor \`CASCADED\` is specified, then \`CASCADED\` is assumed.
</code></pre><p>: The <code>CHECK OPTION</code> may not be used with <code>RECURSIVE</code> views.</p><h2 id="notes" tabindex="-1"><a id="section5"></a>Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;&lt;a id=&quot;section5&quot;&gt;&lt;/a&gt;Notes&quot;">​</a></h2><p>Use the <a href="./DROP_VIEW.html">DROP VIEW</a> statement to drop views.</p><p>Ensure that the names and data types of the view&#39;s columns are assigned the way you want. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE VIEW vista AS SELECT &#39;Hello World&#39;;</span></span></code></pre></div><p>is bad form in two ways: the column name defaults to <code>?column?</code>, and the column data type defaults to <code>text</code>, which might not be what you wanted. If you want a string literal in a view&#39;s result, use something like:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE VIEW vista AS SELECT text &#39;Hello World&#39; AS hello;</span></span></code></pre></div><p>Access to tables referenced in the view is determined by permissions of the view owner not the current user (even if the current user is a superuser). This can be confusing in the case of superusers, since superusers typically have access to all objects. In the case of a view, even superusers must be explicitly granted access to tables referenced in the view if they are not the owner of the view. In some cases, a view can be used to provide secure but restricted access to the underlying tables. However, not all views are secure against tampering, see <a href="https://www.postgresql.org/docs/12/rules-privileges.html" target="_blank" rel="noreferrer">Rules and Privileges</a> in the PostgreSQL documentation for details.</p><p>Functions called in the view are treated the same as if they had been called directly from the query using the view. Therefore the user of a view must have permissions to call any functions used by the view.</p><p>When both <code>CREATE VIEW &lt;view&gt; ...</code> and <code>SELECT ... FROM &lt;view&gt;</code> specify an <code>ORDER BY</code> clause, WarehousePG ignores the <code>ORDER BY</code> clause in the <code>CREATE VIEW</code> statement.</p><p>When <code>CREATE OR REPLACE VIEW</code> is used on an existing view, only the view&#39;s defining <code>SELECT</code> rule is changed. Other view properties, including ownership, permissions, and non-<code>SELECT</code> rules, remain unchanged. You must own the view to replace it (this includes being a member of the owning role).</p><h2 id="updatable-views" tabindex="-1"><a id="section5u"></a>Updatable Views <a class="header-anchor" href="#updatable-views" aria-label="Permalink to &quot;&lt;a id=&quot;section5u&quot;&gt;&lt;/a&gt;Updatable Views&quot;">​</a></h2><p>Simple views are automatically updatable: WarehousePG allows you to invoke <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code> statements on the view in the same way as on a regular table. A view is automatically updatable if it satisfies all of the following conditions:</p><ul><li><p>The view must have exactly one entry in its <code>FROM</code> list, which must be a table or another updatable view.</p></li><li><p>The view definition must not contain <code>WITH</code>, <code>DISTINCT</code>, <code>GROUP BY</code>, <code>HAVING</code>, <code>LIMIT</code>, or <code>OFFSET</code> clauses at the top level.</p></li><li><p>The view definition must not contain set operations (<code>UNION</code>, <code>INTERSECT</code>, or <code>EXCEPT</code>) at the top level.</p></li><li><p>The view&#39;s select list must not contain any aggregates, window functions, or set-returning functions.</p></li></ul><p>An automatically updatable view may contain a mix of updatable and non-updatable columns. A column is updatable if it is a simple reference to an updatable column of the underlying base relation; otherwise the column is read-only, and WarehousePG raises an error if an <code>INSERT</code> or <code>UPDATE</code> statement attempts to assign a value to it.</p><p>If the view is automatically updatable the system will convert any <code>INSERT</code>, <code>UPDATE</code>, or <code>DELETE</code> statement on the view into the corresponding statement on the underlying base relation. <code>INSERT</code> statements that have an <code>ON CONFLICT UPDATE</code> clause are fully supported.</p><p>If an automatically updatable view contains a <code>WHERE</code> condition, the condition restricts which rows of the base relation are available to be modified by <code>UPDATE</code> and <code>DELETE</code> statements on the view. However, an <code>UPDATE</code> is permitted to change a row so that it no longer satisfies the <code>WHERE</code> condition, and thus is no longer visible through the view. Similarly, an <code>INSERT</code> command can potentially insert base-relation rows that do not satisfy the <code>WHERE</code> condition and thus are not visible through the view (<code>ON CONFLICT UPDATE</code> may similarly affect an existing row not visible through the view). The <code>CHECK OPTION</code> may be used to prevent <code>INSERT</code> and <code>UPDATE</code> commands from creating such rows that are not visible through the view.</p><p>If an automatically updatable view is marked with the <code>security_barrier</code> property, then all of the view&#39;s <code>WHERE</code> conditions (and any conditions using operators which are marked as <code>LEAKPROOF</code>) will always be evaluated before any conditions that a user of the view has added. Refer to <a href="https://www.postgresql.org/docs/12/rules-privileges.html" target="_blank" rel="noreferrer">Rules and Privileges</a> in the PostgreSQL documenatation for full details. Note that, due to this, rows which are not ultimately returned (because they do not pass the user&#39;s <code>WHERE</code> conditions) may still end up being locked. You can use the <code>EXPLAIN</code> command to see which conditions are applied at the relation level (and therefore do not lock rows) and which are not.</p><p>A more complex view that does not satisfy all of these conditions is read-only by default: the system will not allow an insert, update, or delete on the view. You can get the effect of an updatable view by creating rules (see <a href="./CREATE_RULE.html">CREATE RULE</a>).</p><p>Note that the user performing the insert, update or delete on the view must have the corresponding insert, update or delete privilege on the view. In addition the view&#39;s owner must have the relevant privileges on the underlying base relations, but the user performing the update does not need any permissions on the underlying base relations (again, refer to <a href="https://www.postgresql.org/docs/12/rules-privileges.html" target="_blank" rel="noreferrer">Rules and Privileges</a> in the PostgreSQL documentation).</p><h2 id="examples" tabindex="-1"><a id="section6"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;section6&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>Create a view consisting of all comedy films:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE VIEW comedies AS</span></span>
<span class="line"><span>    SELECT * FROM films </span></span>
<span class="line"><span>    WHERE kind = &#39;comedy&#39;;</span></span></code></pre></div><p>This creates a view containing the columns that are in the <code>film</code> table at the time of view creation. Though <code>*</code> was used to create the view, columns added later to the table will not be part of the view.</p><p>Create a view with <code>LOCAL CHECK OPTION</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE VIEW universal_comedies AS</span></span>
<span class="line"><span>    SELECT *</span></span>
<span class="line"><span>    FROM comedies</span></span>
<span class="line"><span>    WHERE classification = &#39;U&#39;</span></span>
<span class="line"><span>    WITH LOCAL CHECK OPTION;</span></span></code></pre></div><p>This creates a view based on the comedies <code>view</code>, showing only films with <code>kind = &#39;Comedy&#39;</code> and <code>classification = &#39;U&#39;</code>. Any attempt to <code>INSERT</code> or <code>UPDATE</code> a row in the view is rejected if the new row doesn&#39;t have <code>classification = &#39;U&#39;</code>, but the film <code>kind</code> will not be checked.</p><p>Create a view with <code>CASCADED CHECK OPTION</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE VIEW pg_comedies AS</span></span>
<span class="line"><span>    SELECT *</span></span>
<span class="line"><span>    FROM comedies</span></span>
<span class="line"><span>    WHERE classification = &#39;PG&#39;</span></span>
<span class="line"><span>    WITH CASCADED CHECK OPTION;</span></span></code></pre></div><p>This creates a view that checks both the <code>kind</code> and <code>classification</code> of new rows.</p><p>Create a view with a mix of updatable and non-updatable columns:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE VIEW comedies AS</span></span>
<span class="line"><span>    SELECT f.*,</span></span>
<span class="line"><span>           country_code_to_name(f.country_code) AS country,</span></span>
<span class="line"><span>           (SELECT avg(r.rating)</span></span>
<span class="line"><span>            FROM user_ratings r</span></span>
<span class="line"><span>            WHERE r.film_id = f.id) AS avg_rating</span></span>
<span class="line"><span>    FROM films f</span></span>
<span class="line"><span>    WHERE f.kind = &#39;Comedy&#39;;</span></span></code></pre></div><p>This view supports <code>INSERT</code>, <code>UPDATE</code>, and <code>DELETE</code>. All the columns from the <code>films</code> table will be updatable, whereas the computed columns <code>country</code> and <code>avg_rating</code> will be read-only.</p><p>Create a view that gets the top ten ranked baby names:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE VIEW topten AS </span></span>
<span class="line"><span>    SELECT name, rank, gender, year</span></span>
<span class="line"><span>    FROM names, rank</span></span>
<span class="line"><span>    WHERE rank &lt; &#39;11&#39; AND names.id=rank.id;</span></span></code></pre></div><p>Create a recursive view consisting of the numbers from 1 to 100:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>CREATE RECURSIVE VIEW public.nums_1_100 (n) AS</span></span>
<span class="line"><span>    VALUES (1)</span></span>
<span class="line"><span>UNION ALL</span></span>
<span class="line"><span>    SELECT n+1 FROM nums_1_100 WHERE n &lt; 100;</span></span></code></pre></div><p>Notice that although the recursive view&#39;s name is schema-qualified in this <code>CREATE VIEW</code> command, its internal self-reference is not schema-qualified. This is because the implicitly-created CTE&#39;s name cannot be schema-qualified.</p><h2 id="compatibility" tabindex="-1"><a id="section7"></a>Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;&lt;a id=&quot;section7&quot;&gt;&lt;/a&gt;Compatibility&quot;">​</a></h2><p><code>CREATE OR REPLACE VIEW</code> is a WarehousePG extension. So is the concept of a temporary view. The <code>WITH ( ... )</code> clause is an extension as well.</p><h2 id="see-also" tabindex="-1"><a id="section8"></a>See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;&lt;a id=&quot;section8&quot;&gt;&lt;/a&gt;See Also&quot;">​</a></h2><p><a href="./ALTER_VIEW.html">ALTER VIEW</a>, <a href="./DROP_VIEW.html">DROP VIEW</a>, <a href="./CREATE_MATERIALIZED_VIEW.html">CREATE MATERIALIZED VIEW</a></p><p><strong>Parent topic:</strong> <a href="./../sql_commands/sql_ref.html">SQL Commands</a></p>`,62)]))}const m=a(i,[["render",o]]);export{u as __pageData,m as default};
