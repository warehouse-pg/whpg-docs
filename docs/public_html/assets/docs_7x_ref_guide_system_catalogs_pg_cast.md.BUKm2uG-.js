import{_ as e,c as o,o as a,ag as d}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"pg_cast","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/system_catalogs/pg_cast.md","filePath":"docs/7x/ref_guide/system_catalogs/pg_cast.md"}'),s={name:"docs/7x/ref_guide/system_catalogs/pg_cast.md"};function c(n,t,r,i,p,h){return a(),o("div",null,t[0]||(t[0]=[d('<h1 id="pg-cast" tabindex="-1">pg_cast <a class="header-anchor" href="#pg-cast" aria-label="Permalink to &quot;pg_cast&quot;">â€‹</a></h1><p>The <code>pg_cast</code> table stores data type conversion paths, both built-in paths and those defined with <code>CREATE CAST</code>.</p><p>Note that <code>pg_cast</code> does not represent every type conversion known to the system, only those that cannot be deduced from some generic rule. For example, casting between a domain and its base type is not explicitly represented in <code>pg_cast</code>. Another important exception is that &quot;automatic I/O conversion casts&quot;, those performed using a data type&#39;s own I/O functions to convert to or from <code>text</code> or other string types, are not explicitly represented in <code>pg_cast</code>.</p><p>The cast functions listed in <code>pg_cast</code> must always take the cast source type as their first argument type, and return the cast destination type as their result type. A cast function can have up to three arguments. The second argument, if present, must be type <code>integer</code>; it receives the type modifier associated with the destination type, or <code>-1</code> if there is none. The third argument, if present, must be type <code>boolean</code>; it receives <code>true</code> if the cast is an explicit cast, <code>false</code> otherwise.</p><p>It is legitimate to create a <code>pg_cast</code> entry in which the source and target types are the same, if the associated function takes more than one argument. Such entries represent &#39;length coercion functions&#39; that coerce values of the type to be legal for a particular type modifier value.</p><p>When a <code>pg_cast</code> entry has different source and target types and a function that takes more than one argument, the entry converts from one type to another and applies a length coercion in a single step. When no such entry is available, coercion to a type that uses a type modifier involves two steps, one to convert between data types and a second to apply the modifier.</p><table tabindex="0"><thead><tr><th>column</th><th>type</th><th>references</th><th>description</th></tr></thead><tbody><tr><td><code>oid</code></td><td>oid</td><td></td><td>The object ID.</td></tr><tr><td><code>castsource</code></td><td>oid</td><td>pg_type.oid</td><td>OID of the source data type.</td></tr><tr><td><code>casttarget</code></td><td>oid</td><td>pg_type.oid</td><td>OID of the target data type.</td></tr><tr><td><code>castfunc</code></td><td>oid</td><td>pg_proc.oid</td><td>The OID of the function to use to perform this cast. Zero is stored if the cast method does not require a function.</td></tr><tr><td><code>castcontext</code></td><td>char</td><td></td><td>Indicates what contexts the cast may be invoked in. <code>e</code> means only as an explicit cast (using <code>CAST</code> or <code>::</code> syntax). <code>a</code> means implicitly in assignment to a target column, as well as explicitly. <code>i</code> means implicitly in expressions, as well as the other cases*.*</td></tr><tr><td><code>castmethod</code></td><td>char</td><td></td><td>Indicates how the cast is performed:<br><br><code>f</code> - The function identified in the <code>castfunc</code> field is used.<br><br><code>i</code> - The input/output functions are used.<br><br><code>b</code> - The types are binary-coercible, and no conversion is required.</td></tr></tbody></table><p><strong>Parent topic:</strong> <a href="./../system_catalogs/catalog_ref-html.html">System Catalogs Definitions</a></p>',8)]))}const f=e(s,[["render",c]]);export{u as __pageData,f as default};
