import{_ as t,c as a,o,ag as r}from"./chunks/framework.Ds6Eueu6.js";const u=JSON.parse('{"title":"Accessing External Data with External Tables","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/external/external-tables.md","filePath":"docs/7x/admin_guide/external/external-tables.md"}'),l={name:"docs/7x/admin_guide/external/external-tables.md"};function n(s,e,i,d,c,h){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="accessing-external-data-with-external-tables" tabindex="-1">Accessing External Data with External Tables <a class="header-anchor" href="#accessing-external-data-with-external-tables" aria-label="Permalink to &quot;Accessing External Data with External Tables&quot;">​</a></h1><hr><p>External tables enable you to access external data as if it were a regular database table. They are often used to move data into and out of a WarehousePG, and can utilize WarehousePG parallelism by using the resources of all WarehousePG segments to load or unload data.</p><p>When you create an external table definition, you specify the structure and format of the data, the data access <em>protocol</em>, the location of the external data source, and other protocol-specific or format-specific options.</p><blockquote><p><strong>Important</strong> WarehousePG 7 internally converts external tables to foreign tables, and internally operates on and represents the table using the foreign table data structures and catalog. Refer to <a href="./map_ext_to_foreign.html">Understanding the External Table to Foreign Table Mapping</a> for detailed information about this conversion, and its runtime implications.</p></blockquote><p><strong>Parent topic:</strong> <a href="./../external/working-with-file-based-ext-tables.html">Working with External Data</a></p><h2 id="about-the-external-table-data-access-protocols" tabindex="-1"><a id="protocols"></a>About the External Table Data Access Protocols <a class="header-anchor" href="#about-the-external-table-data-access-protocols" aria-label="Permalink to &quot;&lt;a id=&quot;protocols&quot;&gt;&lt;/a&gt;About the External Table Data Access Protocols&quot;">​</a></h2><p>An external table protocol identifies the data access method for an external data source. WarehousePG supports the following built-in (automatically-enabled) and opt-in (you enable) external table protocols:</p><table tabindex="0"><thead><tr><th>Protocol Name</th><th>Description</th><th>Type</th></tr></thead><tbody><tr><td><code>file://</code></td><td>Use to access external data files on segment hosts that the WarehousePG superuser (<code>gpadmin</code>) can access. Refer to <a href="./file-protocol.html">file:// Protocol</a>.</td><td>Built-in</td></tr><tr><td><code>gpfdist://</code></td><td>Use to serve external data files to all WarehousePG segments in parallel. See <a href="./gpfdist-protocol.html">gpfdist:// Protocol</a>.</td><td>Built-in</td></tr><tr><td><code>gpfdists://</code></td><td>The secure version of <code>gpfdist</code>. See <a href="./gpfdists-protocol.html">gpfdists:// Protocol</a>.</td><td>Built-in</td></tr><tr><td><code>pxf://</code></td><td>Use to access external object store systems (Azure, Google Cloud Storage, Minio, S3-compatible), Hadoop systems (HDFS, Hive, HBase), network file systems, and SQL databases with the WarehousePG Platform Extension Framework (PXF). See <a href="./pxf-protocol.html">pxf:// Protocol</a>.</td><td>Opt-in</td></tr><tr><td><code>s3://</code></td><td>Use to access files in an Amazon S3 bucket. See <a href="./s3-protocol.html">s3:// Protocol</a>.</td><td>Opt-in</td></tr></tbody></table><p>A third party can also create a custom protocol that connects WarehousePG to new external data sources. Refer to <a href="./../external/accessing-ext-files-custom-protocol.html">Creating a Custom Protocol</a> for more information.</p><p>The opt-in/custom and built-in protocols differ in these ways:</p><ul><li>You must register opt-in and custom protocols. Built-in protocols are always available and cannot be unregistered.</li><li>When you register an opt-in or custom protocol, WarehousePG adds a row to the <code>pg_extprotocol</code> catalog table to specify the handler functions that implement the protocol. The built-in protocols are not represented in this table.</li><li>You must have installed the opt-in or custom protocol&#39;s shared libraries on all WarehousePG hosts. The built-in protocols have no additional libraries to install.</li><li>You use <code>GRANT [SELECT | INSERT | ALL] ON PROTOCOL &lt;name&gt;</code> to grant users permissions on opt-in and custom protocols. To allow (or deny) users access to the built-in protocols, you use the <code>CREATE ROLE</code> or <code>ALTER ROLE</code> commands to add the <code>CREATEEXTTABLE</code> (or <code>NOCREATEEXTTABLE</code>) attribute to each user&#39;s role.</li></ul><h2 id="about-external-table-operations" tabindex="-1"><a id="ops"></a>About External Table Operations <a class="header-anchor" href="#about-external-table-operations" aria-label="Permalink to &quot;&lt;a id=&quot;ops&quot;&gt;&lt;/a&gt;About External Table Operations&quot;">​</a></h2><p>WarehousePG provides both readable (<a href="./../../ref_guide/sql_commands/CREATE_EXTERNAL_TABLE.html">CREATE EXTERNAL TABLE</a>) and writable (<code>CREATE WRITABLE EXTERNAL TABLE</code>) external tables.</p><p>Readable external tables are typically used for data loading, and allow only <a href="./../../ref_guide/sql_commands/SELECT.html">SELECT</a> operations. They support:</p><ul><li>Basic extraction, transformation, and loading (ETL) tasks common in data warehousing</li><li>Reading external table data in parallel from multiple WarehousePG segment instances, to optimize large load operations</li><li>Filter pushdown. If a query contains a <code>WHERE</code> clause, it may be passed to the external data source. Refer to the <a href="./../../ref_guide/config_params/guc-list.html">gp_external_enable_filter_pushdown</a> server configuration parameter discussion for more information. Note that this feature is currently supported only with the <code>pxf</code> protocol (see <a href="./pxf-protocol.html">pxf:// Protocol</a>).</li></ul><p>Writable external tables are typically used for data unloading, and allow only <a href="./../../ref_guide/sql_commands/INSERT.html">INSERT</a> operations. They support:</p><ul><li>Selecting data from database tables to insert into the writable external table</li><li>Sending data to an application as a stream of data. For example, unload data from WarehousePG and send it to an application that connects to another database or ETL tool to load the data elsewhere.</li></ul><h2 id="about-the-external-table-types" tabindex="-1"><a id="types"></a>About the External Table Types <a class="header-anchor" href="#about-the-external-table-types" aria-label="Permalink to &quot;&lt;a id=&quot;types&quot;&gt;&lt;/a&gt;About the External Table Types&quot;">​</a></h2><p>External tables are typically file-based or web-based:</p><ul><li>Regular (file-based) external tables can access static flat files. Regular external tables are rescannable: the data is static while the query runs.</li><li>Web (web-based) external tables access dynamic data sources, either on a web server with the <code>http://</code> protocol or by running OS commands or scripts. External web tables are not rescannable, the data can change while the query runs. Refer to <a href="./../external/creating-and-using-web-external-tables.html">Creating and Using External Web Tables</a> for more information.</li></ul><p>The <code>pxf://</code> protocol can also access other types of external data, such as SQL databases.</p><h2 id="creating-an-external-table" tabindex="-1"><a id="defining"></a>Creating an External Table <a class="header-anchor" href="#creating-an-external-table" aria-label="Permalink to &quot;&lt;a id=&quot;defining&quot;&gt;&lt;/a&gt;Creating an External Table&quot;">​</a></h2><p>When you create an external table definition, you specify the structure and format of the data, the access protocol, the location of the external data source, and other protocol-specific or format-specific options.</p><p><a href="./../external/creating-external-tables---examples.html">Examples for Creating External Tables</a> provides examples for different data types and different built-in protocols.</p><blockquote><p><strong>Important</strong> After you create an external table, you must operate on the table using <code>ALTER EXTERNAL TABLE</code> and <code>DROP EXTERNAL TABLE</code> commands. WarehousePG does not recommend mixing and matching external table and foreign table syntaxes for table maintenance operations.</p></blockquote><h2 id="other-considerations" tabindex="-1"><a id="other"></a>Other Considerations <a class="header-anchor" href="#other-considerations" aria-label="Permalink to &quot;&lt;a id=&quot;other&quot;&gt;&lt;/a&gt;Other Considerations&quot;">​</a></h2><p>WarehousePG backup and restore operations back up and restore only external and external web table <em>definitions</em>, not the data source data.</p><p>By default, if external table data contains an error, the command fails and no data loads into the target database table. See <a href="./../external/g-handling-errors-ext-table-data.html">Handling Errors in External Table Data</a> for more information.</p>',29)]))}const b=t(l,[["render",n]]);export{u as __pageData,b as default};
