import{_ as a,c as t,o as n,ag as o}from"./chunks/framework.Ds6Eueu6.js";const h=JSON.parse('{"title":"ALTER AGGREGATE","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/sql_commands/ALTER_AGGREGATE.md","filePath":"docs/7x/ref_guide/sql_commands/ALTER_AGGREGATE.md"}'),s={name:"docs/7x/ref_guide/sql_commands/ALTER_AGGREGATE.md"};function i(r,e,c,g,d,l){return n(),t("div",null,e[0]||(e[0]=[o(`<h1 id="alter-aggregate" tabindex="-1">ALTER AGGREGATE <a class="header-anchor" href="#alter-aggregate" aria-label="Permalink to &quot;ALTER AGGREGATE&quot;">​</a></h1><p>Changes the definition of an aggregate function</p><h2 id="synopsis" tabindex="-1"><a id="section2"></a>Synopsis <a class="header-anchor" href="#synopsis" aria-label="Permalink to &quot;&lt;a id=&quot;section2&quot;&gt;&lt;/a&gt;Synopsis&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER AGGREGATE &lt;name&gt; ( &lt;aggregate_signature&gt; )  RENAME TO &lt;new_name&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ALTER AGGREGATE &lt;name&gt; ( &lt;aggregate_signature&gt; )</span></span>
<span class="line"><span>                 OWNER TO { &lt;new_owner&gt; | CURRENT_USER | SESSION_USER }</span></span>
<span class="line"><span></span></span>
<span class="line"><span>ALTER AGGREGATE &lt;name&gt; ( &lt;aggregate_signature&gt; ) SET SCHEMA &lt;new_schema&gt;</span></span>
<span class="line"><span></span></span>
<span class="line"><span>where &lt;aggregate_signature&gt; is:</span></span>
<span class="line"><span></span></span>
<span class="line"><span>* |</span></span>
<span class="line"><span>[ &lt;argmode&gt; ] [ &lt;argname&gt; ] &lt;argtype&gt; [ , ... ] |</span></span>
<span class="line"><span>[ [ &lt;argmode&gt; ] [ &lt;argname&gt; ] &lt;argtype&gt; [ , ... ] ] ORDER BY [ &lt;argmode&gt; ] [ &lt;argname&gt; ] &lt;argtype&gt; [ , ... ]</span></span></code></pre></div><h2 id="description" tabindex="-1"><a id="section3"></a>Description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;&lt;a id=&quot;section3&quot;&gt;&lt;/a&gt;Description&quot;">​</a></h2><p><code>ALTER AGGREGATE</code> changes the definition of an aggregate function.</p><p>You must own the aggregate function to use <code>ALTER AGGREGATE</code>. To change the schema of an aggregate function, you must also have <code>CREATE</code> privilege on the new schema. To alter the owner, you must also be a direct or indirect member of the new owning role, and that role must have <code>CREATE</code> privilege on the aggregate function&#39;s schema. (These restrictions enforce that altering the owner does not do anything you could not do by dropping and recreating the aggregate function. However, a superuser can alter ownership of any aggregate function anyway.)</p><h2 id="parameters" tabindex="-1"><a id="section4"></a>Parameters <a class="header-anchor" href="#parameters" aria-label="Permalink to &quot;&lt;a id=&quot;section4&quot;&gt;&lt;/a&gt;Parameters&quot;">​</a></h2><p>name : The name (optionally schema-qualified) of an existing aggregate function.</p><p>argmode : The mode of an argument: <code>IN</code> or <code>VARIADIC</code>. If omitted, the default is <code>IN</code>.</p><p>argname : The name of an argument. Note that <code>ALTER AGGREGATE</code> does not actually pay any attention to argument names, since only the argument data types are needed to determine the aggregate function&#39;s identity.</p><p>argtype : An input data type on which the aggregate function operates. To reference a zero-argument aggregate function, write <code>*</code> in place of the list of argument specifications To reference an ordered-set aggregate function, write <code>ORDER BY</code> between the direct and aggregated argument specifications.</p><p>new_name : The new name of the aggregate function.</p><p>new_owner : The new owner of the aggregate function.</p><p>new_schema : The new schema for the aggregate function.</p><h2 id="notes" tabindex="-1"><a id="notes"></a>Notes <a class="header-anchor" href="#notes" aria-label="Permalink to &quot;&lt;a id=&quot;notes&quot;&gt;&lt;/a&gt;Notes&quot;">​</a></h2><p>The recommended syntax for referencing an ordered-set aggregate is to write <code>ORDER BY</code> between the direct and aggregated argument specifications, in the same style as in <a href="./CREATE_AGGREGATE.html">CREATE AGGREGATE</a>. However, it will also work to omit <code>ORDER BY</code> and just run the direct and aggregated argument specifications into a single list. In this abbreviated form, if <code>VARIADIC &quot;any&quot;</code> was used in both the direct and aggregated argument lists, write <code>VARIADIC &quot;any&quot;</code> only once.</p><h2 id="examples" tabindex="-1"><a id="section5"></a>Examples <a class="header-anchor" href="#examples" aria-label="Permalink to &quot;&lt;a id=&quot;section5&quot;&gt;&lt;/a&gt;Examples&quot;">​</a></h2><p>To rename the aggregate function <code>myavg</code> for type <code>integer</code> to <code>my_average</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER AGGREGATE myavg(integer) RENAME TO my_average;</span></span></code></pre></div><p>To change the owner of the aggregate function <code>myavg</code> for type <code>integer</code> to <code>joe</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER AGGREGATE myavg(integer) OWNER TO joe;</span></span></code></pre></div><p>To move the ordered-set aggregate <code>mypercentile</code> with direct argument of type <code>float8</code> and aggregated argument of type <code>integer</code> into schema <code>myschema</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER AGGREGATE mypercentile(float8 ORDER BY integer) SET SCHEMA myschema;</span></span></code></pre></div><p>This will work too:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>ALTER AGGREGATE mypercentile(float8, integer) SET SCHEMA myschema;</span></span></code></pre></div><h2 id="compatibility" tabindex="-1"><a id="section6"></a>Compatibility <a class="header-anchor" href="#compatibility" aria-label="Permalink to &quot;&lt;a id=&quot;section6&quot;&gt;&lt;/a&gt;Compatibility&quot;">​</a></h2><p>There is no <code>ALTER AGGREGATE</code> statement in the SQL standard.</p><h2 id="see-also" tabindex="-1"><a id="section7"></a>See Also <a class="header-anchor" href="#see-also" aria-label="Permalink to &quot;&lt;a id=&quot;section7&quot;&gt;&lt;/a&gt;See Also&quot;">​</a></h2><p><a href="./CREATE_AGGREGATE.html">CREATE AGGREGATE</a>, <a href="./DROP_AGGREGATE.html">DROP AGGREGATE</a></p><p><strong>Parent topic:</strong> <a href="./../sql_commands/sql_ref.html">SQL Commands</a></p>`,31)]))}const m=a(s,[["render",i]]);export{h as __pageData,m as default};
