import{_ as s,c as i,o as t,ag as a}from"./chunks/framework.Ds6Eueu6.js";const k=JSON.parse('{"title":"Retrieving Query Results with a Parallel Retrieve Cursor","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/admin_guide/parallel_retrieve_cursor.md","filePath":"docs/7x/admin_guide/parallel_retrieve_cursor.md"}'),n={name:"docs/7x/admin_guide/parallel_retrieve_cursor.md"};function r(l,e,h,o,p,d){return t(),i("div",null,e[0]||(e[0]=[a(`<h1 id="retrieving-query-results-with-a-parallel-retrieve-cursor" tabindex="-1">Retrieving Query Results with a Parallel Retrieve Cursor <a class="header-anchor" href="#retrieving-query-results-with-a-parallel-retrieve-cursor" aria-label="Permalink to &quot;Retrieving Query Results with a Parallel Retrieve Cursor&quot;">​</a></h1><hr><p>A <em>parallel retrieve cursor</em> is an enhanced cursor implementation that you can use to create a special kind of cursor on the WarehousePG coordinator node, and retrieve query results, on demand and in parallel, directly from the WarehousePG segments.</p><h2 id="about-parallel-retrieve-cursors" tabindex="-1"><a id="topic_about"></a>About Parallel Retrieve Cursors <a class="header-anchor" href="#about-parallel-retrieve-cursors" aria-label="Permalink to &quot;&lt;a id=&quot;topic_about&quot;&gt;&lt;/a&gt;About Parallel Retrieve Cursors&quot;">​</a></h2><p>You use a cursor to retrieve a smaller number of rows at a time from a larger query. When you declare a parallel retrieve cursor, the WarehousePG Database Query Dispatcher (QD) dispatches the query plan to each Query Executor (QE), and creates an <em>endpoint</em> on each QE before it executes the query. An endpoint is a query result source for a parallel retrieve cursor on a specific QE. Instead of returning the query result to the QD, an endpoint retains the query result for retrieval via a different process: a direct connection to the endpoint. You open a special retrieve mode connection, called a <em>retrieve session</em>, and use the new <code>RETRIEVE</code> SQL command to retrieve query results from each parallel retrieve cursor endpoint. You can retrieve from parallel retrieve cursor endpoints on demand and in parallel.</p><p>You can use the following functions and views to examine and manage parallel retrieve cursors and endpoints:</p><table tabindex="0"><thead><tr><th>Function, View Name</th><th>Description</th></tr></thead><tbody><tr><td>gp_get_endpoints()<br><br><a href="./../ref_guide/system_catalogs/catalog_ref-views.html#gp_endpoints">gp_endpoints</a></td><td>List the endpoints associated with all active parallel retrieve cursors declared by the current user in the current database. When the WarehousePG superuser invokes this function, it returns a list of all endpoints for all parallel retrieve cursors declared by all users in the current database.</td></tr><tr><td>gp_get_session_endpoints()<br><br><a href="./../ref_guide/system_catalogs/catalog_ref-views.html#gp_session_endpoints">gp_session_endpoints</a></td><td>List the endpoints associated with all parallel retrieve cursors declared in the current session for the current user.</td></tr><tr><td>gp_get_segment_endpoints()<br><br><a href="./../ref_guide/system_catalogs/catalog_ref-views.html#gp_segment_endpoints">gp_segment_endpoints</a></td><td>List the endpoints created in the QE for all active parallel retrieve cursors declared by the current user. When the WarehousePG superuser accesses this view, it returns a list of all endpoints on the QE created for all parallel retrieve cursors declared by all users.</td></tr><tr><td>gp_wait_parallel_retrieve_cursor(cursorname text, timeout_sec int4 )</td><td>Return cursor status or block and wait for results to be retrieved from all endpoints associated with the specified parallel retrieve cursor.</td></tr></tbody></table><div class="note">Each of these functions and views is located in the <code>pg_catalog</code> schema, and each <code>RETURNS TABLE</code>.</div><h2 id="using-a-parallel-retrieve-cursor" tabindex="-1"><a id="topic_using"></a>Using a Parallel Retrieve Cursor <a class="header-anchor" href="#using-a-parallel-retrieve-cursor" aria-label="Permalink to &quot;&lt;a id=&quot;topic_using&quot;&gt;&lt;/a&gt;Using a Parallel Retrieve Cursor&quot;">​</a></h2><p>You will perform the following tasks when you use a WarehousePG parallel retrieve cursor to read query results in parallel from WarehousePG segments:</p><ol><li><a href="#declare_cursor">Declare the parallel retrieve cursor</a>.</li><li><a href="#list_endpoints">List the endpoints of the parallel retrieve cursor</a>.</li><li><a href="#open_retrieve_conn">Open a retrieve connection to each endpoint</a>.</li><li><a href="#retrieve_data">Retrieve data from each endpoint</a>.</li><li><a href="#wait">Wait for data retrieval to complete</a>.</li><li><a href="#error_handling">Handle data retrieval errors</a>.</li><li><a href="#close">Close the parallel retrieve cursor</a>.</li></ol><p>In addition to the above, you may optionally choose to <a href="#list_all_prc">List all parallel retrieve cursors</a> in the system or <a href="#utility_endpoints">List segment-specific retrieve session information</a>.</p><h3 id="declaring-a-parallel-retrieve-cursor" tabindex="-1"><a id="declare_cursor"></a>Declaring a Parallel Retrieve Cursor <a class="header-anchor" href="#declaring-a-parallel-retrieve-cursor" aria-label="Permalink to &quot;&lt;a id=&quot;declare_cursor&quot;&gt;&lt;/a&gt;Declaring a Parallel Retrieve Cursor&quot;">​</a></h3><p>You <a href="./../ref_guide/sql_commands/DECLARE.html#topic1">DECLARE</a> a cursor to retrieve a smaller number of rows at a time from a larger query. When you declare a parallel retrieve cursor, you can retrieve the query results directly from the WarehousePG segments.</p><p>The syntax for declaring a parallel retrieve cursor is similar to that of declaring a regular cursor; you must additionally include the <code>PARALLEL RETRIEVE</code> keywords in the command. You can declare a parallel retrieve cursor only within a transaction, and the cursor name that you specify when you declare the cursor must be unique within the transaction.</p><p>For example, the following commands begin a transaction and declare a parallel retrieve cursor named <code>prc1</code> to retrieve the results from a specific query:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DECLARE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prc1 PARALLEL RETRIEVE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CURSOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">query</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">i</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>WarehousePG creates the endpoint(s) on the QD or QEs, depending on the <em>query</em> parameters:</p><ul><li><p>WarehousePG creates an endpoint on the QD when the query results must be gathered by the coordinator. For example, this <code>DECLARE</code> statement requires that the coordinator gather the query results:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DECLARE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c1 PARALLEL RETRIEVE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CURSOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">ORDER BY</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a;</span></span></code></pre></div> <div class="note">You may choose to run the <code>EXPLAIN</code> command on the parallel retrieve cursor query to identify when motion is involved. Consider using a regular cursor for such queries.</div></li><li><p>When the query involves direct dispatch to a segment (the query is filtered on the distribution key), WarehousePG creates the endpoint(s) on specific segment host(s). For example, this <code>DECLARE</code> statement may result in the creation of single endpoint:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DECLARE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c2 PARALLEL RETRIEVE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CURSOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t1 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p>WarehousePG creates the endpoints on all segment hosts when all hosts contribute to the query results. This example <code>DECLARE</code> statement results in all segments contributing query results:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DECLARE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> c3 PARALLEL RETRIEVE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CURSOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t1;</span></span></code></pre></div></li></ul><p>The <code>DECLARE</code> command returns when the endpoints are ready and query execution has begun.</p><h3 id="listing-a-parallel-retrieve-cursor-s-endpoints" tabindex="-1"><a id="list_endpoints"></a>Listing a Parallel Retrieve Cursor&#39;s Endpoints <a class="header-anchor" href="#listing-a-parallel-retrieve-cursor-s-endpoints" aria-label="Permalink to &quot;&lt;a id=&quot;list_endpoints&quot;&gt;&lt;/a&gt;Listing a Parallel Retrieve Cursor&#39;s Endpoints&quot;">​</a></h3><p>You can obtain the information that you need to initiate a retrieve connection to an endpoint by invoking the <code>gp_get_endpoints()</code> function or examining the <code>gp_endpoints</code> view in a session on the WarehousePG coordinator host:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gp_get_endpoints();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gp_endpoints;</span></span></code></pre></div><p>These commands return the list of endpoints in a table with the following columns:</p><table tabindex="0"><thead><tr><th>Column Name</th><th>Description</th></tr></thead><tbody><tr><td>gp_segment_id</td><td>The QE&#39;s endpoint <code>gp_segment_id</code>.</td></tr><tr><td>auth_token</td><td>The authentication token for a retrieve session.</td></tr><tr><td>cursorname</td><td>The name of the parallel retrieve cursor.</td></tr><tr><td>sessionid</td><td>The identifier of the session in which the parallel retrieve cursor was created.</td></tr><tr><td>hostname</td><td>The name of the host from which to retrieve the data for the endpoint.</td></tr><tr><td>port</td><td>The port number from which to retrieve the data for the endpoint.</td></tr><tr><td>username</td><td>The name of the current user; <em>you must initiate the retrieve session as this user</em>.</td></tr><tr><td>state</td><td>The state of the endpoint; the valid states are:<br><br>READY: The endpoint is ready to be retrieved.<br><br>ATTACHED: The endpoint is attached to a retrieve connection.<br><br>RETRIEVING: A retrieve session is retrieving data from the endpoint at this moment.<br><br>FINISHED: The endpoint has been fully retrieved.<br><br>RELEASED: Due to an error, the endpoint has been released and the connection closed.</td></tr><tr><td>endpointname</td><td>The endpoint identifier; you provide this identifier to the <code>RETRIEVE</code> command.</td></tr></tbody></table><p>Refer to the <a href="./../ref_guide/system_catalogs/catalog_ref-views.html#gp_endpoints">gp_endpoints</a> view reference page for more information about the endpoint attributes returned by these commands.</p><p>You can similarly invoke the <code>gp_get_session_endpoints()</code> function or examine the <code>gp_session_endpoints</code> view to list the endpoints created for the parallel retrieve cursors declared in the current session and by the current user.</p><h3 id="opening-a-retrieve-session" tabindex="-1"><a id="open_retrieve_conn"></a>Opening a Retrieve Session <a class="header-anchor" href="#opening-a-retrieve-session" aria-label="Permalink to &quot;&lt;a id=&quot;open_retrieve_conn&quot;&gt;&lt;/a&gt;Opening a Retrieve Session&quot;">​</a></h3><p>After you declare a parallel retrieve cursor, you can open a retrieve session to each endpoint. Only a single retrieve session may be open to an endpoint at any given time.</p><div class="note">A retrieve session is independent of the parallel retrieve cursor itself and the endpoints.</div><p>Retrieve session authentication does not depend on the <code>pg_hba.conf</code> file, but rather on an authentication token (<code>auth_token</code>) generated by WarehousePG.</p><div class="note">Because WarehousePG skips <code>pg_hba.conf</code>-controlled authentication for a retrieve session, for security purposes you may invoke only the <code>RETRIEVE</code> command in the session.</div><p>When you initiate a retrieve session to an endpoint:</p><ul><li><p>The user that you specify for the retrieve session must be the user that declared the parallel retrieve cursor (the <code>username</code> returned by <code>gp_endpoints</code>). This user must have WarehousePG login privileges.</p></li><li><p>You specify the <code>hostname</code> and <code>port</code> returned by <code>gp_endpoints</code> for the endpoint.</p></li><li><p>You authenticate the retrieve session by specifying the <code>auth_token</code> returned for the endpoint via the <code>PGPASSWORD</code> environment variable, or when prompted for the retrieve session <code>Password</code>.</p></li><li><p>You must specify the <a href="./../ref_guide/config_params/guc-list.html#gp_retrieve_conn">gp_retrieve_conn</a> server configuration parameter on the connection request, and set the value to <code>true</code> .</p></li></ul><p>For example, if you are initiating a retrieve session via <code>psql</code>:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">PGOPTIONS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-c gp_retrieve_conn=true&#39;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> psql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -h</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">hostnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -p</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">por</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">t</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -U</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">usernam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> &lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">dbnam</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">e</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre></div><p>To distinguish a retrieve session from other sessions running on a segment host, WarehousePG includes the <code>[retrieve]</code> tag on the <code>ps</code> command output display for the process.</p><h3 id="retrieving-data-from-the-endpoint" tabindex="-1"><a id="retrieve_data"></a>Retrieving Data From the Endpoint <a class="header-anchor" href="#retrieving-data-from-the-endpoint" aria-label="Permalink to &quot;&lt;a id=&quot;retrieve_data&quot;&gt;&lt;/a&gt;Retrieving Data From the Endpoint&quot;">​</a></h3><p>Once you establish a retrieve session, you retrieve the tuples associated with a query result on that endpoint using the <a href="./../ref_guide/sql_commands/RETRIEVE.html#topic1">RETRIEVE</a> command.</p><p>You can specify a (positive) number of rows to retrieve, or <code>ALL</code> rows:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RETRIEVE </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prc10000003300000003;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RETRIEVE ALL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prc10000003300000003;</span></span></code></pre></div><p>WarehousePG returns an empty set if there are no more rows to retrieve from the endpoint.</p><div class="note">You can retrieve from multiple parallel retrieve cursors from the same retrieve session only when their <code>auth_token</code>s match.</div><h3 id="waiting-for-data-retrieval-to-complete" tabindex="-1"><a id="wait"></a>Waiting for Data Retrieval to Complete <a class="header-anchor" href="#waiting-for-data-retrieval-to-complete" aria-label="Permalink to &quot;&lt;a id=&quot;wait&quot;&gt;&lt;/a&gt;Waiting for Data Retrieval to Complete&quot;">​</a></h3><p>Use the <code>gp_wait_parallel_retrieve_cursor()</code> function to display the status of data retrieval from a parallel retrieve cursor, or to wait for all endpoints to finishing retrieving the data. You invoke this function in the transaction block in which you declared the parallel retrieve cursor.</p><p><code>gp_wait_parallel_retrieve_cursor()</code> returns <code>true</code> only when all tuples are fully retrieved from all endpoints. In all other cases, the function returns <code>false</code> and may additionally throw an error.</p><p>The function signatures of <code>gp_wait_parallel_retrieve_cursor()</code> follow:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gp_wait_parallel_retrieve_cursor( cursorname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> )</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">gp_wait_parallel_retrieve_cursor( cursorname </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">text</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, timeout_sec int4 )</span></span></code></pre></div><p>You must identify the name of the cursor when you invoke this function. The timeout argument is optional:</p><ul><li><p>The default timeout is <code>0</code> seconds: WarehousePG checks the retrieval status of all endpoints and returns the result immediately.</p></li><li><p>A timeout value of <code>-1</code> seconds instructs WarehousePG to block until all data from all endpoints has been retrieved, or block until an error occurs.</p></li><li><p>The function reports the retrieval status after a timeout occurs for any other positive timeout value that you specify.</p></li></ul><p><code>gp_wait_parallel_retrieve_cursor()</code> returns when it encounters one of the following conditions:</p><ul><li>All data has been retrieved from all endpoints.</li><li>A timeout has occurred.</li><li>An error has occurred.</li></ul><h3 id="handling-data-retrieval-errors" tabindex="-1"><a id="error_handling"></a>Handling Data Retrieval Errors <a class="header-anchor" href="#handling-data-retrieval-errors" aria-label="Permalink to &quot;&lt;a id=&quot;error_handling&quot;&gt;&lt;/a&gt;Handling Data Retrieval Errors&quot;">​</a></h3><p>An error can occur in a retrieve sesson when:</p><ul><li>You cancel or interrupt the retrieve operation.</li><li>The endpoint is only partially retrieved when the retrieve session quits.</li></ul><p>When an error occurs in a specific retrieve session, WarehousePG removes the endpoint from the QE. Other retrieve sessions continue to function as normal.</p><p>If you close the transaction before fully retrieving from all endpoints, or if <code>gp_wait_parallel_retrieve_cursor()</code> returns an error, WarehousePG terminates all remaining open retrieve sessions.</p><h3 id="closing-the-cursor" tabindex="-1"><a id="close"></a>Closing the Cursor <a class="header-anchor" href="#closing-the-cursor" aria-label="Permalink to &quot;&lt;a id=&quot;close&quot;&gt;&lt;/a&gt;Closing the Cursor&quot;">​</a></h3><p>When you have completed retrieving data from the parallel retrieve cursor, close the cursor and end the transaction:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CLOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prc1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">END</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><div class="note">When you close a parallel retrieve cursor, WarehousePG terminates any open retrieve sessions associated with the cursor.</div><p>On closing, WarehousePG frees all resources associated with the parallel retrieve cursor and its endpoints.</p><h3 id="listing-all-parallel-retrieve-cursors" tabindex="-1"><a id="list_all_prc"></a>Listing All Parallel Retrieve Cursors <a class="header-anchor" href="#listing-all-parallel-retrieve-cursors" aria-label="Permalink to &quot;&lt;a id=&quot;list_all_prc&quot;&gt;&lt;/a&gt;Listing All Parallel Retrieve Cursors&quot;">​</a></h3><p>The <a href="./../ref_guide/system_catalogs/catalog_ref-views.html#pg_cursors">pg_cursors</a> view lists all declared cursors that are currently available in the system. You can obtain information about all parallel retrieve cursors by running the following command:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> pg_cursors </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> is_parallel </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> true;</span></span></code></pre></div><h3 id="listing-segment-specific-retrieve-session-information" tabindex="-1"><a id="utility_endpoints"></a>Listing Segment-Specific Retrieve Session Information <a class="header-anchor" href="#listing-segment-specific-retrieve-session-information" aria-label="Permalink to &quot;&lt;a id=&quot;utility_endpoints&quot;&gt;&lt;/a&gt;Listing Segment-Specific Retrieve Session Information&quot;">​</a></h3><p>You can obtain information about all retrieve sessions to a specific QE endpoint by invoking the <code>gp_get_segment_endpoints()</code> function or examining the <code>gp_segment_endpoints</code> view:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gp_get_segment_endpoints();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gp_segment_endpoints;</span></span></code></pre></div><p>These commands provide information about the retrieve sessions associated with a QE endpoint for all active parallel retrieve cursors declared by the current user. When the WarehousePG superuser invokes the command, it returns the retrieve session information for all endpoints on the QE created for all parallel retrieve cursors declared by all users.</p><p>You can obtain segment-specific retrieve session information in two ways: from the QD, or via a utility-mode connection to the endpoint:</p><ul><li><p>QD example:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gp_dist_random(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gp_segment_endpoints&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><p>Display the information filtered to a specific segment:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gp_dist_random(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;gp_segment_endpoints&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gp_segment_id </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p>Example utilizing a utility-mode connection to the endpoint:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ PGOPTIONS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-c gp_session_role=utility&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> psql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h sdw3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">U localuser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6001</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d testdb</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">testdb</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gp_segment_endpoints;</span></span></code></pre></div></li></ul><p>The commands return endpoint and retrieve session information in a table with the following columns:</p><table tabindex="0"><thead><tr><th>Column Name</th><th>Description</th></tr></thead><tbody><tr><td>auth_token</td><td>The authentication token for a the retrieve session.</td></tr><tr><td>databaseid</td><td>The identifier of the database in which the parallel retrieve cursor was created.</td></tr><tr><td>senderpid</td><td>The identifier of the process sending the query results.</td></tr><tr><td>receiverpid</td><td>The process identifier of the retrieve session that is receiving the query results.</td></tr><tr><td>state</td><td>The state of the endpoint; the valid states are:<br><br>READY: The endpoint is ready to be retrieved.<br><br>ATTACHED: The endpoint is attached to a retrieve connection.<br><br>RETRIEVING: A retrieve session is retrieving data from the endpoint at this moment.<br><br>FINISHED: The endpoint has been fully retrieved.<br><br>RELEASED: Due to an error, the endpoint has been released and the connection closed.</td></tr><tr><td>gp_segment_id</td><td>The QE&#39;s endpoint <code>gp_segment_id</code>.</td></tr><tr><td>sessionid</td><td>The identifier of the session in which the parallel retrieve cursor was created.</td></tr><tr><td>username</td><td>The name of the user that initiated the retrieve session.</td></tr><tr><td>endpointname</td><td>The endpoint identifier.</td></tr><tr><td>cursorname</td><td>The name of the parallel retrieve cursor.</td></tr></tbody></table><p>Refer to the <a href="./../ref_guide/system_catalogs/catalog_ref-views.html#gp_segment_endpoints">gp_segment_endpoints</a> view reference page for more information about the endpoint attributes returned by these commands.</p><h2 id="limiting-the-number-of-concurrently-open-cursors" tabindex="-1"><a id="topic_cfg"></a>Limiting the Number of Concurrently Open Cursors <a class="header-anchor" href="#limiting-the-number-of-concurrently-open-cursors" aria-label="Permalink to &quot;&lt;a id=&quot;topic_cfg&quot;&gt;&lt;/a&gt;Limiting the Number of Concurrently Open Cursors&quot;">​</a></h2><p>By default, WarehousePG does not limit the number of parallel retrieve cursors that are active in the cluster (up to the maximum value of 1024). The WarehousePG superuser can set the <a href="./../ref_guide/config_params/guc-list.html#gp_max_parallel_cursors">gp_max_parallel_cursors</a> server configuration parameter to limit the number of open cursors.</p><h2 id="known-issues-and-limitations" tabindex="-1"><a id="topic_limits"></a>Known Issues and Limitations <a class="header-anchor" href="#known-issues-and-limitations" aria-label="Permalink to &quot;&lt;a id=&quot;topic_limits&quot;&gt;&lt;/a&gt;Known Issues and Limitations&quot;">​</a></h2><p>The parallel retrieve cursor implementation has the following limitations:</p><ul><li>The WarehousePG query optimizer (GPORCA) does not support queries on a parallel retrieve cursor.</li><li>WarehousePG ignores the <code>BINARY</code> clause when you declare a parallel retrieve cursor.</li><li>Parallel retrieve cursors cannot be declared <code>WITH HOLD</code>.</li><li>Parallel retrieve cursors do not support the <code>FETCH</code> and <code>MOVE</code> cursor operations.</li><li>Parallel retrieve cursors are not supported in SPI; you cannot declare a parallel retrieve cursor in a PL/pgSQL function.</li></ul><h2 id="additional-documentation" tabindex="-1"><a id="topic_addtldocs"></a>Additional Documentation <a class="header-anchor" href="#additional-documentation" aria-label="Permalink to &quot;&lt;a id=&quot;topic_addtldocs&quot;&gt;&lt;/a&gt;Additional Documentation&quot;">​</a></h2><p>Refer to the <a href="https://github.com/greenplum-db/gpdb/tree/main/src/backend/cdb/endpoint/README" target="_blank" rel="noreferrer">README</a> in the WarehousePG <code>github</code> repository for additional information about the parallel retrieve cursor implementation. You can also find parallel retrieve cursor <a href="https://github.com/greenplum-db/gpdb/tree/main/src/test/examples/" target="_blank" rel="noreferrer">programming examples</a> in the repository.</p><h2 id="example" tabindex="-1"><a id="topic_examples"></a>Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;&lt;a id=&quot;topic_examples&quot;&gt;&lt;/a&gt;Example&quot;">​</a></h2><p>Create a parallel retrieve cursor and use it to pull query results from a WarehousePG cluster:</p><ol><li><p>Open a <code>psql</code> session to the WarehousePG coordinator host:</p><div class="language-shell vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">shell</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">psql</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -d</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> testdb</span></span></code></pre></div></li><li><p>Start the transaction:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">BEGIN</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li><li><p>Declare a parallel retrieve cursor named <code>prc1</code> for a <code>SELECT *</code> query on a table:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">DECLARE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prc1 PARALLEL RETRIEVE </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CURSOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FOR</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> t1;</span></span></code></pre></div></li><li><p>Obtain the endpoints for this parallel retrieve cursor:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gp_endpoints </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">WHERE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> cursorname</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prc1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gp_segment_id |            auth_token            | cursorname | sessionid | hostname | port | username | </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">state</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> |     endpointname     </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">---------------+----------------------------------+------------+-----------+----------+------+----------+-------+----------------------</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             2</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | 39a2dc90a82fca668e04d04e0338f105 | prc1       |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | sdw1     | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | bill     | READY | prc10000003300000003</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             3</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | 1a6b29f0f4cad514a8c3936f9239c50d | prc1       |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | sdw1     | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | bill     | READY | prc10000003300000003</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             4</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | 1ae948c8650ebd76bfa1a1a9fa535d93 | prc1       |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | sdw2     | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | bill     | READY | prc10000003300000003</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | f10f180133acff608275d87966f8c7d9 | prc1       |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | sdw2     | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | bill     | READY | prc10000003300000003</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             6</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | dda0b194f74a89ed87b592b27ddc0e39 | prc1       |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | sdw3     | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | bill     | READY | prc10000003300000003</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             7</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | 037f8c747a5dc1b75fb10524b676b9e8 | prc1       |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | sdw3     | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | bill     | READY | prc10000003300000003</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             8</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | c43ac67030dbc819da9d2fd8b576410c | prc1       |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | sdw4     | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6000</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | bill     | READY | prc10000003300000003</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">             9</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | e514ee276f6b2863142aa2652cbccd85 | prc1       |        </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">51</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | sdw4     | </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6001</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> | bill     | READY | prc10000003300000003</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">8</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> rows</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div></li><li><p>Wait until all endpoints are fully retrieved:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">SELECT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> gp_wait_parallel_retrieve_cursor( </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;prc1&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> );</span></span></code></pre></div></li><li><p>For each endpoint:</p><ol><li><p>Open a retrieve session. For example, to open a retrieve session to the segment instance running on <code>sdw3</code>, port number <code>6001</code>, run the following command in a <em>different terminal window</em>; when prompted for the password, provide the <code>auth_token</code> identified in row 7 of the <code>gp_endpoints</code> output:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">$ PGOPTIONS</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;-c gp_retrieve_conn=true&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> psql </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">h sdw3 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">U localuser </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">-</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">p </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">6001</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> -</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">d testdb</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">Password</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span></code></pre></div></li><li><p>Retrieve data from the endpoint:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Retrieve 7 rows of data from this session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RETRIEVE </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">7</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prc10000003300000003</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Retrieve the remaining rows of data from this session</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">RETRIEVE ALL </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">FROM</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> ENDPOINT</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prc10000003300000003</span></span></code></pre></div></li><li><p>Exit the retrieve session:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">\\q</span></span></code></pre></div></li></ol></li><li><p>In the original <code>psql</code> session (the session in which you declared the parallel retrieve cursor), verify that the <code>gp_wait_parallel_retrieve_cursor()</code> function returned <code>t</code>. Then close the cursor and complete the transaction:</p><div class="language-sql vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">sql</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">CLOSE</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prc1;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">END</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div></li></ol>`,84)]))}const u=s(n,[["render",r]]);export{k as __pageData,u as default};
