import{_ as n,c as s,o as t,ag as a}from"./chunks/framework.Ds6Eueu6.js";const h=JSON.parse('{"title":"dblink","description":"","frontmatter":{},"headers":[],"relativePath":"docs/7x/ref_guide/modules/dblink.md","filePath":"docs/7x/ref_guide/modules/dblink.md"}'),o={name:"docs/7x/ref_guide/modules/dblink.md"};function i(d,e,c,l,p,r){return t(),s("div",null,e[0]||(e[0]=[a(`<h1 id="dblink" tabindex="-1">dblink <a class="header-anchor" href="#dblink" aria-label="Permalink to &quot;dblink&quot;">​</a></h1><p>The <code>dblink</code> module supports connections to other WarehousePG databases from within a database session. These databases can reside in the same WarehousePG cluster, or in a remote system.</p><p>WarehousePG supports <code>dblink</code> connections between databases in WarehousePG installations with the same major version number. You can also use <code>dblink</code> to connect to other WarehousePG installations that use compatible <code>libpq</code> libraries.</p><blockquote><p><strong>Note</strong> <code>dblink</code> is intended for database users to perform short ad hoc queries in other databases. <code>dblink</code> is not intended for use as a replacement for external tables.</p></blockquote><p>The WarehousePG <code>dblink</code> module is a modified version of the PostgreSQL <code>dblink</code> module. There are some restrictions and limitations when you use the module in WarehousePG.</p><h2 id="installing-and-registering-the-module" tabindex="-1"><a id="topic_reg"></a>Installing and Registering the Module <a class="header-anchor" href="#installing-and-registering-the-module" aria-label="Permalink to &quot;&lt;a id=&quot;topic_reg&quot;&gt;&lt;/a&gt;Installing and Registering the Module&quot;">​</a></h2><p>The <code>dblink</code> module is installed when you install WarehousePG. Before you can use any of the functions defined in the module, you must register the <code>dblink</code> extension in each database in which you want to use the functions. Refer to <a href="./../../install_guide/install_extensions.html">Installing Extensions</a> for more information.</p><h2 id="warehousepg-considerations" tabindex="-1"><a id="topic_mpp"></a>WarehousePG Considerations <a class="header-anchor" href="#warehousepg-considerations" aria-label="Permalink to &quot;&lt;a id=&quot;topic_mpp&quot;&gt;&lt;/a&gt;WarehousePG Considerations&quot;">​</a></h2><p>In this release of WarehousePG, statements that modify table data cannot use named or implicit <code>dblink</code> connections. Instead, you must provide the connection string directly in the <code>dblink()</code> function. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gpadmin=# CREATE TABLE testdbllocal (a int, b text) DISTRIBUTED BY (a);</span></span>
<span class="line"><span>CREATE TABLE</span></span>
<span class="line"><span>gpadmin=# INSERT INTO testdbllocal select * FROM dblink(&#39;dbname=postgres&#39;, &#39;SELECT * FROM testdblink&#39;) AS dbltab(id int, product text);</span></span>
<span class="line"><span>INSERT 0 2</span></span></code></pre></div><p>The WarehousePG version of <code>dblink</code> deactivates the following asynchronous functions:</p><ul><li><code>dblink_send_query()</code></li><li><code>dblink_is_busy()</code></li><li><code>dblink_get_result()</code></li></ul><h2 id="using-dblink" tabindex="-1"><a id="topic_using"></a>Using dblink <a class="header-anchor" href="#using-dblink" aria-label="Permalink to &quot;&lt;a id=&quot;topic_using&quot;&gt;&lt;/a&gt;Using dblink&quot;">​</a></h2><p>The following procedure identifies the basic steps for configuring and using <code>dblink</code> in WarehousePG. The examples use <code>dblink_connect()</code> to create a connection to a database and <code>dblink()</code> to run an SQL query.</p><ol><li><p>Begin by creating a sample table to query using the <code>dblink</code> functions. These commands create a small table in the <code>postgres</code> database, which you will later query from the <code>testdb</code> database using <code>dblink</code>:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ psql -d postgres</span></span>
<span class="line"><span>psql (9.4.20)</span></span>
<span class="line"><span>Type &quot;help&quot; for help.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>postgres=# CREATE TABLE testdblink (a int, b text) DISTRIBUTED BY (a);</span></span>
<span class="line"><span>CREATE TABLE</span></span>
<span class="line"><span>postgres=# INSERT INTO testdblink VALUES (1, &#39;Cheese&#39;), (2, &#39;Fish&#39;);</span></span>
<span class="line"><span>INSERT 0 2</span></span>
<span class="line"><span>postgres=# \\q</span></span>
<span class="line"><span>$</span></span></code></pre></div></li><li><p>Log into a different database as a superuser. In this example, the superuser <code>gpadmin</code> logs into the database <code>testdb</code>. If the <code>dblink</code> functions are not already available, register the <code>dblink</code> extension in the database:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>$ psql -d testdb</span></span>
<span class="line"><span>psql (9.4beta1)</span></span>
<span class="line"><span>Type &quot;help&quot; for help.</span></span>
<span class="line"><span></span></span>
<span class="line"><span>testdb=# CREATE EXTENSION dblink;</span></span>
<span class="line"><span>CREATE EXTENSION</span></span></code></pre></div></li><li><p>Use the <code>dblink_connect()</code> function to create either an implicit or a named connection to another database. The connection string that you provide should be a <code>libpq</code>-style keyword/value string. This example creates a connection named <code>mylocalconn</code> to the <code>postgres</code> database on the local WarehousePG cluster:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=# SELECT dblink_connect(&#39;mylocalconn&#39;, &#39;dbname=postgres user=gpadmin&#39;);</span></span>
<span class="line"><span> dblink_connect</span></span>
<span class="line"><span>----------------</span></span>
<span class="line"><span> OK</span></span>
<span class="line"><span>(1 row)</span></span></code></pre></div><blockquote><p><strong>Note</strong> If a <code>user</code> is not specified, <code>dblink_connect()</code> uses the value of the <code>PGUSER</code> environment variable when WarehousePG was started. If <code>PGUSER</code> is not set, the default is the system user that started WarehousePG.</p></blockquote></li><li><p>Use the <code>dblink()</code> function to query a database using a configured connection. Keep in mind that this function returns a record type, so you must assign the columns returned in the <code>dblink()</code> query. For example, the following command uses the named connection to query the table you created earlier:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=# SELECT * FROM dblink(&#39;mylocalconn&#39;, &#39;SELECT * FROM testdblink&#39;) AS dbltab(id int, product text);</span></span>
<span class="line"><span> id | product</span></span>
<span class="line"><span>----+---------</span></span>
<span class="line"><span>  1 | Cheese</span></span>
<span class="line"><span>  2 | Fish</span></span>
<span class="line"><span>(2 rows)</span></span></code></pre></div></li></ol><p>To connect to the local database as another user, specify the <code>user</code> in the connection string. This example connects to the database as the user <code>test_user</code>. Using <code>dblink_connect()</code>, a superuser can create a connection to another local database without specifying a password.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=# SELECT dblink_connect(&#39;localconn2&#39;, &#39;dbname=postgres user=test_user&#39;);</span></span></code></pre></div><p>To make a connection to a remote database system, include host and password information in the connection string. For example, to create an implicit <code>dblink</code> connection to a remote system:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=# SELECT dblink_connect(&#39;host=remotehost port=5432 dbname=postgres user=gpadmin password=secret&#39;);</span></span></code></pre></div><h3 id="using-dblink-as-a-non-superuser" tabindex="-1"><a id="dblink_u"></a>Using dblink as a Non-Superuser <a class="header-anchor" href="#using-dblink-as-a-non-superuser" aria-label="Permalink to &quot;&lt;a id=&quot;dblink_u&quot;&gt;&lt;/a&gt;Using dblink as a Non-Superuser&quot;">​</a></h3><p>To make a connection to a database with <code>dblink_connect()</code>, non-superusers must include host, user, and password information in the connection string. The host, user, and password information must be included even when connecting to a local database. For example, the user <code>test_user</code> can create a <code>dblink</code> connection to the local system <code>cdw</code> with this command:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=&gt; SELECT dblink_connect(&#39;host=cdw port=5432 dbname=postgres user=test_user password=secret&#39;);</span></span></code></pre></div><p>If non-superusers need to create <code>dblink</code> connections that do not require a password, they can use the <code>dblink_connect_u()</code> function. The <code>dblink_connect_u()</code> function is identical to <code>dblink_connect()</code>, except that it allows non-superusers to create connections that do not require a password.</p><p><code>dblink_connect_u()</code> is initially installed with all privileges revoked from <code>PUBLIC</code>, making it un-callable except by superusers. In some situations, it may be appropriate to grant <code>EXECUTE</code> permission on <code>dblink_connect_u()</code> to specific users who are considered trustworthy, but this should be done with care.</p><blockquote><p><strong>Caution</strong> If a WarehousePG cluster has configured users with an authentication method that does not involve a password, then impersonation and subsequent escalation of privileges can occur when a non-superuser runs <code>dblink_connect_u()</code>. The <code>dblink</code> connection will appear to have originated from the user specified by the function. For example, a non-superuser can run <code>dblink_connect_u()</code> and specify a user that is configured with <code>trust</code> authentication.</p></blockquote><p>Also, even if the <code>dblink</code> connection requires a password, it is possible for the password to be supplied from the server environment, such as a <code>~/.pgpass</code> file belonging to the server&#39;s user. It is recommended that any <code>~/.pgpass</code> file belonging to the server&#39;s user not contain any records specifying a wildcard host name.</p><ol><li><p>As a superuser, grant the <code>EXECUTE</code> privilege on the <code>dblink_connect_u()</code> functions in the user database. This example grants the privilege to the non-superuser <code>test_user</code> on the functions with the signatures for creating an implicit or a named <code>dblink</code> connection. The server and database will be identified through a standard <code>libpq</code> connection string and optionally, a name can be assigned to the connection.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=# GRANT EXECUTE ON FUNCTION dblink_connect_u(text) TO test_user;</span></span>
<span class="line"><span>testdb=# GRANT EXECUTE ON FUNCTION dblink_connect_u(text, text) TO test_user;</span></span></code></pre></div></li><li><p>Now <code>test_user</code> can create a connection to another local database without a password. For example, <code>test_user</code> can log into the <code>testdb</code> database and run this command to create a connection named <code>testconn</code> to the local <code>postgres</code> database.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=&gt; SELECT dblink_connect_u(&#39;testconn&#39;, &#39;dbname=postgres user=test_user&#39;);</span></span></code></pre></div><blockquote><p><strong>Note</strong> If a <code>user</code> is not specified, <code>dblink_connect_u()</code> uses the value of the <code>PGUSER</code> environment variable when WarehousePG was started. If <code>PGUSER</code> is not set, the default is the system user that started WarehousePG.</p></blockquote></li><li><p><code>test_user</code> can use the <code>dblink()</code> function to run a query using a <code>dblink</code> connection. For example, this command uses the <code>dblink</code> connection named <code>testconn</code> created in the previous step. <code>test_user</code> must have appropriate access to the table.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=&gt; SELECT * FROM dblink(&#39;testconn&#39;, &#39;SELECT * FROM testdblink&#39;) AS dbltab(id int, product text);</span></span></code></pre></div></li></ol><h3 id="using-dblink-with-ssl-encrypted-connections-to-warehousepg" tabindex="-1"><a id="dblink_ssl"></a>Using dblink with SSL-Encrypted Connections to WarehousePG <a class="header-anchor" href="#using-dblink-with-ssl-encrypted-connections-to-warehousepg" aria-label="Permalink to &quot;&lt;a id=&quot;dblink_ssl&quot;&gt;&lt;/a&gt;Using dblink with SSL-Encrypted Connections to WarehousePG&quot;">​</a></h3><p>When you use <code>dblink</code> to connect to WarehousePG over an encrypted connection, you must specify the <code>sslmode</code> property in the connection string. Set <code>sslmode</code> to at least <code>require</code> to disallow unencrypted transfers. For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>testdb=# SELECT dblink_connect(&#39;greenplum_con_sales&#39;, &#39;dbname=sales host=gpcoordinator user=gpadmin sslmode=require&#39;);</span></span></code></pre></div><p>Refer to <a href="./../../security_guide/authentication.html#ssl_postgresql">SSL Client Authentication</a> for information about configuring WarehousePG to use SSL.</p><h2 id="additional-module-documentation" tabindex="-1"><a id="topic_info"></a>Additional Module Documentation <a class="header-anchor" href="#additional-module-documentation" aria-label="Permalink to &quot;&lt;a id=&quot;topic_info&quot;&gt;&lt;/a&gt;Additional Module Documentation&quot;">​</a></h2><p>Refer to the <a href="https://www.postgresql.org/docs/12/dblink.html" target="_blank" rel="noreferrer">dblink</a> PostgreSQL documentation for detailed information about the individual functions in this module.</p>`,33)]))}const b=n(o,[["render",i]]);export{h as __pageData,b as default};
